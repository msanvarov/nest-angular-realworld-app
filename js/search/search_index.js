var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.436,1,2.558]],["body/controllers/AppController.html",[0,2.513,1,3.775,2,1.611,3,0.218,4,0.218,5,0.144,6,3.546,7,1.581,8,4.64,9,0.296,10,1.282,11,2.366,12,5.531,13,1.025,14,0.02,15,3.16,16,3.472,17,6.445,18,3.565,19,2.872,20,3.22,21,3.472,22,0.38,23,4.132,24,1.522,25,5.531,26,4.929,27,2.497,28,0.352,29,0.928,30,3.22,31,3.598,32,1.25,33,3.546,34,1.529,35,1.381,36,3.97,37,3.546,38,3.22,39,2.872,40,0.218,41,0.144,42,1.795,43,1.9,44,2.45,45,2.286,46,1.132,47,0.838,48,3.005,49,2.641,50,0.928,51,4.132,52,0.014,53,0.014]],["title/modules/AppModule.html",[54,1.294,55,2.558]],["body/modules/AppModule.html",[1,3.346,2,1.569,3,0.253,4,0.142,5,0.141,14,0.02,28,0.374,29,0.605,36,3.551,37,2.314,40,0.142,41,0.094,44,3.165,47,0.547,50,0.903,52,0.01,53,0.01,54,1.415,55,4.972,56,1.24,57,1.748,58,2.314,59,2.314,60,2.314,61,3.829,62,3.386,63,3.829,64,3.829,65,3.829,66,3.829,67,2.086,68,1.398,69,1.315,70,2.697,71,1.962,72,3.386,73,4.581,74,4.531,75,1.724,76,2.697,77,2.314,78,2.062,79,1.599,80,4.024,81,1.172,82,4.131,83,2.697,84,1.724,85,3.412,86,2.697,87,2.697,88,4.024,89,2.314,90,2.314,91,2.697,92,2.697,93,2.314,94,2.697,95,2.697,96,2.697,97,2.697,98,2.697,99,2.697,100,2.697,101,2.314,102,2.697,103,3.077,104,2.697,105,2.314,106,2.697,107,2.314,108,2.697,109,2.314,110,2.697,111,2.314,112,2.697,113,2.314,114,2.697,115,2.314,116,2.697,117,2.314,118,2.697,119,2.314,120,2.697,121,2.697,122,3.346,123,4.131,124,2.314,125,2.697,126,2.697,127,2.697,128,1.874,129,2.697,130,0.211,131,2.697,132,2.697,133,2.697,134,2.697,135,2.697,136,1.052,137,2.697,138,1.172,139,2.697,140,1.724,141,2.697,142,1.492,143,2.697,144,2.697,145,2.697,146,4.024,147,3.453,148,2.697,149,2.454,150,2.062,151,2.697,152,2.697,153,4.814,154,5.338,155,4.024,156,4.024,157,0.999,158,4.024,159,2.196,160,4.024,161,4.024,162,2.697,163,4.024,164,2.697,165,2.314,166,2.697,167,2.697,168,2.697,169,2.697,170,2.697,171,2.697,172,2.697,173,2.697,174,2.697,175,2.697,176,2.697,177,2.697]],["title/injectables/AppService.html",[36,2.183,178,1.009]],["body/injectables/AppService.html",[3,0.221,4,0.221,5,0.147,7,1.297,9,0.301,10,1.297,12,5.777,14,0.02,22,0.505,24,1.532,25,5.777,26,5.148,28,0.342,29,0.943,33,5.25,34,1.555,35,1.405,36,3.256,40,0.221,41,0.147,42,2.819,43,1.932,44,3.846,46,1.151,47,0.852,50,0.943,52,0.014,53,0.014,84,2.686,85,3.511,122,2.92,130,0.329,150,4.2,178,1.505,179,1.932,180,3.606,181,4.713,182,4.202,183,6.122,184,4.202,185,1.151,186,0.809,187,1.043,188,4.202,189,3.606,190,3.606,191,2.049,192,4.202,193,4.202,194,2.92,195,4.202,196,3.606,197,3.214]],["title/controllers/ArticleController.html",[0,1.436,198,2.558]],["body/controllers/ArticleController.html",[0,0.604,2,0.604,3,0.082,4,0.082,5,0.054,7,1.731,9,0.111,10,0.612,11,2.638,13,1.299,14,0.019,15,1.185,18,3.742,19,3.637,20,3.738,22,0.481,24,1.236,27,2.406,28,0.317,29,0.348,30,1.537,31,4.035,32,0.469,34,0.574,35,0.518,38,1.537,39,1.077,40,0.082,41,0.054,43,1.796,45,0.857,46,0.425,47,1.294,48,3.742,49,3.346,50,1.175,52,0.007,53,0.007,130,0.409,157,0.829,185,1.434,186,1.007,187,1.299,198,1.802,199,1.33,200,0.991,201,3.78,202,2.869,203,3.343,204,2.869,205,3.343,206,2.593,207,2.869,208,2.869,209,2.869,210,1.33,211,0.877,212,2.026,213,2.96,214,1.55,215,4.821,216,3.268,217,4.821,218,4.003,219,4.821,220,4.821,221,1.55,222,4.035,223,4.279,224,1.434,225,1.55,226,1.55,227,1.55,228,2.578,229,1.55,230,3.907,231,5.106,232,1.55,233,2.075,234,1.55,235,2.225,236,3.907,237,1.55,238,4.009,239,2.317,240,1.55,241,1.55,242,3.907,243,1.55,244,1.55,245,1.55,246,1.55,247,1.33,248,2.498,249,1.55,250,4.668,251,1.33,252,2.498,253,1.55,254,3.907,255,1.55,256,1.55,257,3.353,258,1.55,259,1.55,260,2.988,261,1.55,262,1.434,263,1.983,264,1.33,265,1.185,266,0.991,267,1.33,268,1.33,269,0.991,270,1.185,271,1.077,272,0.857,273,1.077,274,1.344,275,1.344,276,1.63,277,1.185,278,0.713,279,1.658,280,1.33,281,0.545,282,1.982,283,1.33,284,1.33,285,1.33,286,1.33,287,1.33,288,1.185,289,1.33,290,1.55,291,1.55,292,2.713,293,1.55,294,1.55,295,2.988,296,1.55,297,0.919,298,1.74,299,1.55,300,1.55,301,4.702,302,1.55,303,1.55,304,2.593,305,1.55,306,2.988,307,2.988,308,3.907,309,1.55,310,1.55,311,1.55,312,1.55,313,1.55,314,1.55,315,1.55]],["title/classes/ArticleDto.html",[41,0.128,297,2.183]],["body/classes/ArticleDto.html",[3,0.222,4,0.222,5,0.147,7,1.446,9,0.302,13,1.611,14,0.019,22,0.597,28,0.322,32,1.274,40,0.29,41,0.226,47,1.447,52,0.014,53,0.014,130,0.54,149,2.816,187,1.365,213,2.497,223,2.497,262,3.388,297,3.85,316,1.274,317,5.152,318,3.221,319,1.584,320,4.257,321,4.257,322,6.125,323,4.212,324,4.212,325,2.927,326,4.212,327,4.212,328,4.212,329,3.002,330,1.83,331,3.166,332,3.823,333,3.823,334,2.852,335,1.733,336,3.516,337,2.184,338,3.615]],["title/entities/ArticleEntity.html",[339,1.599,340,1.514]],["body/entities/ArticleEntity.html",[3,0.177,4,0.177,5,0.118,7,1.472,9,0.241,13,1.732,14,0.02,22,0.642,28,0.249,40,0.177,41,0.117,47,1.415,52,0.012,53,0.012,130,0.561,142,1.863,149,2.173,157,1.173,159,1.386,186,0.648,201,2.341,211,1.33,231,4.177,233,2.082,262,3.021,281,1.184,319,1.361,320,3.796,321,3.796,339,2.054,340,1.945,341,2.891,342,3.238,343,5.462,344,5.462,345,2.511,346,5.462,347,2.891,348,4.727,349,4.727,350,3.368,351,4.687,352,4.727,353,3.368,354,6.237,355,5.922,356,4.019,357,5.922,358,3.368,359,4.057,360,3.368,361,3.615,362,3.368,363,3.492,364,3.368,365,4.462,366,3.368,367,4.727,368,4.727,369,3.368,370,3.368,371,3.368,372,4.727,373,4.057,374,1.386,375,3.368,376,3.368]],["title/classes/ArticleFeedQueryParams.html",[41,0.128,252,2.353]],["body/classes/ArticleFeedQueryParams.html",[3,0.255,4,0.255,5,0.169,9,0.347,13,1.493,14,0.019,22,0.553,28,0.317,32,1.467,40,0.255,41,0.21,52,0.015,53,0.015,130,0.47,233,2.405,252,3.846,316,1.467,319,1.732,325,4.181,329,2.842,332,4.546,333,4.546,335,1.995,336,3.846,337,3.119,377,5.614,378,4.162,379,5.003,380,5.614,381,5.163,382,4.849,383,4.849]],["title/modules/ArticleModule.html",[54,1.294,61,2.353]],["body/modules/ArticleModule.html",[2,2.18,3,0.227,4,0.227,5,0.151,14,0.02,28,0.385,29,0.969,40,0.227,41,0.151,52,0.014,53,0.014,54,1.965,56,1.985,57,2.429,61,4.675,67,2.898,68,2.238,69,2.105,71,2.725,72,2.56,79,2.56,81,1.876,198,4.308,211,1.255,281,1.518,282,4.124,283,3.705,340,2.299,384,3.705,385,3.705,386,3.391,387,3.606,388,4.317,389,3.302,390,3.092,391,3.705,392,3.314,393,4.317,394,3.705,395,4.317,396,3.705,397,4.317]],["title/injectables/ArticleService.html",[178,1.009,282,2.183]],["body/injectables/ArticleService.html",[3,0.086,4,0.086,5,0.057,9,0.117,10,0.639,11,2.611,14,0.02,22,0.526,24,1.31,27,2.758,28,0.316,29,0.367,34,0.605,35,0.546,40,0.086,41,0.057,42,1.177,46,1.106,47,1.31,50,1.318,52,0.007,53,0.007,81,0.71,130,0.447,136,1.056,149,0.751,157,1.111,159,1.427,178,0.742,179,0.751,185,1.568,186,1.129,187,1.42,191,2.492,201,3.111,202,2.978,204,2.978,207,2.978,208,2.324,209,2.978,210,1.402,211,0.906,212,2.093,213,2.394,223,3.392,231,4.091,233,2.246,238,3.354,239,0.968,247,1.402,248,2.581,250,3.841,251,2.324,252,2.581,257,3.465,267,2.978,268,1.402,281,0.574,282,1.606,284,1.402,285,1.402,286,1.402,287,1.402,288,1.249,289,1.402,292,3.445,297,2.394,298,2.512,320,1.135,321,1.135,340,1.841,342,2.654,345,2.058,361,3.087,374,0.672,387,2.65,390,0.904,391,1.402,394,1.402,396,1.402,398,1.402,399,3.47,400,2.709,401,2.709,402,2.709,403,1.633,404,3.976,405,2.654,406,2.978,407,1.633,408,2.709,409,1.633,410,4.675,411,1.633,412,2.709,413,1.633,414,1.633,415,1.633,416,1.633,417,2.709,418,1.633,419,1.633,420,1.633,421,1.633,422,2.709,423,1.633,424,1.633,425,1.633,426,1.402,427,1.402,428,1.135,429,2.324,430,1.633,431,1.249,432,1.402,433,1.633,434,1.633,435,1.633,436,1.633,437,1.402,438,1.633,439,2.709,440,2.709,441,2.709,442,2.709,443,2.709,444,1.633,445,1.882,446,2.709,447,3.423,448,2.709,449,1.633,450,2.709,451,3.465,452,3.465,453,4.476,454,1.633,455,1.633,456,1.633,457,1.633,458,2.709,459,2.709,460,4.476,461,2.709,462,2.709,463,2.709,464,2.709,465,2.709,466,2.709,467,1.633,468,1.633,469,1.633,470,2.709,471,2.709,472,1.633,473,2.324,474,1.633,475,1.633,476,1.402,477,1.633,478,1.249,479,1.633,480,2.709,481,1.633,482,1.633,483,1.633,484,2.324,485,2.709,486,1.633,487,1.633,488,1.402,489,1.249,490,1.249,491,2.709,492,1.633,493,4.037,494,1.633,495,1.633,496,3.47,497,1.882,498,1.633,499,1.249,500,1.402,501,1.633,502,1.633,503,1.633,504,2.709,505,2.709,506,2.709,507,2.709,508,2.709,509,1.882,510,1.633,511,2.709,512,2.324,513,2.709,514,1.633]],["title/classes/ArticlesQueryParams.html",[41,0.128,248,2.353]],["body/classes/ArticlesQueryParams.html",[3,0.219,4,0.219,5,0.145,9,0.297,13,1.664,14,0.019,22,0.616,28,0.287,32,1.256,40,0.219,41,0.19,47,1.395,52,0.014,53,0.014,130,0.524,233,2.271,248,3.483,316,1.256,319,1.569,325,4.66,329,2.99,332,4.783,333,4.783,335,1.708,336,4.287,337,3.476,342,3.606,379,4.651,380,5.219,381,5.755,445,4.227,473,5.219,515,5.906,516,3.563,517,4.152,518,4.152,519,4.152,520,4.152,521,4.152]],["title/modules/AuthModule.html",[54,1.294,62,2.183]],["body/modules/AuthModule.html",[2,1.404,3,0.189,4,0.189,5,0.126,10,0.85,11,1.404,14,0.02,22,0.331,24,0.85,28,0.372,29,0.808,40,0.189,41,0.126,50,1.111,52,0.013,53,0.013,54,2.143,56,1.655,57,2.151,62,4.327,67,2.566,68,1.866,69,1.755,71,3.297,72,2.935,73,4.856,74,4.235,75,2.301,78,3.786,79,2.134,81,1.564,122,2.502,123,3.089,211,0.808,233,1.266,281,1.266,298,1.332,522,3.089,523,3.089,524,3.089,525,3.952,526,4.236,527,3.035,528,2.753,529,4.248,530,5.658,531,3.599,532,2.753,533,3.599,534,2.753,535,3.599,536,2.502,537,2.566,538,3.599,539,2.502,540,3.089,541,3.599,542,3.599,543,2.753,544,3.599,545,3.599,546,2.301,547,3.599,548,3.599,549,3.089,550,3.599,551,4.95,552,3.599]],["title/injectables/AuthService.html",[178,1.009,525,2.036]],["body/injectables/AuthService.html",[3,0.191,4,0.191,5,0.126,7,1.174,9,0.259,10,1.174,14,0.02,22,0.522,24,1.174,27,1.665,28,0.322,29,0.813,40,0.191,41,0.126,42,2.655,43,2.809,44,3.796,46,1.754,47,1.008,50,0.813,52,0.013,53,0.013,74,4.708,75,2.315,130,0.478,136,1.939,157,1.234,178,1.362,179,1.665,185,1.362,186,0.957,187,1.234,191,3.122,211,1.438,212,2.577,224,2.004,233,1.996,262,2.75,281,1.274,319,1.431,345,2.286,525,2.75,527,2.286,534,2.77,546,3.906,553,3.108,554,3.802,555,5.677,556,5.677,557,3.622,558,6.9,559,4.972,560,3.622,561,3.622,562,4.266,563,3.802,564,4.708,565,4.266,566,4.266,567,4.266,568,4.266,569,2.517,570,3.622,571,3.622,572,3.108,573,3.178,574,2.16,575,3.622]],["title/injectables/CaslFactory.html",[178,1.009,386,1.795]],["body/injectables/CaslFactory.html",[3,0.205,4,0.205,5,0.136,9,0.278,10,1.232,14,0.02,22,0.358,24,0.918,28,0.346,29,0.873,34,1.44,35,1.744,40,0.275,41,0.136,50,0.873,52,0.013,53,0.013,130,0.492,157,1.629,159,1.6,178,1.43,179,1.789,185,1.066,186,0.749,187,0.965,211,1.413,281,1.368,298,1.44,316,1.177,340,2.422,342,3.094,386,2.544,489,2.975,576,2.975,577,5.219,578,5.219,579,3.891,580,3.053,581,5.219,582,5.219,583,5.219,584,4.479,585,3.339,586,2.307,587,3.339,588,2.152,589,5.219,590,4.479,591,3.891,592,3.991,593,3.891,594,3.891,595,3.891,596,5.219,597,2.017,598,3.891,599,3.339,600,5.219,601,3.891,602,3.336,603,2.975,604,3.891,605,5.054,606,3.891,607,4.479,608,4.479,609,3.891,610,3.891,611,3.891,612,3.891,613,3.891,614,3.891,615,3.891,616,3.339,617,3.891,618,3.891,619,3.891]],["title/modules/CaslModule.html",[54,1.294,63,2.353]],["body/modules/CaslModule.html",[3,0.266,4,0.266,5,0.176,14,0.019,28,0.325,29,1.133,40,0.266,41,0.176,52,0.016,53,0.016,54,2.168,56,2.32,57,2.679,63,4.684,67,3.197,68,2.617,69,2.461,71,3.006,386,3.688,529,5.292,620,4.331,621,5.047,622,4.331,623,5.047,624,2.792]],["title/classes/CreateArticleDto.html",[41,0.128,213,2.183]],["body/classes/CreateArticleDto.html",[3,0.243,4,0.243,5,0.161,7,1.09,9,0.33,13,1.146,14,0.019,22,0.424,28,0.337,32,1.397,40,0.307,41,0.234,47,1.362,52,0.015,53,0.015,130,0.5,149,2.682,213,3.459,223,3.792,262,2.554,297,3.985,316,1.397,317,4.462,318,3.531,319,1.68,320,3.208,321,3.208,325,3.208,329,3.076,330,2.006,331,3.276,332,4.055,333,4.055,334,3.025,335,1.899,336,3.73,337,2.393,338,3.962,625,4.617,626,4.617]],["title/classes/CreateTagDto.html",[41,0.128,627,2.558]],["body/classes/CreateTagDto.html",[3,0.271,4,0.271,5,0.18,9,0.369,13,1.279,14,0.019,22,0.474,28,0.329,32,1.559,40,0.271,41,0.218,46,1.841,47,1.266,52,0.016,53,0.016,130,0.403,186,1.293,316,1.559,319,1.798,329,2.713,331,3.044,335,2.119,627,4.34,628,5.359,629,4.422,630,5.152,631,5.152,632,6.244]],["title/classes/DeleteArticlePolicyHandler.html",[41,0.128,274,1.908]],["body/classes/DeleteArticlePolicyHandler.html",[3,0.217,4,0.217,5,0.144,9,0.295,10,1.28,14,0.02,22,0.379,24,0.973,28,0.339,34,1.526,35,1.378,40,0.352,41,0.225,50,1.446,52,0.014,53,0.014,130,0.474,185,1.129,186,0.793,187,1.023,211,1.361,274,2.811,275,2.137,276,2.01,278,1.895,281,1.449,316,1.247,340,2.493,580,2.811,586,2.444,588,2.28,597,3.726,624,2.28,633,3,634,2.28,635,3.701,636,3.63,637,3.467,638,4.391,639,4.122,640,2.137,641,3.593,642,3.215,643,2.137,644,2.444,645,3.467,646,2.137,647,3.467]],["title/classes/DeleteUserPolicyHandler.html",[41,0.128,646,1.908]],["body/classes/DeleteUserPolicyHandler.html",[3,0.217,4,0.217,5,0.144,9,0.295,10,1.28,14,0.02,22,0.379,24,0.973,28,0.339,34,1.526,35,1.378,40,0.352,41,0.225,50,1.446,52,0.014,53,0.014,130,0.474,185,1.129,186,0.793,187,1.023,211,1.361,274,2.137,275,2.137,276,2.01,278,1.895,281,1.449,316,1.247,340,2.493,580,2.811,586,2.444,588,2.28,597,3.726,624,2.28,633,3,634,2.28,635,3.701,636,3.63,637,3.467,638,4.391,640,2.137,641,3.593,642,3.215,643,2.137,644,2.444,645,3.467,646,2.811,647,3.467,648,4.122]],["title/entities/FollowEntity.html",[339,1.599,390,2.036]],["body/entities/FollowEntity.html",[3,0.257,4,0.257,5,0.171,9,0.35,13,1.629,14,0.019,22,0.603,28,0.257,40,0.257,41,0.171,52,0.015,53,0.015,130,0.513,142,2.705,186,0.941,233,2.525,319,1.741,339,2.628,345,3.019,363,4.198,365,4.507,374,2.012,390,3.346,476,4.197,478,5.022,649,4.197,650,5.635,651,4.89,652,4.89,653,4.89]],["title/interfaces/IPolicyHandler.html",[636,1.908,640,1.908]],["body/interfaces/IPolicyHandler.html",[3,0.218,4,0.218,5,0.144,9,0.296,10,1.282,14,0.02,22,0.38,24,0.975,28,0.339,34,1.529,35,1.381,40,0.352,41,0.225,50,1.447,52,0.014,53,0.014,130,0.474,185,1.132,186,0.795,187,1.025,211,1.362,274,2.142,275,2.142,276,2.014,278,1.9,281,1.453,340,2.496,580,2.816,586,2.45,588,2.286,597,3.728,624,2.286,633,3.005,634,2.286,635,3.565,636,3.632,637,3.472,638,4.394,640,2.142,641,3.821,642,3.22,643,2.142,644,2.45,645,3.472,646,2.142,647,3.472,654,4.132,655,4.132]],["title/injectables/JwtAuthGuard.html",[178,1.009,656,2.558]],["body/injectables/JwtAuthGuard.html",[3,0.232,4,0.232,5,0.154,7,1.04,9,0.315,10,1.337,14,0.02,22,0.52,24,1.04,28,0.348,29,0.989,40,0.232,41,0.154,42,1.914,45,2.437,50,1.271,52,0.014,53,0.014,130,0.443,149,2.025,178,1.552,179,2.025,185,1.552,186,1.09,187,1.405,298,1.631,536,3.062,546,3.62,554,4.33,656,3.935,657,5.37,658,3.78,659,3.935,660,4.859,661,3.78,662,6.001,663,4.405,664,4.859,665,5.051,666,4.405,667,3.78,668,3.062,669,4.405,670,3.369,671,4.405,672,3.78,673,4.405,674,3.78,675,4.859,676,4.405,677,3.78,678,4.405,679,4.405]],["title/injectables/JwtStrategy.html",[178,1.009,526,2.183]],["body/injectables/JwtStrategy.html",[3,0.198,4,0.198,5,0.131,7,0.889,9,0.269,10,1.205,11,2.258,14,0.02,22,0.469,24,1.205,27,2.662,28,0.352,29,0.845,40,0.198,41,0.202,42,2.697,43,2.662,46,1.398,52,0.013,53,0.013,74,4.839,75,2.406,130,0.399,178,1.398,179,1.73,185,1.398,186,0.982,187,1.266,191,2.488,211,0.845,281,1.323,298,1.393,337,1.951,345,1.73,526,3.026,527,3.245,536,2.616,540,3.23,546,3.969,549,3.23,563,3.903,564,4.51,672,3.23,674,3.23,680,3.23,681,5.79,682,4.969,683,3.764,684,3.764,685,3.764,686,6.208,687,3.764,688,5.103,689,5.103,690,4.38,691,3.903,692,3.23,693,3.764,694,3.764,695,3.23,696,3.764,697,3.764,698,3.764,699,3.764,700,3.764,701,3.764,702,3.764,703,3.764,704,5.103,705,5.103,706,3.23,707,3.764,708,5.103]],["title/classes/LoginDto.html",[41,0.128,709,2.183]],["body/classes/LoginDto.html",[3,0.242,4,0.242,5,0.16,9,0.329,13,1.14,14,0.02,22,0.422,28,0.336,32,1.389,40,0.306,41,0.241,46,1.896,47,1.179,52,0.015,53,0.015,130,0.499,138,2.526,157,1.583,224,2.54,316,1.389,319,1.674,329,2.914,330,1.995,331,3.111,334,3.014,335,1.889,574,2.526,709,3.447,710,3.512,711,4.288,712,3.512,713,4.592,714,3.447,715,2.723,716,3.191,717,3.447,718,2.723]],["title/classes/PasswordTransformer.html",[41,0.128,719,2.558]],["body/classes/PasswordTransformer.html",[3,0.228,4,0.228,5,0.152,7,1.467,9,0.311,10,1.324,14,0.019,22,0.515,24,1.324,28,0.295,40,0.228,41,0.217,43,2.578,47,1.523,50,1.259,52,0.014,53,0.014,130,0.438,138,2.436,185,1.536,186,1.079,187,1.392,316,1.313,330,2.436,374,1.785,635,3.102,719,3.897,720,3.724,721,6.213,722,5.607,723,4.339,724,5.607,725,5.636,726,6.082,727,5.607,728,4.339,729,5.607,730,4.812,731,3.724,732,4.339]],["title/classes/PatchArticlePolicyHandler.html",[41,0.128,275,1.908]],["body/classes/PatchArticlePolicyHandler.html",[3,0.217,4,0.217,5,0.144,9,0.295,10,1.28,14,0.02,22,0.379,24,0.973,28,0.339,34,1.526,35,1.378,40,0.352,41,0.225,50,1.446,52,0.014,53,0.014,130,0.474,185,1.129,186,0.793,187,1.023,211,1.361,274,2.137,275,2.811,276,2.01,278,1.895,281,1.449,316,1.247,340,2.493,580,2.811,586,2.444,588,2.28,597,3.726,624,2.28,633,3,634,2.28,635,3.701,636,3.63,637,3.467,638,4.391,640,2.137,641,3.593,642,3.215,643,2.137,644,2.444,645,3.467,646,2.137,647,3.467,733,4.122]],["title/classes/PatchUserDto.html",[41,0.128,734,2.353]],["body/classes/PatchUserDto.html",[3,0.215,4,0.215,5,0.143,7,0.964,9,0.292,13,1.013,14,0.02,22,0.375,28,0.318,32,1.235,40,0.284,41,0.239,46,1.943,47,1.352,52,0.014,53,0.014,130,0.472,136,2.102,138,2.342,157,1.655,212,2.794,316,1.235,319,1.551,329,3.035,330,1.774,331,3.34,334,2.794,335,1.68,574,2.342,712,3.123,714,3.195,715,2.421,717,3.954,718,2.421,734,3.445,735,4.122,736,3.123,737,4.625,738,4.101,739,4.083,740,3.746,741,4.625,742,3.504,743,3.746,744,3.504,745,3.445,746,3.123,747,3.504]],["title/classes/PatchUserPolicyHandler.html",[41,0.128,276,1.795]],["body/classes/PatchUserPolicyHandler.html",[3,0.216,4,0.216,5,0.144,9,0.294,10,1.278,14,0.02,22,0.378,24,0.971,28,0.339,34,1.522,35,1.375,40,0.352,41,0.224,50,1.444,52,0.014,53,0.014,130,0.473,185,1.127,186,0.791,187,1.02,211,1.359,274,2.132,275,2.132,276,2.64,278,1.891,281,1.446,316,1.244,340,2.49,580,2.807,586,2.438,588,2.275,597,3.724,624,2.275,633,2.995,634,2.275,635,3.698,636,3.628,637,3.461,638,4.388,640,2.132,641,3.814,642,3.21,643,2.132,644,2.438,645,3.461,646,2.132,647,3.461,748,4.112]],["title/guards/PoliciesGuard.html",[272,2.036,659,2.558]],["body/guards/PoliciesGuard.html",[3,0.204,4,0.204,5,0.135,9,0.277,10,1.228,11,2.291,14,0.02,22,0.54,24,1.228,27,2.392,28,0.345,29,0.87,40,0.204,41,0.135,42,1.683,45,2.142,50,1.319,52,0.013,53,0.013,130,0.459,157,0.961,178,1.426,185,1.61,186,1.131,187,1.458,191,3.062,271,2.692,272,2.878,278,1.781,298,2.175,386,3.361,532,2.962,580,3.397,597,3.256,624,2.142,635,2.142,643,3.256,644,2.296,660,5.391,661,3.324,662,5.791,664,4.465,665,4.804,667,3.324,668,2.692,677,3.324,749,3.873,750,3.324,751,5.203,752,3.873,753,3.873,754,5.203,755,3.873,756,5.203,757,3.979,758,3.324,759,3.873,760,3.873,761,3.873,762,3.873,763,3.873,764,3.873,765,2.962,766,3.873,767,3.873]],["title/controllers/ProfileController.html",[0,1.436,768,2.558]],["body/controllers/ProfileController.html",[0,1.084,2,1.084,3,0.146,4,0.146,5,0.097,7,1.696,9,0.199,10,0.971,11,2.563,13,1.216,14,0.019,18,3.636,19,3.406,20,3.59,22,0.45,24,1.157,28,0.33,29,0.624,30,2.44,31,3.964,32,0.841,40,0.146,41,0.097,43,1.278,45,1.537,46,0.761,47,1.332,48,3.636,49,3.133,50,1.1,52,0.01,53,0.01,130,0.383,136,2.112,185,1.343,186,0.943,187,1.216,200,1.777,215,4.631,217,4.631,218,3.747,219,4.631,220,4.631,228,1.648,233,2.311,235,3.531,238,4.568,239,2.905,263,2.125,265,2.125,266,1.777,269,1.777,270,2.125,271,1.931,272,1.537,273,1.931,276,2.389,277,2.125,278,1.278,279,1.777,280,2.385,292,2.54,295,3.747,298,1.814,306,3.147,307,3.147,768,2.86,769,2.385,770,2.385,771,4.205,772,4.205,773,4.205,774,2.385,775,5.891,776,2.779,777,4.143,778,5.394,779,2.779,780,2.385,781,2.385,782,2.779,783,2.385,784,2.779,785,5.417,786,2.779,787,2.905,788,2.385,789,2.779,790,2.779,791,2.385,792,4.205,793,2.779,794,4.9,795,2.779,796,2.779,797,2.779,798,2.779]],["title/modules/ProfileModule.html",[54,1.294,64,2.353]],["body/modules/ProfileModule.html",[2,2.287,3,0.245,4,0.245,5,0.163,14,0.019,28,0.379,29,1.045,40,0.245,41,0.162,52,0.015,53,0.015,54,2.062,56,2.14,57,2.548,64,4.657,67,3.04,68,2.413,69,2.269,71,2.859,72,2.759,79,2.759,81,2.022,211,1.045,281,1.636,386,3.458,389,3.559,390,3.244,543,3.559,768,4.462,787,4.206,788,3.994,799,3.994,800,3.994,801,4.654,802,3.994,803,4.654]],["title/injectables/ProfileService.html",[178,1.009,787,2.183]],["body/injectables/ProfileService.html",[3,0.143,4,0.143,5,0.095,9,0.194,10,0.954,11,2.547,14,0.02,22,0.526,24,1.264,28,0.301,29,0.609,35,0.907,40,0.143,41,0.095,42,1.757,46,1.108,47,1.324,50,1.202,52,0.01,53,0.01,81,1.179,128,1.886,130,0.448,136,1.884,149,1.248,157,1.621,159,2.469,178,1.108,179,1.248,185,1.569,186,1.102,187,1.421,191,1.971,194,1.886,211,0.908,228,1.609,233,2.296,238,4.62,239,2.865,281,0.954,292,3.224,298,2.222,337,1.407,374,1.116,390,2.236,404,4.322,405,3.092,406,4.147,426,4.147,427,2.329,428,1.886,431,2.075,432,2.329,447,3.695,478,3.695,497,3.979,499,3.695,500,4.147,608,2.329,641,1.609,650,4.147,771,3.47,772,3.47,773,3.47,774,3.47,775,5.862,777,4.095,778,3.695,780,3.47,783,3.47,787,2.397,802,2.329,804,2.329,805,4.043,806,2.329,807,2.714,808,4.043,809,2.714,810,2.714,811,2.714,812,2.714,813,2.714,814,2.714,815,2.329,816,4.832,817,4.043,818,6.218,819,2.714,820,5.152,821,2.714,822,4.043,823,4.043,824,4.043,825,4.043,826,2.714,827,2.714,828,2.714,829,2.714,830,2.714,831,2.714]],["title/classes/RegisterDto.html",[41,0.128,832,2.353]],["body/classes/RegisterDto.html",[3,0.234,4,0.234,5,0.155,9,0.319,13,1.104,14,0.02,22,0.409,28,0.331,32,1.346,40,0.3,41,0.239,46,1.921,47,1.275,52,0.014,53,0.014,130,0.492,136,2.223,138,2.477,157,1.56,224,2.462,316,1.346,319,1.641,329,2.978,330,1.934,331,3.233,334,2.955,335,1.831,574,2.477,712,3.404,714,3.379,715,2.639,717,3.728,718,2.639,740,3.961,832,3.644,833,3.404,834,4.239,835,4.45,836,3.404]],["title/controllers/TagController.html",[0,1.436,837,2.558]],["body/controllers/TagController.html",[0,1.705,2,1.705,3,0.23,4,0.23,5,0.153,7,1.555,9,0.313,10,1.33,11,2.432,13,1.085,14,0.019,15,3.343,16,3.602,18,3.643,20,3.341,21,3.602,22,0.402,24,1.032,28,0.347,29,0.982,30,3.341,31,3.697,32,1.322,38,3.341,39,3.038,40,0.23,41,0.152,45,2.418,46,1.198,48,3.117,50,0.982,52,0.014,53,0.014,200,2.795,239,2.592,266,2.795,292,2.266,298,1.618,387,3.232,490,5.43,837,3.916,838,3.752,839,5.652,840,5.652,841,3.343,842,4.372,843,3.752,844,4.372,845,4.372,846,3.343,847,4.372,848,4.372,849,3.752]],["title/entities/TagEntity.html",[339,1.599,392,2.183]],["body/entities/TagEntity.html",[3,0.257,4,0.257,5,0.17,7,1.151,9,0.349,13,1.498,14,0.019,22,0.555,28,0.257,40,0.257,41,0.229,47,1.224,52,0.015,53,0.015,130,0.472,142,2.698,149,2.776,186,1.319,233,2.123,319,1.738,339,2.978,345,3.015,363,4.192,365,3.86,374,2.006,392,3.58,445,4.196,490,3.729,850,4.185,851,4.877,852,4.185,853,4.877,854,4.185]],["title/modules/TagModule.html",[54,1.294,65,2.353]],["body/modules/TagModule.html",[2,2.363,3,0.258,4,0.258,5,0.171,14,0.019,28,0.371,29,1.101,40,0.258,41,0.171,52,0.015,53,0.015,54,2.13,56,2.255,57,2.632,65,4.594,67,3.141,68,2.542,69,2.391,71,2.954,72,2.908,79,2.908,81,2.131,387,3.726,392,2.908,837,4.569,843,4.209,855,4.904,856,4.904,857,4.904,858,4.904,859,4.209,860,4.904]],["title/injectables/TagService.html",[178,1.009,387,1.908]],["body/injectables/TagService.html",[3,0.206,4,0.206,5,0.136,9,0.28,10,1.236,11,2.638,14,0.02,22,0.542,24,1.236,27,2.898,28,0.364,29,0.877,40,0.206,41,0.136,42,2.274,46,1.434,50,1.175,52,0.013,53,0.013,81,1.698,84,2.498,85,3.346,122,2.716,130,0.409,159,1.608,165,4.492,178,1.434,179,1.797,183,5.93,185,1.434,186,1.007,187,1.299,189,3.354,190,3.354,191,2.552,223,2.317,288,2.989,292,2.714,298,1.447,374,1.608,387,2.714,392,3.104,404,4.382,428,2.716,445,4.102,484,3.354,489,2.989,627,4.382,839,5.41,849,3.354,859,3.354,861,3.354,862,5.235,863,3.908,864,3.908,865,5.235,866,5.235,867,3.908,868,3.908,869,3.908,870,3.908,871,3.908,872,3.354,873,3.908,874,3.908,875,3.908,876,5.235,877,3.908,878,3.908,879,3.908,880,3.354]],["title/controllers/UserController.html",[0,1.436,881,2.558]],["body/controllers/UserController.html",[0,1.378,2,1.378,3,0.186,4,0.186,5,0.123,7,1.427,9,0.253,10,1.154,11,2.185,13,1.213,14,0.02,16,3.124,18,3.511,20,2.898,21,3.124,22,0.449,24,1.427,27,2.576,28,0.354,29,0.793,30,2.898,31,3.322,32,1.069,34,1.308,35,1.181,40,0.186,41,0.123,43,1.624,45,1.954,46,0.968,48,2.704,50,1.097,52,0.012,53,0.012,130,0.276,157,1.795,185,1.339,186,0.941,187,1.213,200,2.259,211,0.793,212,3.134,233,1.97,260,3.738,262,2.704,264,5.633,266,2.259,279,2.259,295,2.702,410,3.738,527,2.576,599,3.032,734,3.865,841,2.702,846,2.702,881,3.397,882,3.032,883,5.603,884,4.887,885,3.533,886,3.533,887,3.533,888,4.194,889,4.624,890,3.533,891,3.533,892,4.194,893,4.194,894,4.887,895,4.194,896,6.347,897,3.738,898,3.032,899,3.032,900,3.533,901,2.259,902,2.702,903,3.533,904,3.533,905,3.533,906,3.032,907,3.533,908,3.533]],["title/classes/UserDto.html",[41,0.128,738,2.353]],["body/classes/UserDto.html",[3,0.189,4,0.189,5,0.126,9,0.258,13,1.585,14,0.02,22,0.587,28,0.298,32,1.089,40,0.261,41,0.223,46,2.02,47,1.434,52,0.013,53,0.013,130,0.529,136,2.491,138,2.776,157,1.228,212,1.866,316,1.089,319,1.425,329,2.939,330,1.564,331,3.219,334,2.566,335,1.481,574,2.776,714,2.935,715,2.134,717,4.194,718,2.134,734,2.301,735,5.049,736,2.753,737,3.089,738,3.896,740,3.44,741,4.248,742,3.089,743,4.44,744,3.089,745,4.084,746,2.753,747,3.089,909,3.599,910,3.599,911,3.599,912,3.599,913,3.599,914,3.599,915,2.753,916,3.599,917,3.599,918,3.599]],["title/entities/UserEntity.html",[211,0.826,339,1.599]],["body/entities/UserEntity.html",[3,0.155,4,0.155,5,0.103,7,0.696,9,0.211,13,1.656,14,0.02,22,0.613,28,0.312,40,0.155,41,0.194,47,1.375,52,0.011,53,0.011,130,0.522,136,2.311,138,2.575,140,2.748,142,1.632,149,1.976,157,1.259,159,1.213,186,0.827,201,3.525,211,0.965,223,2.549,233,1.512,319,1.238,330,2.204,337,1.529,339,2.688,340,2.627,345,2.332,356,1.749,359,2.531,363,3.243,365,4.705,374,1.213,452,4.353,488,3.689,537,2.89,539,2.05,569,2.05,573,3.788,574,2.575,588,1.632,602,2.748,719,3.874,725,3.689,743,4.118,745,3.243,852,2.531,854,2.531,919,2.531,920,4.299,921,2.949,922,2.949,923,2.949,924,2.949,925,2.949,926,2.949,927,3.288,928,2.949,929,4.263,930,3.689,931,2.949,932,4.299,933,4.299,934,2.531,935,4.299,936,2.949,937,2.949,938,4.299,939,4.299,940,4.299,941,4.299,942,4.299,943,2.949,944,3.689,945,3.288,946,3.689,947,3.689,948,2.949,949,4.299,950,4.299,951,4.299,952,5.072,953,2.949]],["title/classes/UserLoginDto.html",[41,0.128,711,2.353]],["body/classes/UserLoginDto.html",[3,0.23,4,0.23,5,0.152,7,1.03,9,0.312,13,1.396,14,0.019,22,0.517,28,0.328,32,1.319,40,0.296,41,0.243,46,1.944,47,1.334,52,0.014,53,0.014,130,0.515,138,2.959,157,1.082,224,3.112,316,1.319,319,1.62,329,2.859,330,1.895,331,3.036,334,2.916,335,1.794,574,2.959,709,2.586,710,3.335,711,4.206,714,3.335,715,2.586,716,3.91,717,3.901,718,2.586,915,3.335,954,3.742,955,4.361,956,4.361]],["title/classes/UserRegistrationDto.html",[41,0.128,834,2.353]],["body/classes/UserRegistrationDto.html",[3,0.215,4,0.215,5,0.143,7,0.966,9,0.293,13,1.499,14,0.02,22,0.555,28,0.318,32,1.238,40,0.284,41,0.239,46,1.985,47,1.39,52,0.014,53,0.014,130,0.522,136,2.603,138,2.9,157,1.016,224,2.986,316,1.238,319,1.554,329,2.9,330,1.778,331,3.131,334,2.798,335,1.684,574,2.9,714,3.2,715,2.427,717,4.064,718,2.427,740,3.751,832,2.616,833,3.13,834,4.105,836,4.128,915,3.13,954,3.512,957,4.093,958,4.093,959,4.093,960,4.093]],["title/entities/UserRoles.html",[339,1.599,537,1.908]],["body/entities/UserRoles.html",[3,0.199,4,0.199,5,0.132,7,0.89,8,3.909,9,0.27,13,1.439,14,0.019,22,0.533,28,0.305,34,1.396,35,1.261,40,0.199,41,0.202,52,0.013,53,0.013,130,0.486,142,2.086,157,1.699,211,1.395,228,3.03,233,1.797,319,1.471,339,2.909,345,2.665,347,3.237,351,3.237,356,3.684,363,3.706,365,4.453,373,4.386,374,1.552,537,2.65,565,4.386,573,3.267,587,5.573,602,4.377,603,2.885,607,4.386,770,4.386,778,4.752,901,2.411,927,3.909,934,3.237,944,4.386,945,3.909,946,4.386,947,4.386,961,5.333,962,3.237,963,3.772,964,6.214,965,3.772,966,5.111,967,5.111,968,3.909,969,5.111,970,5.111,971,5.111,972,3.772]],["title/controllers/UsersController.html",[0,1.436,973,2.558]],["body/controllers/UsersController.html",[0,1.605,2,0.818,3,0.11,4,0.11,5,0.073,7,1.684,9,0.15,10,0.783,11,2.51,13,1.161,14,0.02,16,2.99,18,3.431,19,2.306,20,3.488,21,2.99,22,0.43,24,1.279,27,2.852,28,0.339,29,0.471,30,1.968,31,3.752,32,0.635,34,0.777,35,0.702,38,2.44,39,1.459,40,0.11,41,0.073,42,1.442,43,2.609,44,1.244,46,0.909,47,1.15,48,3.431,49,2.121,50,1.05,52,0.008,53,0.008,130,0.366,136,2.546,140,2.121,157,1.777,159,0.863,185,1.282,186,0.9,187,1.161,191,1.618,200,1.342,211,0.471,212,2.809,215,3.577,216,2.306,217,3.577,218,2.538,219,3.577,220,3.577,222,4.014,224,2.588,228,3.021,262,2.277,263,2.538,265,1.605,266,1.342,269,1.342,270,1.605,271,1.459,272,1.161,273,1.459,277,1.605,278,0.965,292,2.134,298,1.523,306,1.605,307,1.605,497,1.459,525,2.819,527,2.151,554,3.148,564,2.306,569,3.541,574,1.442,646,1.72,682,2.848,709,3.021,716,4.209,743,2.306,745,2.121,781,1.801,791,1.801,792,2.848,832,3.257,836,3.897,840,4.649,841,2.538,846,2.538,889,2.538,892,2.848,897,2.538,901,1.342,902,1.605,973,2.306,974,1.801,975,4.116,976,4.116,977,2.099,978,2.099,979,2.099,980,2.099,981,3.318,982,3.318,983,2.848,984,2.848,985,2.099,986,2.099,987,3.318,988,2.538,989,2.099,990,2.099,991,2.099,992,2.848,993,2.099,994,2.099,995,4.678,996,2.099,997,2.848,998,1.801,999,2.099,1000,2.099,1001,1.801,1002,1.801,1003,2.099,1004,2.099,1005,2.099,1006,3.318,1007,3.318,1008,3.318,1009,3.318,1010,3.318,1011,2.099,1012,2.099,1013,2.099,1014,1.801,1015,2.099,1016,2.099]],["title/modules/UsersModule.html",[54,1.294,66,2.353]],["body/modules/UsersModule.html",[2,2.115,3,0.217,4,0.217,5,0.144,14,0.02,28,0.387,29,0.925,40,0.217,41,0.144,52,0.014,53,0.014,54,1.907,56,1.895,57,2.356,62,4.072,66,4.638,67,2.811,68,2.137,69,2.01,71,2.644,72,3.215,79,2.444,81,1.791,93,3.537,157,1.023,211,0.925,272,3,273,2.865,386,3.349,389,3.152,527,3.158,537,2.811,539,2.865,543,3.152,656,3.769,668,2.865,881,4.212,901,2.635,902,3.152,973,4.212,1017,4.122,1018,4.122,1019,4.122,1020,4.122,1021,5.423,1022,4.122,1023,4.122,1024,4.122,1025,4.122,1026,4.122,1027,4.122]],["title/injectables/UsersService.html",[178,1.009,527,1.692]],["body/injectables/UsersService.html",[3,0.097,4,0.097,5,0.064,7,0.705,9,0.132,10,0.705,11,2.423,14,0.02,16,1.176,21,1.176,22,0.515,24,1.513,26,1.407,27,3.148,28,0.321,29,0.413,34,0.681,35,0.615,40,0.097,41,0.064,42,1.885,43,2.801,44,1.771,46,0.818,47,1.331,49,1.909,50,1.208,52,0.008,53,0.008,81,0.799,130,0.438,136,2.587,138,2.647,140,3.266,157,1.809,159,1.962,178,0.818,179,0.846,185,1.536,186,1.115,187,1.391,191,1.456,211,0.413,212,3.087,216,3.015,228,3.191,233,1.892,260,3.318,292,2.473,298,1.765,345,1.733,356,1.091,374,0.757,404,4.027,405,2.883,410,1.407,428,1.279,431,1.407,447,1.407,451,1.579,497,3.015,499,1.407,509,1.279,512,1.579,527,1.373,537,1.954,539,1.279,569,2.076,573,2.41,574,2.072,592,1.407,602,1.176,692,2.563,709,1.771,711,2.773,716,1.279,730,2.563,731,2.563,738,1.176,745,1.176,806,1.579,834,3.049,872,2.563,880,3.235,888,2.563,889,4.751,897,3.907,898,1.579,899,1.579,901,1.176,906,2.563,927,2.284,929,1.407,930,1.579,945,1.407,968,2.284,983,3.723,984,2.563,988,2.284,997,3.235,998,1.579,1001,1.579,1002,1.579,1028,1.579,1029,2.987,1030,2.987,1031,3.769,1032,3.769,1033,1.84,1034,2.987,1035,1.84,1036,2.987,1037,2.987,1038,1.84,1039,2.987,1040,2.987,1041,4.338,1042,1.84,1043,2.987,1044,1.84,1045,5.109,1046,2.987,1047,1.84,1048,2.987,1049,1.84,1050,2.987,1051,1.84,1052,1.84,1053,2.987,1054,2.987,1055,2.987,1056,1.84,1057,1.84,1058,1.84,1059,1.84,1060,1.84,1061,1.84,1062,1.84,1063,1.84,1064,1.84,1065,1.84,1066,1.84,1067,1.84,1068,1.84,1069,1.84,1070,1.84,1071,3.235,1072,1.84,1073,2.563,1074,1.579,1075,1.84,1076,1.84,1077,1.84,1078,1.84,1079,1.84,1080,1.84,1081,1.579,1082,1.84,1083,1.84,1084,1.84,1085,1.579,1086,1.84,1087,1.84,1088,1.84,1089,2.563,1090,1.84,1091,1.84,1092,1.84,1093,1.84,1094,2.987,1095,1.84,1096,1.84,1097,1.84,1098,1.84,1099,1.84]],["title/coverage.html",[1100,4.314]],["body/coverage.html",[0,2.34,1,1.883,5,0.095,6,2.325,14,0.019,36,1.606,38,1.606,41,0.247,52,0.01,53,0.01,71,1.321,130,0.212,157,0.672,159,1.115,178,1.789,180,2.325,197,2.072,198,1.883,199,2.325,211,0.608,213,1.606,248,1.732,252,1.732,269,1.732,272,1.499,274,1.405,275,1.405,276,1.321,279,1.732,282,1.606,297,1.606,317,3.088,318,3.088,339,2.486,340,1.115,341,2.325,361,5.726,377,2.325,378,2.325,386,1.321,387,1.405,390,1.499,392,1.606,398,2.325,515,2.325,516,2.325,525,1.499,526,1.606,527,1.246,528,2.072,537,1.405,553,2.325,576,2.072,627,1.883,628,2.325,629,2.325,633,3.165,634,3.165,636,1.405,640,1.405,646,1.405,649,2.325,656,1.883,657,2.325,658,2.325,659,1.883,670,2.072,680,2.325,709,1.606,710,3.088,711,1.732,719,1.883,720,2.325,734,1.732,735,3.088,736,3.088,738,1.732,750,2.325,757,2.072,765,2.072,768,1.883,769,2.325,787,1.606,804,2.325,832,1.732,833,3.088,834,1.732,837,1.883,838,2.325,850,2.325,861,2.325,881,1.883,882,2.325,919,2.325,961,2.325,962,2.325,973,1.883,974,2.325,1028,2.325,1100,2.325,1101,2.709,1102,2.709,1103,2.325,1104,6.027,1105,2.325,1106,6.966,1107,7.073,1108,2.709,1109,5.35,1110,4.038,1111,2.709,1112,2.709,1113,2.709,1114,4.038,1115,2.709,1116,6.744,1117,3.465,1118,2.325,1119,4.038,1120,2.709,1121,3.465,1122,3.465,1123,3.465,1124,4.827,1125,2.325,1126,3.088,1127,2.325,1128,4.376,1129,2.325,1130,2.325,1131,6.215,1132,2.325,1133,2.325,1134,2.325,1135,2.709,1136,2.709,1137,2.709,1138,2.709,1139,2.709,1140,2.709,1141,2.325,1142,2.709,1143,2.709,1144,2.709,1145,2.325]],["title/dependencies.html",[57,1.924,1146,2.637]],["body/dependencies.html",[5,0.141,14,0.02,29,0.904,32,1.218,41,0.186,52,0.014,53,0.014,57,1.749,75,2.574,77,3.455,78,3.079,81,1.749,82,3.455,84,2.574,85,3.83,89,3.455,90,3.455,330,1.749,335,1.656,374,1.656,379,3.079,429,3.455,534,3.079,536,2.798,546,2.574,585,3.455,668,2.798,695,3.455,929,3.079,1147,4.026,1148,7.069,1149,4.026,1150,5.339,1151,4.026,1152,4.026,1153,4.026,1154,4.026,1155,4.026,1156,4.026,1157,4.026,1158,4.026,1159,4.026,1160,5.339,1161,4.582,1162,4.026,1163,4.026,1164,4.026,1165,4.026,1166,4.026,1167,4.026,1168,4.026,1169,4.026,1170,4.026,1171,6.38,1172,4.026,1173,4.026,1174,3.455,1175,4.026,1176,4.026,1177,4.026,1178,4.026,1179,4.026,1180,4.026,1181,4.026,1182,4.026,1183,4.026,1184,4.026,1185,4.026,1186,4.026,1187,4.026,1188,4.026,1189,4.026,1190,4.026,1191,4.026,1192,4.026,1193,4.026,1194,4.026,1195,4.026,1196,4.026,1197,4.026,1198,4.026,1199,4.026,1200,4.026,1201,4.026,1202,4.026,1203,4.026]],["title/miscellaneous/functions.html",[1204,1.822,1205,3.8]],["body/miscellaneous/functions.html",[9,0.416,14,0.017,52,0.017,53,0.017,1128,4.443,1129,6.064,1204,3.444,1205,4.985,1206,4.985]],["title/index.html",[9,0.22,1207,3.073,1208,2.637]],["body/index.html",[5,0.134,7,0.721,8,3.699,14,0.018,35,1.283,47,0.383,48,1.046,52,0.008,53,0.008,54,1.701,57,1.668,69,2.358,84,2.817,85,1.951,101,1.622,103,2.936,105,1.622,107,1.622,109,1.622,111,1.622,113,1.622,115,1.622,117,1.622,119,1.622,124,1.622,128,3.595,130,0.239,136,0.737,138,1.326,140,4.001,147,3.295,150,2.936,159,0.778,181,3.295,186,0.364,187,0.469,194,4.268,197,2.334,216,2.121,336,2.817,342,1.121,356,2.867,374,2.33,562,1.622,563,2.334,564,1.314,566,1.622,567,2.619,568,1.622,572,2.619,592,3.699,605,1.622,616,1.622,690,2.619,691,1.446,706,3.295,746,1.446,758,1.622,777,1.446,815,3.782,820,2.619,895,1.622,968,2.936,992,1.622,1014,3.782,1071,4.15,1073,1.622,1074,1.622,1081,1.622,1085,1.622,1089,1.622,1104,2.619,1126,3.699,1145,1.622,1174,2.619,1208,1.622,1209,3.052,1210,1.89,1211,3.052,1212,3.839,1213,1.89,1214,1.89,1215,1.89,1216,3.052,1217,1.89,1218,3.052,1219,1.89,1220,1.89,1221,3.839,1222,1.89,1223,3.052,1224,4.836,1225,5.172,1226,4.407,1227,5.442,1228,3.052,1229,3.839,1230,3.052,1231,3.052,1232,3.839,1233,1.89,1234,5.442,1235,1.89,1236,3.052,1237,1.89,1238,1.89,1239,5.172,1240,1.89,1241,1.89,1242,1.89,1243,1.89,1244,4.407,1245,3.052,1246,6.453,1247,4.407,1248,4.407,1249,1.622,1250,3.052,1251,1.89,1252,1.89,1253,1.89,1254,5.442,1255,3.052,1256,3.052,1257,3.052,1258,3.839,1259,3.052,1260,1.89,1261,1.89,1262,1.89,1263,1.89,1264,1.89,1265,6.007,1266,4.407,1267,1.89,1268,1.89,1269,1.89,1270,1.89,1271,3.052,1272,1.89,1273,1.89,1274,1.89,1275,1.89,1276,1.89,1277,3.052,1278,1.89,1279,1.89,1280,3.839,1281,5.664,1282,1.89,1283,4.407,1284,1.89,1285,1.89,1286,3.839,1287,1.89,1288,1.89,1289,1.89,1290,1.89,1291,3.052,1292,1.89,1293,5.664,1294,1.89,1295,1.89,1296,1.89,1297,1.89,1298,1.89,1299,3.052,1300,1.89,1301,1.89,1302,1.89,1303,1.89,1304,1.89,1305,1.89,1306,1.89,1307,1.89,1308,4.407,1309,1.89,1310,1.89,1311,3.052,1312,1.89,1313,1.89,1314,1.89,1315,1.89,1316,1.89,1317,1.89,1318,1.89,1319,1.89,1320,1.89,1321,3.052,1322,1.89,1323,1.89,1324,1.89,1325,1.89,1326,3.052,1327,1.89,1328,1.89,1329,1.89,1330,1.89,1331,3.052,1332,3.052,1333,1.89,1334,1.89,1335,1.89,1336,1.89,1337,1.622,1338,1.89,1339,1.89,1340,3.052,1341,1.89,1342,1.89,1343,1.89,1344,3.052,1345,1.89,1346,1.89,1347,1.89,1348,3.839,1349,3.839,1350,1.89,1351,1.89,1352,1.89,1353,3.052,1354,3.052,1355,1.89,1356,1.89,1357,1.89,1358,1.89,1359,3.052,1360,1.89,1361,1.89,1362,1.89,1363,1.89,1364,1.89,1365,3.052,1366,1.89,1367,1.89,1368,1.89,1369,1.89,1370,1.89,1371,3.052,1372,1.89,1373,3.052,1374,1.89,1375,1.89,1376,1.89,1377,1.89,1378,1.89,1379,1.89,1380,1.89,1381,3.052,1382,4.407,1383,1.89,1384,1.89,1385,1.89,1386,3.839,1387,3.839,1388,3.052,1389,1.89,1390,1.89,1391,1.89,1392,1.89,1393,1.89,1394,1.89,1395,1.89,1396,1.89,1397,1.89,1398,1.89,1399,1.89,1400,1.89,1401,1.89,1402,1.89,1403,1.89,1404,1.89,1405,3.839,1406,3.052,1407,1.89,1408,3.839,1409,3.052,1410,3.052,1411,3.052,1412,3.052,1413,1.89,1414,3.052,1415,3.052,1416,3.052,1417,3.052,1418,1.89,1419,1.89,1420,1.89,1421,2.619,1422,3.052,1423,1.89,1424,1.89,1425,1.89,1426,1.89,1427,1.89,1428,1.89,1429,1.89,1430,1.89,1431,1.89,1432,1.89,1433,1.89,1434,1.89,1435,1.89,1436,1.89,1437,1.89,1438,1.89,1439,1.89,1440,1.89,1441,1.89,1442,1.89,1443,1.89,1444,1.89,1445,1.89,1446,1.89,1447,1.89,1448,1.89,1449,1.89,1450,1.89,1451,1.622,1452,1.89,1453,1.89,1454,1.89,1455,1.89,1456,1.89,1457,1.89,1458,1.89,1459,1.622,1460,1.622,1461,1.89]],["title/modules.html",[56,2.311]],["body/modules.html",[14,0.016,52,0.016,53,0.016,55,3.691,56,2.441,61,3.395,62,3.148,63,3.395,64,3.395,65,3.395,66,3.395,1161,6.354,1451,6.354,1462,7.404,1463,7.404]],["title/overview.html",[1464,4.314]],["body/overview.html",[2,1.497,14,0.019,36,3.468,52,0.013,53,0.013,55,5.164,56,1.765,57,2.247,58,3.294,59,3.294,60,3.294,61,4.53,62,4.315,63,4.303,64,4.397,65,4.177,66,4.53,67,2.681,68,1.99,69,1.872,142,2.123,179,1.765,282,3.468,316,1.161,384,3.294,385,3.294,386,3.492,387,3.245,437,3.294,509,3.594,522,3.294,523,3.294,524,3.294,525,3.805,526,4.078,527,2.878,620,3.294,622,3.294,640,1.99,659,2.668,787,3.468,799,3.294,800,3.294,1249,3.294,1464,3.294,1465,3.839,1466,3.839,1467,3.839]],["title/properties.html",[319,1.275,1146,2.637]],["body/properties.html",[14,0.019,52,0.017,53,0.017,319,1.656,342,3.41,1459,4.936,1460,4.936,1468,4.936,1469,5.751,1470,5.751,1471,5.751]],["title/miscellaneous/typealiases.html",[1204,1.822,1472,4.428]],["body/miscellaneous/typealiases.html",[9,0.39,14,0.018,52,0.016,53,0.016,130,0.426,576,4.163,580,2.822,584,4.672,590,5.539,597,3.346,633,3.011,634,3.805,636,2.822,642,4.079,643,3.346,765,4.163,1204,3.228,1473,5.444,1474,6.454,1475,6.454]],["title/miscellaneous/variables.html",[1204,1.822,1476,3.8]],["body/miscellaneous/variables.html",[7,1.102,9,0.237,14,0.02,18,1.831,38,2.769,47,1.304,50,1.048,52,0.012,53,0.012,71,2.277,103,3.571,128,2.301,130,0.55,149,2.147,157,1.458,159,1.362,186,0.637,194,4.469,196,2.841,211,0.743,239,1.963,269,2.985,278,2.147,279,2.985,298,1.225,337,1.716,345,2.487,356,4.299,509,4.084,525,1.831,526,1.963,528,2.532,532,2.532,537,2.421,573,2.116,574,1.438,602,2.985,603,3.571,643,1.716,665,2.532,670,3.571,675,2.841,691,3.571,726,6.222,757,3.571,893,2.841,988,2.532,1103,2.841,1105,4.008,1117,2.841,1118,4.008,1121,2.841,1122,2.841,1123,4.643,1125,2.841,1126,4.494,1127,2.841,1128,2.532,1130,4.008,1132,4.008,1133,4.008,1134,4.008,1141,2.841,1204,1.963,1206,5.043,1337,2.841,1421,2.841,1468,2.841,1476,2.841,1477,4.67,1478,3.31,1479,3.31,1480,4.67,1481,3.31,1482,3.31,1483,4.67,1484,3.31,1485,3.31,1486,3.31,1487,3.31,1488,3.31,1489,3.31,1490,3.31,1491,3.31,1492,3.31,1493,3.31,1494,3.31,1495,4.67,1496,3.31,1497,3.31,1498,5.411,1499,3.31,1500,3.31,1501,3.31]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":361,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":438,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":1469,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1114,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":509,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.6.5",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1189,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1136,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":1249,"title":{},"body":{"index.html":{},"overview.html":{}}}],["17.6.0",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1198,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1188,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1140,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":215,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["20m",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":1327,"title":{},"body":{"index.html":{}}}],["255",{"_index":933,"title":{},"body":{"entities/UserEntity.html":{}}}],["3.0.0",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["3/9",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1396,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":1190,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1328,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":1086,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":1466,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1142,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":437,"title":{},"body":{"injectables/ArticleService.html":{},"overview.html":{}}}],["6.0.0",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1465,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1137,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1467,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1143,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":580,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":647,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["ability.can(useractionsenum.update",{"_index":645,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["abilitybuilder",{"_index":581,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":582,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1435,"title":{},"body":{"index.html":{}}}],["access",{"_index":607,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":1301,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1352,"title":{},"body":{"index.html":{}}}],["account",{"_index":1068,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1434,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1342,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1350,"title":{},"body":{"index.html":{}}}],["addarticletofavorites",{"_index":399,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addarticletofavorites(slug",{"_index":409,"title":{},"body":{"injectables/ArticleService.html":{}}}],["again",{"_index":1096,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":1332,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1473,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":1325,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1221,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1471,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1361,"title":{},"body":{"index.html":{}}}],["api",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":329,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isalpha()@isnotempty",{"_index":630,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isalphanumeric()@isnotempty",{"_index":917,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":911,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":322,"title":{},"body":{"classes/ArticleDto.html":{}}}],["apiproperty()@isnotempty()@isalphanumeric",{"_index":959,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":954,"title":{},"body":{"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@isfqdn",{"_index":913,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@maxlength(255",{"_index":909,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":915,"title":{},"body":{"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@type(undefined)@validatenested",{"_index":712,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({required",{"_index":325,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1427,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":266,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apitags('articles",{"_index":290,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apitags('profiles",{"_index":789,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('tags",{"_index":844,"title":{},"body":{"controllers/TagController.html":{}}}],["apitags('user",{"_index":903,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1450,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":1021,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":597,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1218,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1453,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1474,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":1206,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1475,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../user.decorator.ts",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":1103,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":180,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":184,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/article/article.controller.ts",{"_index":199,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["apps/api/src/article/article.controller.ts:113",{"_index":261,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:139",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:155",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:178",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:45",{"_index":249,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:59",{"_index":255,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:77",{"_index":221,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:99",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.entity.ts",{"_index":341,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/article.entity.ts:14",{"_index":364,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:17",{"_index":366,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:20",{"_index":370,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:23",{"_index":360,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:26",{"_index":353,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:29",{"_index":358,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:32",{"_index":371,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:35",{"_index":369,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:38",{"_index":362,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:46",{"_index":350,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.module.ts",{"_index":388,"title":{},"body":{"modules/ArticleModule.html":{}}}],["apps/api/src/article/article.service.ts",{"_index":398,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["apps/api/src/article/article.service.ts:109",{"_index":418,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:113",{"_index":421,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:145",{"_index":414,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:165",{"_index":425,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:185",{"_index":411,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:20",{"_index":407,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:210",{"_index":416,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:234",{"_index":413,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:31",{"_index":423,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:39",{"_index":419,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/dto/article",{"_index":377,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/articles",{"_index":515,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/create",{"_index":317,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.module.ts:43",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":1117,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:16",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:35",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":710,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:20",{"_index":955,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:28",{"_index":956,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:35",{"_index":713,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":833,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:21",{"_index":957,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:29",{"_index":960,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:37",{"_index":958,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:44",{"_index":835,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":657,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":680,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":684,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":687,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":1121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":576,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:22",{"_index":579,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":623,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":750,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":753,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":755,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":752,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":633,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":1125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":1127,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":1128,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/profile/follow.entity.ts",{"_index":649,"title":{},"body":{"entities/FollowEntity.html":{},"coverage.html":{}}}],["apps/api/src/profile/follow.entity.ts:12",{"_index":652,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:6",{"_index":653,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:9",{"_index":651,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/profile.controller.ts",{"_index":769,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.controller.ts:33",{"_index":782,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:56",{"_index":779,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:79",{"_index":786,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.module.ts",{"_index":801,"title":{},"body":{"modules/ProfileModule.html":{}}}],["apps/api/src/profile/profile.service.ts",{"_index":804,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.service.ts:11",{"_index":807,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:19",{"_index":811,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:41",{"_index":810,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:71",{"_index":812,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:97",{"_index":809,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/tag/dto/create",{"_index":628,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts",{"_index":838,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts:17",{"_index":842,"title":{},"body":{"controllers/TagController.html":{}}}],["apps/api/src/tag/tag.entity.ts",{"_index":850,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.entity.ts:12",{"_index":853,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.entity.ts:9",{"_index":851,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.module.ts",{"_index":857,"title":{},"body":{"modules/TagModule.html":{}}}],["apps/api/src/tag/tag.service.ts",{"_index":861,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.service.ts:11",{"_index":864,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:18",{"_index":868,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:22",{"_index":867,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/users/dto/patch",{"_index":735,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":720,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":728,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":723,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":961,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts",{"_index":882,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts:21",{"_index":891,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.controller.ts:33",{"_index":887,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.decorator.ts",{"_index":1141,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":919,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:26",{"_index":926,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:32",{"_index":948,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:38",{"_index":923,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:44",{"_index":922,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:50",{"_index":928,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:56",{"_index":943,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:68",{"_index":937,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:71",{"_index":921,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:75",{"_index":925,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:120",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:51",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:75",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:98",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":1020,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:110",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:132",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:148",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:42",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:51",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:61",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:78",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":1257,"title":{},"body":{"index.html":{}}}],["array",{"_index":368,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["article.author",{"_index":488,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["article.author.id",{"_index":501,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.controller",{"_index":395,"title":{},"body":{"modules/ArticleModule.html":{}}}],["article.dto",{"_index":289,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["article.dto.ts",{"_index":318,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["article.dto.ts:13",{"_index":328,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:17",{"_index":324,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:21",{"_index":323,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:28",{"_index":327,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:35",{"_index":626,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["article.entity",{"_index":396,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["article.favoritescount",{"_index":511,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":508,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.service",{"_index":283,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["article.slug",{"_index":486,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":485,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist.map((name",{"_index":494,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article/article.entity",{"_index":588,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{}}}],["article/article.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["articlecontroller",{"_index":198,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articledto",{"_index":297,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["articleentity",{"_index":340,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["articlefeedqueryparams",{"_index":252,"title":{"classes/ArticleFeedQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articleindex",{"_index":513,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":506,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":507,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":61,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":408,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articles",{"_index":201,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["articles.map((article",{"_index":472,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":460,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleservice",{"_index":282,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesqueryparams",{"_index":248,"title":{"classes/ArticlesQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["articleswithfavorited",{"_index":471,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":1023,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":658,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":663,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":666,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/dto/login.dto",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/dto/register.dto",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":1022,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1094,"title":{},"body":{"injectables/UsersService.html":{}}}],["authenticated",{"_index":894,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticating",{"_index":1331,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authentication/authorization",{"_index":1240,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":669,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":673,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":62,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":342,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"index.html":{},"properties.html":{}}}],["author.favorites.map((el",{"_index":454,"title":{},"body":{"injectables/ArticleService.html":{}}}],["author.id",{"_index":449,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authservice",{"_index":525,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1306,"title":{},"body":{"index.html":{}}}],["await",{"_index":292,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1238,"title":{},"body":{"index.html":{}}}],["bad",{"_index":217,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":689,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":940,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":372,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["behind",{"_index":1316,"title":{},"body":{"index.html":{}}}],["below",{"_index":1274,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1347,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":966,"title":{},"body":{"entities/UserRoles.html":{}}}],["bio",{"_index":743,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["body",{"_index":262,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["body('article",{"_index":309,"title":{},"body":{"controllers/ArticleController.html":{}}}],["boilerplate",{"_index":1234,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":641,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{}}}],["boolean(follow",{"_index":821,"title":{},"body":{"injectables/ProfileService.html":{}}}],["bootstrap",{"_index":1129,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1244,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1353,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1443,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1255,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1463,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1161,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":600,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["buildarticleresponse",{"_index":400,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":412,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":1213,"title":{},"body":{"index.html":{}}}],["buildprofileresponse",{"_index":805,"title":{},"body":{"injectables/ProfileService.html":{}}}],["buildprofileresponse(profile",{"_index":808,"title":{},"body":{"injectables/ProfileService.html":{}}}],["built",{"_index":1300,"title":{},"body":{"index.html":{}}}],["can't",{"_index":823,"title":{},"body":{"injectables/ProfileService.html":{}}}],["can(useractionsenum.delete",{"_index":613,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.manage",{"_index":604,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":609,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":612,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":660,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":664,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1383,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":971,"title":{},"body":{"entities/UserRoles.html":{}}}],["case",{"_index":875,"title":{},"body":{"injectables/TagService.html":{}}}],["casl",{"_index":589,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":624,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":585,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":389,"title":{},"body":{"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":270,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":273,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":277,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["caslfactory",{"_index":386,"title":{"injectables/CaslFactory.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":63,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":874,"title":{},"body":{"injectables/TagService.html":{}}}],["cert.pem",{"_index":1394,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1382,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1385,"title":{},"body":{"index.html":{}}}],["change",{"_index":1362,"title":{},"body":{"index.html":{}}}],["check",{"_index":758,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":757,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":269,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":307,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["checks",{"_index":688,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":1256,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1355,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":1226,"title":{},"body":{"index.html":{}}}],["class",{"_index":41,"title":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":316,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"overview.html":{}}}],["clone",{"_index":1277,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":384,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":385,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":522,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":523,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":524,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":620,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":622,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":621,"title":{},"body":{"modules/CaslModule.html":{}}}],["cluster_profilemodule",{"_index":799,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":800,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":855,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_tagmodule_providers",{"_index":856,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":1017,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1018,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1019,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1420,"title":{},"body":{"index.html":{}}}],["column",{"_index":365,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["column('simple",{"_index":367,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":359,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":931,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":351,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["column({unique",{"_index":852,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["comes",{"_index":1239,"title":{},"body":{"index.html":{}}}],["coming",{"_index":598,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":1286,"title":{},"body":{"index.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["compose",{"_index":1271,"title":{},"body":{"index.html":{}}}],["config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":551,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":1225,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1441,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1296,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1330,"title":{},"body":{"index.html":{}}}],["connections",{"_index":1341,"title":{},"body":{"index.html":{}}}],["console.log('follow",{"_index":819,"title":{},"body":{"injectables/ProfileService.html":{}}}],["console.log(rest",{"_index":707,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["const",{"_index":298,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(articlerepository",{"_index":403,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(configservice",{"_index":683,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":661,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(tagrepository",{"_index":863,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":806,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["container",{"_index":1311,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1222,"title":{},"body":{"index.html":{}}}],["context",{"_index":667,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":678,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":677,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":761,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":1262,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":291,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('profiles",{"_index":790,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('tags",{"_index":845,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('user",{"_index":904,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('users",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":1363,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1100,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1284,"title":{},"body":{"index.html":{}}}],["create",{"_index":216,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["createarticle",{"_index":202,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(user",{"_index":210,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticledto",{"_index":213,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["created",{"_index":968,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createdarticle",{"_index":491,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createdat",{"_index":343,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["createforuser",{"_index":577,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":578,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createparamdecorator",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('articles",{"_index":441,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createquerybuilder('users",{"_index":1060,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtag",{"_index":862,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(tag",{"_index":866,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto",{"_index":627,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["createtoken",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":489,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{}}}],["crud",{"_index":1241,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":730,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":731,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":893,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":357,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["currently",{"_index":1070,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuser",{"_index":467,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuser.favorites.map((favorite",{"_index":468,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":1085,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":889,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1437,"title":{},"body":{"index.html":{}}}],["date",{"_index":354,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["date%.log",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1395,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1429,"title":{},"body":{"index.html":{}}}],["default",{"_index":356,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':slug",{"_index":311,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite",{"_index":314,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":234,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username/follow",{"_index":797,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":784,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletearticle",{"_index":203,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites",{"_index":204,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":415,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlepolicyhandler",{"_index":274,"title":{"classes/DeleteArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["deletearticlepolicyhandler())@apiresponse({status",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deleted",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":1098,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":646,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1409,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1315,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1259,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1224,"title":{},"body":{"index.html":{}}}],["desc",{"_index":459,"title":{},"body":{"injectables/ArticleService.html":{}}}],["describe",{"_index":1425,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":1269,"title":{},"body":{"index.html":{}}}],["detached",{"_index":1312,"title":{},"body":{"index.html":{}}}],["details",{"_index":616,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":615,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":617,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":1320,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1458,"title":{},"body":{"index.html":{}}}],["development",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":1340,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1309,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1246,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1408,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1413,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1419,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":1280,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1267,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":1251,"title":{},"body":{"index.html":{}}}],["dto",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["dto/article",{"_index":284,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/articles",{"_index":286,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/create",{"_index":288,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["dto/patch",{"_index":898,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":876,"title":{},"body":{"injectables/TagService.html":{}}}],["dynamic",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":338,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{}}}],["eager",{"_index":349,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["edit",{"_index":260,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["edit(userid",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser",{"_index":883,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":885,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1214,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":455,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1447,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1399,"title":{},"body":{"index.html":{}}}],["employs",{"_index":938,"title":{},"body":{"entities/UserEntity.html":{}}}],["empty",{"_index":1334,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1375,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":1323,"title":{},"body":{"index.html":{}}}],["end",{"_index":1415,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1337,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":339,"title":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":964,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":1283,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1285,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1126,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":824,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagService.html":{}}}],["everything",{"_index":608,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["example",{"_index":746,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["exclude",{"_index":949,"title":{},"body":{"entities/UserEntity.html":{}}}],["exec",{"_index":1404,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":751,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":754,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":1308,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":665,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":499,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1288,"title":{},"body":{"index.html":{}}}],["exists",{"_index":880,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":705,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":552,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1339,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exportable",{"_index":814,"title":{},"body":{"injectables/ProfileService.html":{}}}],["exports",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":1294,"title":{},"body":{"index.html":{}}}],["express",{"_index":1349,"title":{},"body":{"index.html":{}}}],["extends",{"_index":672,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1440,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":694,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderwithscheme('token",{"_index":698,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":583,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":337,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":936,"title":{},"body":{"entities/UserEntity.html":{}}}],["false})@isoptional()@isstring",{"_index":381,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring({each",{"_index":326,"title":{},"body":{"classes/ArticleDto.html":{}}}],["fastify",{"_index":1174,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["favorite.id",{"_index":469,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":473,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{}}}],["favoriteids",{"_index":466,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":474,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":452,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["favoritescount",{"_index":344,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["favourite",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle",{"_index":205,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle(currentuserid",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feat",{"_index":1445,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1380,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1369,"title":{},"body":{"index.html":{}}}],["features",{"_index":1242,"title":{},"body":{"index.html":{}}}],["feed",{"_index":254,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feed.dto",{"_index":285,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["feed.dto.ts",{"_index":378,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["feed.dto.ts:10",{"_index":382,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["feed.dto.ts:17",{"_index":383,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["fetch",{"_index":840,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":717,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["fields",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1416,"title":{},"body":{"index.html":{}}}],["findbyslug",{"_index":401,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":417,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fine",{"_index":877,"title":{},"body":{"injectables/TagService.html":{}}}],["folder",{"_index":1386,"title":{},"body":{"index.html":{}}}],["follow",{"_index":777,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["follow.entity",{"_index":802,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["follow.followingid",{"_index":482,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followentity",{"_index":390,"title":{"entities/FollowEntity.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["follower",{"_index":822,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followerid",{"_index":478,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["following",{"_index":820,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["followingid",{"_index":650,"title":{},"body":{"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["followinguserids",{"_index":480,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followprofile",{"_index":771,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followprofile(currentuserid",{"_index":774,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followrepository",{"_index":406,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["follows",{"_index":476,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{}}}],["follows.length",{"_index":479,"title":{},"body":{"injectables/ArticleService.html":{}}}],["follows.map((follow",{"_index":481,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followtocreate",{"_index":826,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followerid",{"_index":827,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followingid",{"_index":828,"title":{},"body":{"injectables/ProfileService.html":{}}}],["format",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["forroot",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":1212,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":722,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1414,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1454,"title":{},"body":{"index.html":{}}}],["function",{"_index":765,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1205,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1439,"title":{},"body":{"index.html":{}}}],["generate",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1387,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":302,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug')@apiresponse({status",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":791,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":781,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get('feed",{"_index":294,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('feed')@apiresponse({status",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(id",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarticle",{"_index":206,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(@param('slug",{"_index":303,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(slug",{"_index":244,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":207,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticles(query",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getbyusername",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["getfeed",{"_index":208,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getfeed(currentuserid",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getone",{"_index":1066,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofile",{"_index":772,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(currentuserid",{"_index":780,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getrootmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getslug",{"_index":402,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":422,"title":{},"body":{"injectables/ArticleService.html":{}}}],["gettags",{"_index":839,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getting",{"_index":1207,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":884,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@request",{"_index":905,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(req",{"_index":890,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemailandpass",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemailandpass(email",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1278,"title":{},"body":{"index.html":{}}}],["github",{"_index":1406,"title":{},"body":{"index.html":{}}}],["given",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":724,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":929,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":659,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":749,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1376,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1378,"title":{},"body":{"index.html":{}}}],["handle",{"_index":637,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handle(ability",{"_index":638,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handler",{"_index":756,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":766,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":767,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":278,"title":{},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":634,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:18",{"_index":748,"title":{},"body":{"classes/PatchUserPolicyHandler.html":{}}}],["handlers.ts:24",{"_index":648,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:30",{"_index":733,"title":{},"body":{"classes/PatchArticlePolicyHandler.html":{}}}],["handlers.ts:35",{"_index":639,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{}}}],["handlers.ts:8",{"_index":655,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":725,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{}}}],["hashed",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":1219,"title":{},"body":{"index.html":{}}}],["host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1417,"title":{},"body":{"index.html":{}}}],["http/2",{"_index":1373,"title":{},"body":{"index.html":{}}}],["http2",{"_index":1228,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":1295,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1302,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":1314,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":426,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpexception('article",{"_index":498,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('profile",{"_index":816,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpexception('you",{"_index":502,"title":{},"body":{"injectables/ArticleService.html":{}}}],["https",{"_index":1081,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":614,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":1279,"title":{},"body":{"index.html":{}}}],["https://gravatar.com/avatar/123",{"_index":747,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["https://typeorm.io",{"_index":1367,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":427,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.bad_request",{"_index":825,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpstatus.forbidden",{"_index":503,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":500,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["iarticleresponsebody",{"_index":267,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iarticlesresponsebody",{"_index":268,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iat",{"_index":704,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":345,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"entities/FollowEntity.html":{},"injectables/JwtStrategy.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":453,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":456,"title":{},"body":{"injectables/ArticleService.html":{}}}],["igenericmessagebody",{"_index":998,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignored",{"_index":878,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":699,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":745,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":635,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":584,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/TagService.html":{}}}],["inject(winston_module_provider",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["injectable",{"_index":178,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":428,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(articleentity",{"_index":430,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(followentity",{"_index":432,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(tagentity",{"_index":870,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":431,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":1220,"title":{},"body":{"index.html":{}}}],["interface",{"_index":640,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":654,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":636,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":670,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":632,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isalphanumeric",{"_index":740,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isemail",{"_index":714,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isfqdn",{"_index":741,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":331,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isnotfavorited",{"_index":504,"title":{},"body":{"injectables/ArticleService.html":{}}}],["isoptional",{"_index":332,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["ispublic",{"_index":675,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":333,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["it's",{"_index":1326,"title":{},"body":{"index.html":{}}}],["item",{"_index":618,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":619,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["iuser",{"_index":896,"title":{},"body":{"controllers/UserController.html":{}}}],["iuserresponsebody",{"_index":999,"title":{},"body":{"controllers/UsersController.html":{}}}],["javascript",{"_index":1252,"title":{},"body":{"index.html":{}}}],["joi",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":950,"title":{},"body":{"entities/UserEntity.html":{}}}],["jwt",{"_index":546,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":656,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":697,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":701,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":526,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["keepconnectionalive",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":1089,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":1090,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1393,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyout",{"_index":1392,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":594,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1436,"title":{},"body":{"index.html":{}}}],["layout",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":1333,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('articles.author",{"_index":442,"title":{},"body":{"injectables/ArticleService.html":{}}}],["length",{"_index":932,"title":{},"body":{"entities/UserEntity.html":{}}}],["level",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":1365,"title":{},"body":{"index.html":{}}}],["license",{"_index":1459,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1461,"title":{},"body":{"index.html":{}}}],["limit",{"_index":379,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"dependencies.html":{}}}],["loads",{"_index":1310,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1266,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1250,"title":{},"body":{"index.html":{}}}],["located",{"_index":1384,"title":{},"body":{"index.html":{}}}],["location",{"_index":1431,"title":{},"body":{"index.html":{}}}],["logger",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["logging",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":716,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(payload",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["logindto",{"_index":709,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logs",{"_index":1231,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["lower",{"_index":434,"title":{},"body":{"injectables/ArticleService.html":{}}}],["luckily",{"_index":1374,"title":{},"body":{"index.html":{}}}],["made",{"_index":1235,"title":{},"body":{"index.html":{}}}],["main",{"_index":1444,"title":{},"body":{"index.html":{}}}],["make",{"_index":1247,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1379,"title":{},"body":{"index.html":{}}}],["manage",{"_index":591,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":1275,"title":{},"body":{"index.html":{}}}],["many",{"_index":946,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["manytomany",{"_index":951,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":924,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytoone",{"_index":373,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":347,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1433,"title":{},"body":{"index.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":436,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":435,"title":{},"body":{"injectables/ArticleService.html":{}}}],["maxfiles",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlength",{"_index":742,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxlength(255",{"_index":744,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxsize",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["mediumtext",{"_index":352,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":703,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":715,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["minlength(8",{"_index":718,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["mins",{"_index":1329,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1204,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1460,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":1291,"title":{},"body":{"index.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":1105,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":1359,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1371,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":1360,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":888,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":1258,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1354,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1187,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1335,"title":{},"body":{"index.html":{}}}],["nest",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":668,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":534,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":536,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1390,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":1317,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1211,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1397,"title":{},"body":{"index.html":{}}}],["non",{"_index":1245,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1281,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/FollowEntity.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":1233,"title":{},"body":{"index.html":{}}}],["object",{"_index":691,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(article",{"_index":484,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["object.keys(payload).foreach((key",{"_index":1088,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":1345,"title":{},"body":{"index.html":{}}}],["offset",{"_index":380,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["ondelete",{"_index":970,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":945,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":952,"title":{},"body":{"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":920,"title":{},"body":{"entities/UserEntity.html":{}}}],["open",{"_index":1421,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":1130,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":1132,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":1133,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":1134,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1388,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":1270,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1344,"title":{},"body":{"index.html":{}}}],["optional",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":1321,"title":{},"body":{"index.html":{}}}],["os",{"_index":1457,"title":{},"body":{"index.html":{}}}],["out",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":1273,"title":{},"body":{"index.html":{}}}],["over",{"_index":1348,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1464,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1146,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1407,"title":{},"body":{"index.html":{}}}],["panel",{"_index":1263,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('slug",{"_index":308,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":792,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["particular",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1456,"title":{},"body":{"index.html":{}}}],["passport",{"_index":695,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":693,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":696,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":1065,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":953,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwords",{"_index":939,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwordtransformer",{"_index":719,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["patch",{"_index":737,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["patcharticlepolicyhandler",{"_index":275,"title":{"classes/PatchArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patcharticlepolicyhandler())@apiresponse({status",{"_index":259,"title":{},"body":{"controllers/ArticleController.html":{}}}],["patchuserdto",{"_index":734,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["patchuserpolicyhandler",{"_index":276,"title":{"classes/PatchUserPolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["patchuserpolicyhandler())@apiresponse({status",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["path",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":212,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.article",{"_index":300,"title":{},"body":{"controllers/ArticleController.html":{}}}],["payload.user",{"_index":908,"title":{},"body":{"controllers/UserController.html":{}}}],["payload[key",{"_index":1092,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":1343,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1346,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":611,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["permit",{"_index":967,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":1243,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1084,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":1289,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1377,"title":{},"body":{"index.html":{}}}],["plaintoclass(userentity",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1071,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":271,"title":{},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":1123,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":272,"title":{"guards/PoliciesGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":644,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":643,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":642,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":759,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":763,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":1299,"title":{},"body":{"index.html":{}}}],["post",{"_index":263,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["post(':slug/favorite",{"_index":312,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':username/follow",{"_index":795,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":776,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('login",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apiresponse({status",{"_index":214,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":1358,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":200,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":1223,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":363,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":1272,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1412,"title":{},"body":{"index.html":{}}}],["production",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":778,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{}}}],["profile.controller",{"_index":803,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.email",{"_index":831,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.service",{"_index":788,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/follow.entity",{"_index":391,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["profile/profile.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":768,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":64,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":770,"title":{},"body":{"controllers/ProfileController.html":{},"entities/UserRoles.html":{}}}],["profileservice",{"_index":787,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileusername",{"_index":775,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["progress",{"_index":1442,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1210,"title":{},"body":{"index.html":{}}}],["project",{"_index":1305,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":492,"title":{},"body":{"injectables/ArticleService.html":{}}}],["properties",{"_index":319,"title":{"properties.html":{}},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":1080,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":1237,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1026,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":1069,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":1428,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":1319,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1452,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get()@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@post()@apiresponse({status",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["public.decorator",{"_index":671,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":264,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":305,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":258,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put()@apiresponse({status",{"_index":886,"title":{},"body":{"controllers/UserController.html":{}}}],["queried",{"_index":897,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":250,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":446,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.dto",{"_index":287,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.dto.ts",{"_index":516,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":521,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:17",{"_index":517,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:24",{"_index":518,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:31",{"_index":519,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:38",{"_index":520,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.favorited",{"_index":450,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.limit",{"_index":462,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.offset",{"_index":464,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":443,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":439,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1=0",{"_index":457,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":448,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":444,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":461,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":470,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.limit(query.limit",{"_index":463,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.offset(query.offset",{"_index":465,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.orderby('articles.createdat",{"_index":458,"title":{},"body":{"injectables/ArticleService.html":{}}}],["quickly",{"_index":1236,"title":{},"body":{"index.html":{}}}],["r",{"_index":1083,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1398,"title":{},"body":{"index.html":{}}}],["random",{"_index":1324,"title":{},"body":{"index.html":{}}}],["react",{"_index":1297,"title":{},"body":{"index.html":{}}}],["read",{"_index":605,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1448,"title":{},"body":{"index.html":{}}}],["received",{"_index":846,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":841,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":686,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["recordkey",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":1099,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":662,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":836,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["register(payload",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerdto",{"_index":832,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["registered",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpayload",{"_index":906,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["relational",{"_index":1432,"title":{},"body":{"index.html":{}}}],["relations",{"_index":451,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":947,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1455,"title":{},"body":{"index.html":{}}}],["remark",{"_index":592,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":1287,"title":{},"body":{"index.html":{}}}],["repo",{"_index":1232,"title":{},"body":{"index.html":{}}}],["repository",{"_index":404,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":944,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":595,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":895,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":599,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UserController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":218,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[recordkey",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":336,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"index.html":{}}}],["reset",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":1290,"title":{},"body":{"index.html":{}}}],["rest",{"_index":706,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["restful",{"_index":1426,"title":{},"body":{"index.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":892,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":1318,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1370,"title":{},"body":{"index.html":{}}}],["role",{"_index":602,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":962,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":963,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":965,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":972,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":942,"title":{},"body":{"entities/UserEntity.html":{}}}],["roles",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["rsa:4096",{"_index":1391,"title":{},"body":{"index.html":{}}}],["run",{"_index":1293,"title":{},"body":{"index.html":{}}}],["running",{"_index":1401,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":1253,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1082,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1336,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1470,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":1215,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":610,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["seconds",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":700,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":935,"title":{},"body":{"entities/UserEntity.html":{}}}],["self",{"_index":1381,"title":{},"body":{"index.html":{}}}],["served",{"_index":1307,"title":{},"body":{"index.html":{}}}],["server",{"_index":1216,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":1064,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('email",{"_index":1063,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1217,"title":{},"body":{"index.html":{}}}],["signed",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":230,"title":{},"body":{"controllers/ArticleController.html":{}}}],["sits",{"_index":1338,"title":{},"body":{"index.html":{}}}],["slug",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["slugify",{"_index":429,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":433,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1400,"title":{},"body":{"index.html":{}}}],["special",{"_index":593,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1423,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1357,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1366,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1260,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":1268,"title":{},"body":{"index.html":{}}}],["start",{"_index":1265,"title":{},"body":{"index.html":{}}}],["started",{"_index":1208,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":1209,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["statements",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1351,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":681,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":596,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":590,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":674,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":679,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1451,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1368,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1356,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1248,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1462,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1422,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1093,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":1145,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1144,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":445,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tag.controller",{"_index":858,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":869,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.dto.ts",{"_index":629,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:8",{"_index":631,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":859,"title":{},"body":{"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["tag.name",{"_index":849,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tag.service",{"_index":843,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.entity",{"_index":393,"title":{},"body":{"modules/ArticleModule.html":{}}}],["tag/tag.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":394,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["tagcontroller",{"_index":837,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":392,"title":{"entities/TagEntity.html":{}},"body":{"modules/ArticleModule.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":320,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["tagmodule",{"_index":65,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":865,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":490,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":848,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":387,"title":{"injectables/TagService.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1446,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1303,"title":{},"body":{"index.html":{}}}],["test",{"_index":1405,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":1229,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1403,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1372,"title":{},"body":{"index.html":{}}}],["this.appservice.getrootmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":440,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":475,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":493,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":313,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":301,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":299,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":315,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":304,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticles(query",{"_index":293,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getfeed(currentuserid",{"_index":296,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":310,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.authservice.createtoken(user",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.caslfactory.createforuser(user",{"_index":762,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":764,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyslug(slug",{"_index":496,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.delete",{"_index":830,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.find",{"_index":477,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.findone",{"_index":817,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.save(followtocreate",{"_index":829,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.get(userid",{"_index":1087,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(payload.username",{"_index":1067,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getslug(payload.title",{"_index":487,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.getuserbyemailandpass(email",{"_index":1095,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`tag",{"_index":879,"title":{},"body":{"injectables/TagService.html":{}}}],["this.logger.info('calling",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["this.profileservice.buildprofileresponse(profile",{"_index":794,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.followprofile",{"_index":796,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":793,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowprofile",{"_index":798,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.reflector.get",{"_index":760,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":676,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tagrepository.find",{"_index":871,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(article",{"_index":873,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.createtag",{"_index":495,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagservice.gettags",{"_index":847,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":376,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["this.userrepository",{"_index":1059,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":1097,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":447,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1058,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":512,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload.user",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(username",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(userid",{"_index":907,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validateuser(payload.user",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":497,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timestamp",{"_index":355,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["title",{"_index":321,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["to(value",{"_index":727,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["todo",{"_index":813,"title":{},"body":{"injectables/ProfileService.html":{}}}],["token",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tokens",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["transform",{"_index":729,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":330,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["transports",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1264,"title":{},"body":{"index.html":{}}}],["true",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["true})@type(undefined)@validatenested",{"_index":625,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["try",{"_index":872,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":1197,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1472,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":1230,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1411,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1418,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":374,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":397,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":860,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1410,"title":{},"body":{"index.html":{}}}],["ui",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":692,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":934,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["unfavourite",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{}}}],["unfollow",{"_index":785,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowprofile",{"_index":773,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowprofile(currentuserid",{"_index":783,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unique",{"_index":854,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1402,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1313,"title":{},"body":{"index.html":{}}}],["updatearticle",{"_index":209,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":256,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":424,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":257,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatedat",{"_index":346,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["updatetimestamp",{"_index":375,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["url",{"_index":930,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":1079,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":815,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["useclass",{"_index":1027,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1424,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":265,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.articles",{"_index":348,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.bio",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.controller",{"_index":1024,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.decorator",{"_index":900,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":899,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":736,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":912,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:28",{"_index":918,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:36",{"_index":910,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:45",{"_index":914,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:53",{"_index":916,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:63",{"_index":739,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.email",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":901,"title":{},"body":{"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.favorites.findindex",{"_index":505,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":510,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":514,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.id",{"_index":818,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user.image",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.roles",{"_index":969,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":601,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["user[key",{"_index":1091,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":586,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["usercontroller",{"_index":881,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdto",{"_index":738,"title":{"classes/UserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":211,"title":{"entities/UserEntity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":410,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["userlogindto",{"_index":711,"title":{"classes/UserLoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userparam",{"_index":279,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userparam('id",{"_index":295,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["userregistrationdto",{"_index":834,"title":{"classes/UserRegistrationDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":405,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1118,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":537,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":587,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":603,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1025,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":1062,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":902,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.decorator",{"_index":280,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["users/user.entity",{"_index":281,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["users/users.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":973,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":66,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":527,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1292,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1322,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":927,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":690,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":682,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(undefined",{"_index":685,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":334,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["validates",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(undefined",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["validation",{"_index":702,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":335,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["value",{"_index":726,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":732,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":721,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":1104,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1476,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1468,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":1254,"title":{},"body":{"index.html":{}}}],["view",{"_index":1438,"title":{},"body":{"index.html":{}}}],["vue",{"_index":1298,"title":{},"body":{"index.html":{}}}],["web",{"_index":1227,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["where('articles.authorid",{"_index":483,"title":{},"body":{"injectables/ArticleService.html":{}}}],["where('users.email",{"_index":1061,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":1304,"title":{},"body":{"index.html":{}}}],["winston",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["winstonfilerotator",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":1276,"title":{},"body":{"index.html":{}}}],["work",{"_index":1430,"title":{},"body":{"index.html":{}}}],["world",{"_index":1449,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1364,"title":{},"body":{"index.html":{}}}],["write",{"_index":606,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":941,"title":{},"body":{"entities/UserEntity.html":{}}}],["x509",{"_index":1389,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":1261,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1282,"title":{},"body":{"index.html":{}}}],["yes",{"_index":420,"title":{},"body":{"injectables/ArticleService.html":{}}}],["yyyy",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["zippedarchive",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getRootMessage(): Promise {\n    return this.appService.getRootMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArticleModule } from './article/article.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { TagModule } from './tag/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule.forRoot(),\n    UsersModule,\n    CaslModule,\n    TagModule,\n    ArticleModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \ngetRootMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  getRootMessage(): IMessage {\n    this.logger.info('Calling getRootMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                favouriteArticle\n                            \n                            \n                                    Async\n                                getArticle\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: 201, description: 'Create Articles Request Completed'})@ApiResponse({status: 400, description: 'Create Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:77\n                \n            \n\n\n            \n                \n                    Route to create an article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    payload\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteArticlePolicyHandler())@ApiResponse({status: 201, description: 'Delete Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:139\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfavourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Unfavourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        favouriteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    favouriteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Favourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Favourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiResponse({status: 201, description: 'Get Article Request Completed'})@ApiResponse({status: 400, description: 'Get Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:99\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 201, description: 'Get Articles Request Completed'})@ApiResponse({status: 400, description: 'Get Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')@ApiResponse({status: 201, description: 'Get Article Feed Request Completed'})@ApiResponse({status: 400, description: 'Get Article Feed Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchArticlePolicyHandler())@ApiResponse({status: 201, description: 'Edit Article Request Completed'})@ApiResponse({status: 400, description: 'Edit Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport {\n  DeleteArticlePolicyHandler,\n  PatchArticlePolicyHandler,\n  PatchUserPolicyHandler,\n} from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleService } from './article.service';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { CreateArticleDto } from './dto/create-article.dto';\n\n@ApiBearerAuth()\n@ApiTags('articles')\n@Controller('articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 201, description: 'Get Articles Request Completed' })\n  @ApiResponse({ status: 400, description: 'Get Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticles(\n    @Query()\n    query: ArticlesQueryParams,\n  ): Promise {\n    return await this.articleService.getArticles(query);\n  }\n\n  @Get('feed')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Feed Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Feed Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getFeed(\n    @UserParam('id') currentUserId: number,\n    @Query() query: ArticleFeedQueryParams,\n  ) {\n    return await this.articleService.getFeed(currentUserId, query);\n  }\n\n  /**\n   * Route to create an article\n   * @param {ArticleDto} payload the article dto\n   */\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Create Articles Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Create Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async createArticle(\n    @UserParam() user: UserEntity,\n    @Body() payload: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      user,\n      payload.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Get(':slug')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticle(@Param('slug') slug: string): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Put(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Edit Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Edit Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body('article') updateArticleDto: CreateArticleDto,\n  ) {\n    const article = await this.articleService.updateArticle(\n      slug,\n      updateArticleDto,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Delete(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Delete Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticle(\n    @Param('slug') slug: string,\n  ): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Favourite an Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Favourite an Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async favouriteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfavourite an Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfavourite an Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticleFromFavorites(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                tagList\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty({ required: true })\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                favoritesCount\n                            \n                            \n                                id\n                            \n                            \n                                slug\n                            \n                            \n                                tagList\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'mediumtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Default description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: 'Default description' })\n  description: string;\n\n  @Column({ type: 'mediumtext' })\n  body: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEntity, (user) => user.articles, { eager: true })\n  author: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleFeedQueryParams.html":{"url":"classes/ArticleFeedQueryParams.html","title":"class - ArticleFeedQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleFeedQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/article-feed.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticleFeedQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                        \n                            CaslFactory\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagEntity } from '../tag/tag.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleController } from './article.controller';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleService } from './article.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ArticleEntity,\n      UserEntity,\n      TagEntity,\n      FollowEntity,\n    ]),\n  ],\n  controllers: [ArticleController],\n  providers: [ArticleService, CaslFactory, TagService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, followRepository: Repository, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/article/article.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IArticleResponseBody\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, updateArticleDto: CreateArticleDto, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport slugify from 'slugify';\nimport { Repository } from 'typeorm';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { ArticleDto, CreateArticleDto } from './dto/create-article.dto';\n\n@Injectable()\nexport class ArticleService {\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n    private readonly tagService: TagService,\n  ) {}\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n\n  async getArticles(\n    query: ArticlesQueryParams,\n    userId?: number,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author');\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      queryBuilder.andWhere('articles.authorId = :id', {\n        id: author.id,\n      });\n    }\n\n    if (query.favorited) {\n      const author = await this.userRepository.findOne({\n        where: {\n          username: query.favorited,\n        },\n        relations: ['favorites'],\n      });\n      const ids = author.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.authorId IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1=0');\n      }\n    }\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    let favoriteIds: number[] = [];\n\n    if (userId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: userId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articles = await queryBuilder.getMany();\n    const articlesWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articlesWithFavorited, articlesCount };\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({ where: { slug } });\n  }\n\n  async getFeed(currentUserId: number, query: ArticleFeedQueryParams) {\n    const follows = await this.followRepository.find({\n      where: { followerId: currentUserId },\n    });\n\n    if (follows.length === 0) {\n      return { articles: [], articlesCount: 0 };\n    }\n\n    const followingUserIds = follows.map((follow) => follow.followingId);\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author')\n      .where('articles.authorId IN (:...ids)', { ids: followingUserIds });\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    const articles = await queryBuilder.getMany();\n\n    return { articles, articlesCount };\n  }\n\n  async createArticle(\n    user: UserEntity,\n    payload: ArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, payload);\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n    article.slug = this.getSlug(payload.title);\n    article.author = user;\n\n    // Creating tags from tagList\n    const [createdArticle] = await Promise.all([\n      this.articleRepository.save(article),\n      ...article.tagList.map((name) => this.tagService.createTag({ name })),\n    ]);\n    return createdArticle;\n  }\n\n  async updateArticle(\n    slug: string,\n    updateArticleDto: CreateArticleDto,\n    currentUserId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, updateArticleDto);\n\n    return await this.articleRepository.save(article);\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex >= 0) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  buildArticleResponse(article: ArticleEntity): IArticleResponseBody {\n    return { article };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesQueryParams.html":{"url":"classes/ArticlesQueryParams.html","title":"class - ArticlesQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/articles-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                favorited\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticlesQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  tag: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  author: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  favorited: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { module: typeof AuthModule; providers: {}; }\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\nconst providers = [AuthService, JwtStrategy];\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [...providers, UsersService],\n  controllers: [],\n  exports: providers,\n})\nexport class AuthModule {\n  static forRoot() {\n    return {\n      module: AuthModule,\n      providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserEntity } from '../users/user.entity';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {UserEntity} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  createToken({ id, username, roles, email }: UserEntity): string {\n    return this.jwtService.sign({\n      id,\n      username,\n      roles,\n      email,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: UserEntity) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    // User scoped permissions\n    can(UserActionsEnum.Update, ArticleEntity, { author: user });\n    can(UserActionsEnum.Delete, ArticleEntity, { author: user });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty({ required: true })\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlpha()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/dto/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlpha, IsNotEmpty } from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsAlpha()\n  @IsNotEmpty()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteArticlePolicyHandler.html":{"url":"classes/DeleteArticlePolicyHandler.html","title":"class - DeleteArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowEntity.html":{"url":"entities/FollowEntity.html","title":"entity - FollowEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followerId\n                            \n                            \n                                followingId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'follows' })\nexport class FollowEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  followerId: number;\n\n  @Column()\n  followingId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {UsersService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('Token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({\n    iat,\n    exp,\n    id,\n    ...rest\n  }: Record): Promise {\n    console.log(rest);\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserLoginDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchArticlePolicyHandler.html":{"url":"classes/PatchArticlePolicyHandler.html","title":"class - PatchArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPolicyHandler.html":{"url":"classes/PatchUserPolicyHandler.html","title":"class - PatchUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Follow Profile Request Completed'})@ApiResponse({status: 400, description: 'Follow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 201, description: 'Get Profile by Username Request Completed'})@ApiResponse({status: 400, description: 'Get Profile by Username Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfollow Profile Request Completed'})@ApiResponse({status: 400, description: 'Unfollow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { PatchUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { ProfileService } from './profile.service';\n\n@ApiBearerAuth()\n@ApiTags('profiles')\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Get(':username')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Profile by Username Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Get Profile by Username Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.getProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Post(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Follow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Follow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async followProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.followProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Delete(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfollow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfollow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async unfollowProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.unfollowProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, FollowEntity])],\n  controllers: [ProfileController],\n  providers: [ProfileService, CaslFactory],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildProfileResponse\n                            \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildProfileResponse\n                        \n                    \n                \n            \n            \n                \nbuildProfileResponse(profile)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { profile: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\n\n// TODO: type everything (exportable in api-types for UI to use)\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async getProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: {\n        followerId: currentUserId,\n        followingId: user.id,\n      },\n    });\n    console.log('follow', follow, currentUserId, user.id);\n\n    return { ...user, following: Boolean(follow) };\n  }\n\n  async followProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    if (!follow) {\n      const followToCreate = new FollowEntity();\n      followToCreate.followerId = currentUserId;\n      followToCreate.followingId = user.id;\n      await this.followRepository.save(followToCreate);\n    }\n\n    return { ...user, following: true };\n  }\n\n  async unfollowProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    await this.followRepository.delete({\n      followerId: currentUserId,\n      followingId: user.id,\n    });\n\n    return { ...user, following: false };\n  }\n\n  buildProfileResponse(profile: UserEntity & { following: boolean }) {\n    delete profile.email;\n    return { profile };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRegistrationDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Fetch Tags Request Received'})@ApiResponse({status: 400, description: 'Fetch Tags Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/tag/tag.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { Public } from '../auth/public.decorator';\nimport { TagService } from './tag.service';\n\n@ApiBearerAuth()\n@ApiTags('tags')\n@Controller('tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Fetch Tags Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Tags Request Failed' })\n  async getTags() {\n    const tags = await this.tagService.getTags();\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Tag Entity Class\n */\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TagController } from './tag.controller';\nimport { TagEntity } from './tag.entity';\nimport { TagService } from './tag.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/tag/tag.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(tag: CreateTagDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                CreateTagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Repository } from 'typeorm';\nimport { Logger } from 'winston';\n\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { TagEntity } from './tag.entity';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  async getTags(): Promise {\n    return await this.tagRepository.find();\n  }\n\n  async createTag(tag: CreateTagDto): Promise {\n    try {\n      const article = new TagEntity();\n      Object.assign(article, tag);\n      return await this.tagRepository.save(article);\n    } catch (error) {\n      // Error case is likely a duplicate tag which is fine to be ignored\n      this.logger.debug(`Tag ${tag.name} exists, so not creating duplicate`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponse({status: 200, description: 'Put User Request Received'})@ApiResponse({status: 400, description: 'Put User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:21\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IUser\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Request } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IUser } from '@starter/api-types';\n\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserParam } from './user.decorator';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly usersService: UsersService) {}\n  /**\n   * Retrieves current authenticated user\n   * @returns {IUser} queried user data\n   */\n  @Get()\n  getUser(@Request() req): IUser {\n    return req.user as IUser;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Put()\n  @ApiResponse({ status: 200, description: 'Put User Request Received' })\n  @ApiResponse({ status: 400, description: 'Put User Request Failed' })\n  async editUser(\n    @UserParam('id') userId: number,\n    @Body() payload: PatchUserDto,\n  ): Promise {\n    return this.usersService.edit(userId, payload.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bio\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                image\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    Bio field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsFQDN()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    Image field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                bio\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:44\n                        \n                    \n\n            \n                \n                    Bio column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:38\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:26\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:68\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:56\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:32\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Bio column\n   */\n  @Column({ default: '' })\n  bio: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  image: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:28\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRegistrationDto.html":{"url":"classes/UserRegistrationDto.html","title":"class - UserRegistrationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRegistrationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:21\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:37\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:29\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { UserEntity } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => UserEntity, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:120\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:98\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody, IUserResponseBody } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param usersService\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post()\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(\n    @Body() payload: RegisterDto,\n  ): Promise> {\n    const user = await this.usersService.create(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() payload: LoginDto,\n  ): Promise> {\n    const user = await this.usersService.validateUser(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { UserController } from './user.controller';\nimport { UserEntity } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRoles]), AuthModule],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController, UserController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getUserByEmailAndPass\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: UserRegistrationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                UserRegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:148\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(userId: number, payload: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailAndPass\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailAndPass(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: UserLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:132\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { LoginDto, UserLoginDto } from '../auth/dto/login.dto';\nimport { UserRegistrationDto } from '../auth/dto/register.dto';\nimport { UserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { UserEntity } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getUserByEmailAndPass(email: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.email = :email and users.password = :password')\n      .setParameter('email', email)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {UserRegistrationDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: UserRegistrationDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        image: url(payload.email, {\n          protocol: 'https',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {Partial} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(userId: number, payload: Partial): Promise {\n    const user = await this.get(userId);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ email, password }: UserLoginDto): Promise {\n    const user = await this.getUserByEmailAndPass(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/article-feed.dto.ts\n            \n            class\n            ArticleFeedQueryParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/articles-query.dto.ts\n            \n            class\n            ArticlesQueryParams\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            ArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            UserLoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            UserRegistrationDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/follow.entity.ts\n            \n            entity\n            FollowEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            UserDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.decorator.ts\n            \n            variable\n            UserParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            slugify : ^1.6.5\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            providers   (apps/.../auth.module.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            UserParam   (apps/.../user.decorator.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthService, JwtStrategy]\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserEntity, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserParam\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (recordKey: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    if (!request.user) {\n      null;\n    }\n\n    if (recordKey) {\n      return request.user[recordKey as keyof typeof request.user];\n    }\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
