var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.488,1,2.61]],["body/controllers/AppController.html",[0,2.62,1,3.884,2,1.691,3,0.208,4,0.208,5,0.138,6,3.648,7,1.685,8,4.756,9,0.282,10,1.373,11,2.469,12,5.651,13,0.953,14,0.019,15,3.257,16,3.325,17,6.569,18,3.451,19,2.966,20,3.325,21,3.579,22,0.361,23,4.24,24,1.624,25,5.651,26,5.046,27,2.596,28,0.334,29,1,30,3.325,31,3.707,32,1.207,33,3.648,34,1.608,35,1.458,36,4.083,37,3.648,38,3.325,39,2.966,40,0.208,41,0.165,42,1.877,43,1.983,44,2.539,45,2.373,46,1.207,47,0.784,48,3.108,49,2.733,50,1,51,4.24,52,0.013,53,0.013]],["title/modules/AppModule.html",[54,1.347,55,2.61]],["body/modules/AppModule.html",[1,3.457,2,1.653,3,0.242,4,0.137,5,0.135,14,0.019,28,0.354,29,0.658,36,3.666,37,2.401,40,0.137,41,0.109,44,3.275,47,0.516,50,0.977,52,0.01,53,0.01,54,1.496,55,5.092,56,1.305,57,1.834,58,2.401,59,2.401,60,2.401,61,3.945,62,3.499,63,3.945,64,3.945,65,3.945,66,3.945,67,2.177,68,1.466,69,1.381,70,2.791,71,2.051,72,3.499,73,4.705,74,4.652,75,1.799,76,2.791,77,2.401,78,2.144,79,1.671,80,4.144,81,1.236,82,4.251,83,2.791,84,1.799,85,3.525,86,2.791,87,2.791,88,4.144,89,2.401,90,2.401,91,2.791,92,2.791,93,2.401,94,2.791,95,2.791,96,2.791,97,2.791,98,2.791,99,2.791,100,2.791,101,2.401,102,2.791,103,3.183,104,2.791,105,2.401,106,2.791,107,2.401,108,2.791,109,2.401,110,2.791,111,2.401,112,2.791,113,2.401,114,2.791,115,2.401,116,2.791,117,2.401,118,2.791,119,2.401,120,2.791,121,2.791,122,3.457,123,4.251,124,2.401,125,2.791,126,2.791,127,2.791,128,1.952,129,2.791,130,0.202,131,2.791,132,2.791,133,2.791,134,2.791,135,2.791,136,1.113,137,2.791,138,1.236,139,2.791,140,1.799,141,2.791,142,1.466,143,2.791,144,2.791,145,2.791,146,4.144,147,3.564,148,2.791,149,2.421,150,2.144,151,2.791,152,2.791,153,4.942,154,5.469,155,4.144,156,4.144,157,1.024,158,4.144,159,2.181,160,4.144,161,4.144,162,2.791,163,4.144,164,2.791,165,2.401,166,2.791,167,2.791,168,2.791,169,2.791,170,2.791,171,2.791,172,2.791,173,2.791,174,2.791,175,2.791,176,2.791,177,2.791]],["title/injectables/AppService.html",[36,2.234,178,1.062]],["body/injectables/AppService.html",[3,0.211,4,0.211,5,0.14,7,1.387,9,0.286,10,1.387,12,5.897,14,0.019,22,0.477,24,1.634,25,5.897,26,5.266,28,0.324,29,1.016,33,5.369,34,1.635,35,1.483,36,3.361,40,0.211,41,0.168,42,2.927,43,2.016,44,3.959,46,1.227,47,0.797,50,1.016,52,0.013,53,0.013,84,2.778,85,3.617,122,3.015,130,0.312,150,4.311,178,1.597,179,2.016,180,3.708,181,4.828,182,4.311,183,6.242,184,4.311,185,1.227,186,0.838,187,1.117,188,4.311,189,3.708,190,3.708,191,2.134,192,4.311,193,4.311,194,3.015,195,4.311,196,3.708,197,3.311]],["title/classes/ArticleCommentDto.html",[41,0.146,198,2.405]],["body/classes/ArticleCommentDto.html",[3,0.246,4,0.246,5,0.163,9,0.334,13,1.13,14,0.018,22,0.427,28,0.328,32,1.43,40,0.303,41,0.273,47,1.144,52,0.015,53,0.015,130,0.486,198,4.506,199,1.43,200,3.986,201,2.892,202,3.86,203,1.602,204,3.133,205,4.322,206,5.025,207,2.672,208,2.004,209,2.738,210,2.892,211,1.906,212,3.238,213,3.009]],["title/controllers/ArticleController.html",[0,1.488,214,2.61]],["body/controllers/ArticleController.html",[0,0.517,2,0.517,3,0.063,4,0.063,5,0.042,7,1.848,9,0.086,10,0.552,11,2.771,13,1.228,14,0.018,15,0.997,16,2.094,18,3.65,19,3.819,20,3.895,22,0.465,24,1.35,27,2.015,28,0.287,29,0.306,30,1.338,31,4.176,32,0.369,34,0.492,35,0.446,38,1.338,39,0.907,40,0.063,41,0.051,43,1.635,45,0.726,46,0.369,47,1.24,48,3.888,49,3.519,50,1.287,52,0.005,53,0.005,130,0.396,157,1.065,185,1.554,186,1.062,187,1.415,201,3.43,204,1.635,212,2.974,213,2.361,214,1.563,215,1.116,216,0.836,217,3.565,218,2.942,219,2.531,220,2.531,221,2.531,222,2.531,223,2.942,224,2.234,225,2.531,226,2.234,227,2.531,228,2.531,229,1.297,230,1.088,231,5.336,232,1.297,233,3.008,234,4.793,235,3.497,236,4.996,237,4.195,238,4.996,239,4.996,240,1.297,241,2.728,242,1.116,243,1.837,244,2.974,245,1.297,246,3.013,247,1.297,248,3.706,249,1.25,250,1.297,251,2.217,252,1.297,253,1.297,254,2.853,255,1.297,256,3.497,257,4.307,258,1.297,259,1.297,260,3.497,261,1.297,262,1.297,263,3.008,264,1.297,265,1.297,266,1.297,267,1.297,268,3.497,269,1.297,270,1.297,271,1.297,272,1.297,273,1.116,274,2.254,275,1.297,276,4.385,277,1.297,278,1.297,279,2.254,280,1.297,281,1.116,282,2.254,283,1.297,284,3.497,285,1.297,286,1.297,287,2.942,288,1.297,289,1.297,290,2.686,291,1.297,292,1.716,293,1.116,294,0.997,295,0.836,296,1.116,297,1.116,298,0.836,299,0.997,300,0.907,301,0.726,302,0.907,303,1.174,304,1.174,305,1.951,306,0.997,307,0.607,308,1.896,309,1.116,310,0.468,311,1.762,312,1.116,313,1.116,314,1.116,315,1.116,316,1.116,317,1.716,318,1.116,319,1.116,320,1.297,321,1.297,322,2.869,323,1.297,324,1.297,325,3.31,326,1.297,327,0.777,328,1.634,329,1.297,330,1.297,331,3.942,332,1.297,333,1.297,334,1.297,335,1.297,336,3.31,337,3.31,338,4.308,339,1.297,340,1.297,341,1.297,342,1.297,343,1.297,344,1.297,345,1.297,346,1.297,347,1.297,348,1.297,349,1.297,350,1.297,351,1.297,352,1.297,353,1.297,354,1.297,355,1.297,356,1.297]],["title/classes/ArticleDto.html",[41,0.146,327,2.234]],["body/classes/ArticleDto.html",[3,0.213,4,0.213,5,0.142,7,1.55,9,0.289,13,1.492,14,0.018,22,0.564,28,0.307,32,1.238,40,0.276,41,0.259,47,1.345,52,0.013,53,0.013,130,0.511,149,2.5,187,1.463,199,1.238,200,4.431,201,2.035,203,1.463,204,2.932,205,5.393,207,2.81,208,1.736,209,2.937,210,2.641,211,1.651,244,2.805,327,3.973,357,3.343,358,4.385,359,4.385,360,4.352,361,4.352,362,3.343,363,4.352,364,4.352,365,4.352,366,3.95,367,3.95,368,2.805,369,2.035,370,3.744]],["title/entities/ArticleEntity.html",[371,1.488,372,1.488]],["body/entities/ArticleEntity.html",[3,0.159,4,0.159,5,0.105,7,1.534,9,0.215,13,1.594,14,0.019,22,0.603,28,0.264,40,0.159,41,0.127,47,1.296,52,0.011,53,0.011,130,0.527,142,1.704,149,2.599,157,1.143,159,1.294,186,0.631,203,1.198,204,2.518,213,2.768,217,2.268,230,1.384,231,4.137,251,2.019,279,3.471,310,1.171,358,3.767,359,3.767,369,2.161,371,1.844,372,1.844,373,2.79,374,3.014,375,4.633,376,5.385,377,2.261,378,4.633,379,2.491,380,4.622,381,5.87,382,3.976,383,3.243,384,4.137,385,4.622,386,3.243,387,3.285,388,2.79,389,3.976,390,3.243,391,5.338,392,5.05,393,3.798,394,5.05,395,3.243,396,3.976,397,3.243,398,3.551,399,3.243,400,3.225,401,3.243,402,4.195,403,3.243,404,4.622,405,4.622,406,3.243,407,3.243,408,3.243,409,3.976,410,3.551,411,3.976,412,1.294,413,2.491,414,2.79,415,2.79]],["title/classes/ArticleFeedQueryParams.html",[41,0.146,282,2.405]],["body/classes/ArticleFeedQueryParams.html",[3,0.243,4,0.243,5,0.161,9,0.329,13,1.379,14,0.018,22,0.522,28,0.3,32,1.41,40,0.243,41,0.239,52,0.015,53,0.015,130,0.445,199,1.41,203,1.589,207,2.656,211,1.88,251,2.393,282,3.952,362,4.711,366,4.658,367,4.658,368,3.952,369,2.868,416,5.729,417,4.263,418,5.116,419,5.729,420,5.275,421,4.956,422,4.956]],["title/modules/ArticleModule.html",[54,1.347,61,2.405]],["body/modules/ArticleModule.html",[2,2.256,3,0.213,4,0.213,5,0.142,14,0.019,28,0.366,29,1.029,40,0.213,41,0.17,52,0.013,53,0.013,54,2.042,56,2.04,57,2.504,61,4.779,67,2.972,68,2.292,69,2.159,71,2.8,72,2.612,79,2.612,81,1.931,214,4.39,230,1.334,310,1.575,311,4.222,312,3.753,372,2.256,387,3.166,413,3.351,423,3.753,424,3.753,425,3.49,426,3.704,427,4.362,428,3.351,429,3.166,430,3.753,431,3.387,432,4.362,433,3.753,434,4.362,435,3.351,436,4.362]],["title/injectables/ArticleService.html",[178,1.062,311,2.234]],["body/injectables/ArticleService.html",[3,0.065,4,0.065,5,0.043,9,0.088,10,0.563,11,2.781,14,0.019,22,0.511,24,1.46,27,2.762,28,0.289,29,0.313,34,0.503,35,0.456,40,0.065,41,0.052,42,1.008,46,1.137,47,1.266,50,1.44,52,0.005,53,0.005,81,0.587,130,0.436,136,0.908,149,0.587,157,1.32,159,1.861,178,0.648,179,0.62,185,1.711,186,1.188,187,1.558,191,2.438,198,2.288,201,2.935,213,2.126,217,2.795,219,2.574,220,1.959,221,2.574,222,2.574,225,2.574,227,1.959,228,2.574,230,1.1,231,4.619,241,1.987,242,1.141,243,2.972,251,2.3,254,0.742,257,3.734,263,3.752,273,1.141,274,2.288,276,3.438,279,0.855,281,1.959,282,2.288,296,2.574,297,1.141,310,0.479,311,1.364,313,1.141,314,1.141,315,1.141,316,1.141,317,1.75,318,1.141,319,1.141,322,3.615,327,2.795,328,2.622,358,0.928,359,0.928,372,1.594,374,2.441,377,1.96,387,2.441,389,1.959,398,2.299,412,0.529,413,1.019,426,2.452,429,0.742,430,1.141,433,1.141,435,1.019,437,1.141,438,2.992,439,2.278,440,2.278,441,2.992,442,2.278,443,2.278,444,2.278,445,1.327,446,4.048,447,2.299,448,2.574,449,2.992,450,1.327,451,2.278,452,1.327,453,4.76,454,1.327,455,2.278,456,1.327,457,2.278,458,1.327,459,1.327,460,1.327,461,1.327,462,2.278,463,1.327,464,1.327,465,1.327,466,1.327,467,1.327,468,2.278,469,1.327,470,1.327,471,1.327,472,2.278,473,1.327,474,1.327,475,2.278,476,1.327,477,1.327,478,1.327,479,1.959,480,1.141,481,0.928,482,1.959,483,1.327,484,1.019,485,1.141,486,1.327,487,1.327,488,1.327,489,1.327,490,1.327,491,1.141,492,1.327,493,2.278,494,2.278,495,2.278,496,2.278,497,2.278,498,1.327,499,1.593,500,2.278,501,3.351,502,2.278,503,1.327,504,2.278,505,3.438,506,3.438,507,3.996,508,1.327,509,1.327,510,1.327,511,1.327,512,2.278,513,2.278,514,3.996,515,2.278,516,2.278,517,2.278,518,2.278,519,2.278,520,2.278,521,1.327,522,1.327,523,1.327,524,2.278,525,2.278,526,1.327,527,1.959,528,1.327,529,1.327,530,1.141,531,1.327,532,1.019,533,1.327,534,2.278,535,1.327,536,1.327,537,1.327,538,1.959,539,2.278,540,1.327,541,1.327,542,1.141,543,1.019,544,1.019,545,2.278,546,1.327,547,3.996,548,1.327,549,1.327,550,4.667,551,2.795,552,2.278,553,1.75,554,2.574,555,2.278,556,2.278,557,2.278,558,1.327,559,2.278,560,2.278,561,2.278,562,2.278,563,2.278,564,3.264,565,1.327,566,2.278,567,2.574,568,1.141,569,1.327,570,1.141,571,1.327,572,2.278,573,1.327,574,1.327,575,1.327,576,2.278,577,1.327,578,1.327,579,1.327,580,1.327,581,1.327,582,1.327,583,2.278,584,1.327]],["title/classes/ArticlesQueryParams.html",[41,0.146,274,2.405]],["body/classes/ArticlesQueryParams.html",[3,0.209,4,0.209,5,0.139,9,0.283,13,1.535,14,0.018,22,0.581,28,0.273,32,1.212,40,0.209,41,0.217,47,1.296,52,0.013,53,0.013,130,0.495,199,1.212,203,1.443,207,2.794,211,1.616,251,2.263,274,3.59,362,5.246,366,4.899,367,4.899,368,4.401,369,3.193,374,3.473,418,4.767,419,5.338,420,5.875,499,4.34,527,5.338,585,6.026,586,3.665,587,4.26,588,4.26,589,4.26,590,4.26,591,4.26]],["title/modules/AuthModule.html",[54,1.347,62,2.234]],["body/modules/AuthModule.html",[2,1.478,3,0.181,4,0.181,5,0.12,10,0.916,11,1.478,14,0.019,22,0.315,24,0.916,28,0.352,29,0.874,40,0.181,41,0.145,50,1.196,52,0.012,53,0.012,54,2.246,56,1.733,57,2.246,62,4.444,67,2.665,68,1.947,69,1.834,71,3.41,72,3.038,73,4.976,74,4.351,75,2.388,78,3.897,79,2.219,81,1.64,122,2.592,123,3.187,230,0.874,251,1.274,310,1.338,328,1.405,592,3.187,593,3.187,594,3.187,595,4.068,596,4.352,597,3.146,598,2.846,599,4.364,600,5.785,601,3.705,602,2.846,603,3.705,604,2.846,605,3.705,606,2.592,607,2.665,608,3.705,609,2.592,610,3.187,611,3.705,612,3.705,613,2.846,614,3.705,615,3.705,616,2.388,617,3.705,618,3.705,619,3.187,620,3.705,621,5.073,622,3.705]],["title/injectables/AuthService.html",[178,1.062,595,2.088]],["body/injectables/AuthService.html",[3,0.182,4,0.182,5,0.121,7,1.259,9,0.248,10,1.259,14,0.019,22,0.494,24,1.259,27,1.743,28,0.305,29,0.879,40,0.182,41,0.145,42,2.761,43,2.916,44,3.91,46,1.858,47,0.942,50,0.879,52,0.012,53,0.012,74,4.826,75,2.403,130,0.452,136,2.032,157,1.259,178,1.45,179,1.743,185,1.45,186,0.99,187,1.32,191,3.232,203,1.32,204,2.382,230,1.54,243,2.677,249,2.086,251,1.996,310,1.346,377,2.139,595,2.851,597,2.382,604,2.864,616,4.02,623,3.207,624,3.913,625,5.803,626,5.803,627,3.728,628,7.025,629,5.094,630,3.728,631,3.728,632,4.382,633,3.913,634,4.826,635,4.382,636,4.382,637,4.382,638,4.382,639,2.608,640,3.728,641,3.728,642,3.207,643,3.283,644,2.255,645,3.728]],["title/injectables/CaslFactory.html",[178,1.062,425,1.847]],["body/injectables/CaslFactory.html",[3,0.193,4,0.193,5,0.128,9,0.262,10,1.309,14,0.019,22,0.336,24,0.975,28,0.326,29,0.93,34,1.497,35,1.821,40,0.259,41,0.154,50,0.93,52,0.013,53,0.013,130,0.463,157,1.646,159,1.574,178,1.506,179,1.845,185,1.123,186,0.767,187,1.022,199,1.123,230,1.57,310,1.425,328,1.497,372,2.383,374,2.963,377,1.657,425,2.621,543,3.031,646,3.031,647,5.294,648,5.294,649,3.946,650,3.139,651,5.294,652,5.294,653,5.294,654,4.554,655,3.395,656,2.363,657,3.395,658,2.209,659,5.294,660,4.554,661,3.946,662,4.067,663,3.946,664,3.946,665,3.946,666,5.294,667,2.073,668,3.946,669,3.395,670,5.294,671,3.946,672,3.412,673,3.031,674,3.946,675,5.14,676,3.946,677,4.554,678,4.554,679,3.946,680,3.946,681,3.946,682,5.294,683,3.395,684,3.946,685,3.946,686,3.946,687,3.395,688,3.946,689,3.946,690,3.946]],["title/modules/CaslModule.html",[54,1.347,63,2.405]],["body/modules/CaslModule.html",[3,0.252,4,0.252,5,0.168,14,0.018,28,0.307,29,1.215,40,0.252,41,0.201,52,0.015,53,0.015,54,2.268,56,2.409,57,2.78,63,4.798,67,3.3,68,2.707,69,2.55,71,3.109,425,3.802,599,5.403,691,4.432,692,5.153,693,4.432,694,5.153,695,2.884]],["title/entities/CommentEntity.html",[371,1.488,387,2.088]],["body/entities/CommentEntity.html",[3,0.187,4,0.187,5,0.125,9,0.254,13,1.528,14,0.019,22,0.578,28,0.288,40,0.187,41,0.149,47,0.96,52,0.012,53,0.012,130,0.512,142,2.012,157,1.283,159,1.528,186,0.745,201,3.082,203,1.344,204,2.752,230,1.487,251,1.785,279,2.469,310,1.383,369,2.949,371,2.069,372,2.516,374,3.293,375,5.062,377,2.471,378,5.062,379,3.986,382,5.426,384,3.986,387,2.904,391,5.67,392,5.426,393,3.53,394,5.426,400,3.524,402,3.947,409,4.463,410,4.52,412,1.528,414,3.295,415,3.295,435,2.942,568,4.463,696,3.295,697,3.83,698,5.189,699,3.83,700,3.83,701,3.83,702,3.83,703,3.83]],["title/classes/CreateArticleCommentDto.html",[41,0.146,212,2.405]],["body/classes/CreateArticleCommentDto.html",[3,0.246,4,0.246,5,0.163,9,0.334,13,1.13,14,0.018,22,0.427,28,0.328,32,1.43,40,0.303,41,0.273,47,0.929,52,0.015,53,0.015,130,0.486,198,4.506,199,1.43,200,3.986,201,2.892,202,3.86,203,1.602,204,2.349,207,2.672,208,2.004,209,2.738,210,2.892,211,1.906,212,3.986,213,4.012,704,3.238,705,5.025]],["title/classes/CreateArticleDto.html",[41,0.146,244,2.405]],["body/classes/CreateArticleDto.html",[3,0.234,4,0.234,5,0.155,7,1.18,9,0.317,13,1.073,14,0.018,22,0.406,28,0.32,32,1.358,40,0.293,41,0.268,47,1.27,52,0.014,53,0.014,130,0.475,149,2.114,199,1.358,200,3.861,201,3.062,203,1.552,204,2.232,207,2.879,208,1.904,209,3.04,210,2.801,211,1.811,244,3.861,327,4.112,357,3.667,358,3.339,359,3.339,366,4.19,367,4.19,368,3.077,369,2.232,370,4.107,704,3.077,706,4.774]],["title/classes/CreateTagDto.html",[41,0.146,707,2.61]],["body/classes/CreateTagDto.html",[3,0.257,4,0.257,5,0.171,9,0.349,13,1.182,14,0.018,22,0.447,28,0.311,32,1.496,40,0.257,41,0.248,46,1.945,47,1.176,52,0.015,53,0.015,130,0.381,186,1.329,199,1.496,203,1.647,207,2.536,209,2.814,211,1.994,707,4.446,708,5.469,709,4.522,710,5.257,711,5.257,712,6.357]],["title/classes/DeleteArticlePolicyHandler.html",[41,0.146,303,1.96]],["body/classes/DeleteArticlePolicyHandler.html",[3,0.207,4,0.207,5,0.138,9,0.281,10,1.37,14,0.019,22,0.36,24,1.046,28,0.321,34,1.605,35,1.455,40,0.333,41,0.256,50,1.547,52,0.013,53,0.013,130,0.448,185,1.204,186,0.822,187,1.096,199,1.204,230,1.458,303,2.913,304,2.223,305,2.094,307,1.978,310,1.527,372,2.467,650,2.913,656,2.533,658,2.368,667,3.84,695,2.368,713,3.103,714,2.368,715,3.813,716,3.743,717,3.573,718,4.506,719,4.231,720,2.223,721,3.703,722,3.32,723,2.223,724,2.533,725,3.573,726,2.223,727,3.573]],["title/classes/DeleteUserPolicyHandler.html",[41,0.146,726,1.96]],["body/classes/DeleteUserPolicyHandler.html",[3,0.207,4,0.207,5,0.138,9,0.281,10,1.37,14,0.019,22,0.36,24,1.046,28,0.321,34,1.605,35,1.455,40,0.333,41,0.256,50,1.547,52,0.013,53,0.013,130,0.448,185,1.204,186,0.822,187,1.096,199,1.204,230,1.458,303,2.223,304,2.223,305,2.094,307,1.978,310,1.527,372,2.467,650,2.913,656,2.533,658,2.368,667,3.84,695,2.368,713,3.103,714,2.368,715,3.813,716,3.743,717,3.573,718,4.506,720,2.223,721,3.703,722,3.32,723,2.223,724,2.533,725,3.573,726,2.913,727,3.573,728,4.231]],["title/entities/FollowEntity.html",[371,1.488,429,2.088]],["body/entities/FollowEntity.html",[3,0.245,4,0.245,5,0.163,9,0.332,13,1.503,14,0.018,22,0.569,28,0.245,40,0.245,41,0.195,52,0.015,53,0.015,130,0.485,142,2.625,186,0.971,203,1.597,251,2.511,371,2.458,377,2.806,400,4.002,402,4.292,412,1.993,429,3.45,530,4.299,532,5.134,729,4.299,730,5.75,731,4.997,732,4.997,733,4.997]],["title/interfaces/IPolicyHandler.html",[716,1.96,720,1.96]],["body/interfaces/IPolicyHandler.html",[3,0.208,4,0.208,5,0.138,9,0.282,10,1.373,14,0.019,22,0.361,24,1.048,28,0.321,34,1.608,35,1.458,40,0.334,41,0.256,50,1.549,52,0.013,53,0.013,130,0.449,185,1.207,186,0.824,187,1.099,230,1.46,303,2.228,304,2.228,305,2.099,307,1.983,310,1.531,372,2.469,650,2.917,656,2.539,658,2.373,667,3.842,695,2.373,713,3.108,714,2.373,715,3.676,716,3.745,717,3.579,718,4.509,720,2.228,721,3.934,722,3.325,723,2.228,724,2.539,725,3.579,726,2.228,727,3.579,734,4.24,735,4.24]],["title/injectables/JwtAuthGuard.html",[178,1.062,736,2.61]],["body/injectables/JwtAuthGuard.html",[3,0.221,4,0.221,5,0.147,7,1.116,9,0.3,10,1.429,14,0.019,22,0.492,24,1.116,28,0.329,29,1.064,40,0.221,41,0.176,42,1.998,45,2.526,50,1.363,52,0.014,53,0.014,130,0.419,149,1.998,178,1.645,179,2.111,185,1.645,186,1.124,187,1.498,328,1.712,606,3.157,616,3.727,624,4.442,736,4.044,737,5.488,738,3.883,739,4.044,740,4.974,741,3.883,742,6.12,743,4.514,744,4.974,745,5.167,746,4.514,747,3.883,748,3.157,749,4.514,750,3.467,751,4.514,752,3.883,753,4.514,754,3.883,755,4.974,756,4.514,757,3.883,758,4.514,759,4.514]],["title/injectables/JwtStrategy.html",[178,1.062,596,2.234]],["body/injectables/JwtStrategy.html",[3,0.185,4,0.185,5,0.123,7,1.273,9,0.252,10,1.273,11,2.334,14,0.019,18,3.3,22,0.438,24,1.273,27,1.772,28,0.321,29,0.894,40,0.185,41,0.228,42,2.78,43,2.737,46,1.466,52,0.012,53,0.012,74,4.933,75,2.443,130,0.373,149,1.678,178,1.466,179,1.772,185,1.466,186,1.002,187,1.335,191,2.55,241,2.121,328,1.954,369,1.772,377,1.591,596,3.085,597,3.343,606,2.651,610,3.26,616,4.233,619,3.26,633,3.958,634,4.738,752,3.26,754,3.26,760,3.26,761,5.853,762,4.432,763,3.79,764,3.79,765,5.152,766,6.568,767,6.28,768,3.79,769,5.152,770,5.152,771,4.432,772,5.152,773,5.152,774,3.958,775,3.26,776,3.79,777,3.79,778,3.26,779,3.79,780,3.79,781,3.79,782,3.79,783,3.79,784,3.79,785,5.152,786,5.152,787,5.152]],["title/classes/LoginDto.html",[41,0.146,788,2.234]],["body/classes/LoginDto.html",[3,0.23,4,0.23,5,0.153,9,0.312,13,1.057,14,0.018,22,0.4,28,0.318,32,1.337,40,0.29,41,0.275,46,2.003,47,1.097,52,0.014,53,0.014,130,0.471,138,2.626,157,1.607,199,1.337,203,1.537,207,2.723,208,1.875,209,2.878,210,2.774,211,1.783,249,2.631,644,2.626,704,3.029,788,3.553,789,3.611,790,4.401,791,4.7,792,3.553,793,2.815,794,3.287,795,3.553,796,2.815]],["title/classes/PasswordTransformer.html",[41,0.146,797,2.61]],["body/classes/PasswordTransformer.html",[3,0.218,4,0.218,5,0.145,7,1.566,9,0.295,10,1.416,14,0.018,22,0.487,24,1.416,28,0.28,40,0.218,41,0.247,43,2.678,47,1.411,50,1.35,52,0.014,53,0.014,130,0.415,138,2.536,185,1.63,186,1.113,187,1.484,199,1.266,208,2.284,412,1.774,715,3.205,797,4.006,798,3.826,799,6.335,800,5.727,801,4.448,802,5.727,803,5.755,804,6.201,805,5.727,806,4.448,807,5.727,808,4.927,809,3.826,810,4.448]],["title/classes/PatchArticlePolicyHandler.html",[41,0.146,304,1.96]],["body/classes/PatchArticlePolicyHandler.html",[3,0.207,4,0.207,5,0.138,9,0.281,10,1.37,14,0.019,22,0.36,24,1.046,28,0.321,34,1.605,35,1.455,40,0.333,41,0.256,50,1.547,52,0.013,53,0.013,130,0.448,185,1.204,186,0.822,187,1.096,199,1.204,230,1.458,303,2.223,304,2.913,305,2.094,307,1.978,310,1.527,372,2.467,650,2.913,656,2.533,658,2.368,667,3.84,695,2.368,713,3.103,714,2.368,715,3.813,716,3.743,717,3.573,718,4.506,720,2.223,721,3.703,722,3.32,723,2.223,724,2.533,725,3.573,726,2.223,727,3.573,811,4.231]],["title/classes/PatchUserDto.html",[41,0.146,812,2.405]],["body/classes/PatchUserDto.html",[3,0.205,4,0.205,5,0.136,7,1.036,9,0.278,13,0.942,14,0.019,22,0.357,28,0.301,32,1.193,40,0.27,41,0.272,46,2.052,47,1.257,52,0.013,53,0.013,130,0.446,136,2.198,138,2.44,157,1.679,199,1.193,203,1.428,207,2.835,208,1.672,209,3.087,210,2.577,211,1.59,243,2.895,644,2.44,704,2.702,792,3.3,793,2.51,795,4.068,796,2.51,812,3.552,813,4.233,814,3.22,815,4.74,816,4.215,817,4.192,818,3.854,819,4.74,820,3.606,821,3.854,822,3.606,823,3.552,824,3.22,825,3.606]],["title/classes/PatchUserPolicyHandler.html",[41,0.146,305,1.847]],["body/classes/PatchUserPolicyHandler.html",[3,0.207,4,0.207,5,0.137,9,0.28,10,1.368,14,0.019,22,0.359,24,1.043,28,0.321,34,1.601,35,1.452,40,0.333,41,0.256,50,1.546,52,0.013,53,0.013,130,0.448,185,1.201,186,0.821,187,1.094,199,1.201,230,1.456,303,2.218,304,2.218,305,2.74,307,1.974,310,1.524,372,2.464,650,2.909,656,2.527,658,2.362,667,3.839,695,2.362,713,3.098,714,2.362,715,3.81,716,3.741,717,3.568,718,4.503,720,2.218,721,3.927,722,3.315,723,2.218,724,2.527,725,3.568,726,2.218,727,3.568,826,4.221]],["title/guards/PoliciesGuard.html",[301,2.088,739,2.61]],["body/guards/PoliciesGuard.html",[3,0.195,4,0.195,5,0.129,9,0.264,10,1.316,11,2.393,14,0.019,22,0.511,24,1.316,27,2.49,28,0.327,29,0.939,40,0.195,41,0.155,42,1.762,45,2.228,50,1.415,52,0.013,53,0.013,130,0.435,157,0.984,178,1.515,185,1.708,186,1.167,187,1.555,191,3.171,300,2.784,301,2.98,307,1.861,328,2.276,425,3.474,602,3.058,650,3.509,667,3.366,695,2.228,715,2.228,723,3.366,724,2.384,740,5.512,741,3.424,742,5.912,744,4.581,745,4.922,747,3.424,748,2.784,757,3.424,827,3.981,828,3.424,829,5.325,830,3.981,831,3.981,832,5.325,833,3.981,834,5.325,835,4.091,836,3.424,837,3.981,838,3.981,839,3.981,840,3.981,841,3.981,842,3.981,843,3.058,844,3.981,845,3.981]],["title/controllers/ProfileController.html",[0,1.488,846,2.61]],["body/controllers/ProfileController.html",[0,1.146,2,1.146,3,0.141,4,0.141,5,0.093,7,1.807,9,0.191,10,1.047,11,2.673,13,1.131,14,0.018,18,3.522,19,3.517,20,3.705,22,0.428,24,1.243,28,0.313,29,0.678,30,2.536,31,4.081,32,0.818,40,0.141,41,0.112,43,1.344,45,1.609,46,0.818,47,1.24,48,3.751,49,3.241,50,1.186,52,0.01,53,0.01,130,0.365,136,2.213,185,1.431,186,0.978,187,1.303,216,1.853,233,3.643,234,4.753,236,4.753,237,3.863,238,4.753,239,4.753,241,2.814,251,2.305,254,1.609,257,4.688,292,2.208,294,2.208,295,1.853,298,1.853,299,2.208,300,2.011,301,1.609,302,2.011,305,2.489,306,2.208,307,1.344,308,1.853,309,2.473,322,2.642,325,3.863,328,1.907,336,3.253,337,3.253,846,2.962,847,2.473,848,2.473,849,4.326,850,4.326,851,4.326,852,2.473,853,6.016,854,2.875,855,4.262,856,5.516,857,2.875,858,2.473,859,2.473,860,2.875,861,2.473,862,2.875,863,5.548,864,2.875,865,3.011,866,2.473,867,2.875,868,2.875,869,2.473,870,4.326,871,2.875,872,5.028,873,2.875,874,2.875,875,2.875,876,2.875]],["title/modules/ProfileModule.html",[54,1.347,64,2.405]],["body/modules/ProfileModule.html",[2,2.386,3,0.233,4,0.233,5,0.155,14,0.018,28,0.358,29,1.123,40,0.233,41,0.186,52,0.014,53,0.014,54,2.16,56,2.227,57,2.648,64,4.772,67,3.143,68,2.502,69,2.357,71,2.961,72,2.851,79,2.851,81,2.108,230,1.123,310,1.719,425,3.57,428,3.658,429,3.348,613,3.658,846,4.574,865,4.319,866,4.096,877,4.096,878,4.096,879,4.762,880,4.096,881,4.762]],["title/injectables/ProfileService.html",[178,1.062,865,2.234]],["body/injectables/ProfileService.html",[3,0.137,4,0.137,5,0.091,9,0.186,10,1.029,11,2.657,14,0.019,22,0.498,24,1.356,28,0.287,29,0.662,35,0.966,40,0.137,41,0.11,42,1.843,46,1.184,47,1.232,50,1.293,52,0.01,53,0.01,81,1.243,128,1.964,130,0.425,136,1.978,149,1.243,157,1.647,159,2.447,178,1.184,179,1.313,185,1.667,186,1.139,187,1.518,191,2.06,194,1.964,230,0.981,241,2.776,251,2.291,254,1.572,257,4.741,310,1.014,322,3.337,328,2.327,369,1.313,412,1.12,429,2.33,446,4.442,447,3.198,448,4.267,479,4.267,480,2.416,481,1.964,484,2.157,485,2.416,501,3.81,532,3.81,551,4.097,553,3.81,554,4.267,678,2.416,683,5.463,721,1.682,730,4.267,849,3.581,850,3.581,851,3.581,852,3.581,853,5.987,855,4.214,856,3.81,858,3.581,861,3.581,865,2.493,880,2.416,882,2.416,883,4.163,884,2.416,885,2.808,886,4.163,887,2.808,888,2.808,889,2.808,890,2.808,891,2.808,892,2.808,893,2.416,894,4.96,895,4.163,896,2.808,897,5.278,898,2.808,899,4.163,900,4.163,901,4.163,902,4.163,903,2.808,904,2.808,905,2.808,906,2.808,907,2.808,908,2.808]],["title/classes/RegisterDto.html",[41,0.146,909,2.405]],["body/classes/RegisterDto.html",[3,0.223,4,0.223,5,0.148,9,0.303,13,1.025,14,0.019,22,0.388,28,0.314,32,1.297,40,0.285,41,0.272,46,2.03,47,1.186,52,0.014,53,0.014,130,0.465,136,2.321,138,2.576,157,1.584,199,1.297,203,1.508,207,2.782,208,1.818,209,2.989,210,2.721,211,1.729,249,2.551,644,2.576,704,2.938,792,3.484,793,2.73,795,3.838,796,2.73,818,4.07,909,3.75,910,3.502,911,4.352,912,4.559,913,3.502]],["title/controllers/TagController.html",[0,1.488,914,2.61]],["body/controllers/TagController.html",[0,1.787,2,1.787,3,0.219,4,0.219,5,0.146,7,1.658,9,0.298,10,1.422,11,2.535,13,1.007,14,0.018,15,3.442,16,3.446,18,3.525,20,3.446,21,3.709,22,0.381,24,1.107,28,0.328,29,1.056,30,3.446,31,3.807,32,1.275,38,3.446,39,3.134,40,0.219,41,0.175,45,2.508,46,1.275,48,3.221,50,1.056,52,0.014,53,0.014,216,2.888,241,2.508,295,2.888,322,2.354,328,1.699,426,3.34,544,5.547,914,4.025,915,3.854,916,5.771,917,5.771,918,3.442,919,4.48,920,3.854,921,4.48,922,4.48,923,3.442,924,4.48,925,4.48,926,3.854]],["title/entities/TagEntity.html",[371,1.488,431,2.234]],["body/entities/TagEntity.html",[3,0.244,4,0.244,5,0.162,7,1.232,9,0.331,13,1.383,14,0.018,22,0.523,28,0.244,40,0.244,41,0.26,47,1.138,52,0.015,53,0.015,130,0.446,142,2.618,149,2.724,186,1.355,203,1.594,251,2.116,371,2.781,377,2.803,400,3.997,402,3.685,412,1.988,431,3.685,499,4.304,544,3.828,927,4.287,928,4.983,929,4.287,930,4.983,931,4.287]],["title/modules/TagModule.html",[54,1.347,65,2.405]],["body/modules/TagModule.html",[2,2.462,3,0.245,4,0.245,5,0.163,14,0.018,28,0.351,29,1.181,40,0.245,41,0.196,52,0.015,53,0.015,54,2.229,56,2.343,57,2.733,65,4.708,67,3.244,68,2.633,69,2.48,71,3.056,72,3,79,3,81,2.218,426,3.838,431,3,914,4.68,920,4.31,932,5.011,933,5.011,934,5.011,935,5.011,936,4.31,937,5.011]],["title/injectables/TagService.html",[178,1.062,426,1.96]],["body/injectables/TagService.html",[3,0.197,4,0.197,5,0.131,9,0.267,10,1.324,11,2.748,14,0.019,22,0.513,24,1.324,27,3.007,28,0.344,29,0.947,40,0.197,41,0.157,42,2.371,46,1.524,50,1.263,52,0.013,53,0.013,81,1.778,84,2.588,85,3.452,122,2.809,130,0.388,159,1.602,165,4.608,178,1.524,179,1.878,183,6.051,185,1.524,186,1.041,187,1.388,189,3.455,190,3.455,191,2.651,201,1.878,317,3.085,322,2.814,328,1.523,412,1.602,426,2.814,431,3.208,446,4.497,481,2.809,499,4.216,538,3.455,543,3.085,707,4.497,916,5.531,926,3.455,936,3.455,938,3.455,939,5.357,940,4.016,941,4.016,942,5.357,943,5.357,944,4.016,945,4.016,946,4.016,947,4.016,948,4.016,949,3.455,950,4.016,951,4.016,952,4.016,953,5.357,954,4.016,955,4.016,956,4.016,957,3.455]],["title/controllers/UserController.html",[0,1.488,958,2.61]],["body/controllers/UserController.html",[0,1.451,2,1.451,3,0.178,4,0.178,5,0.118,7,1.526,9,0.242,10,1.238,11,2.285,13,1.126,14,0.019,16,3,18,3.402,20,3,21,3.229,22,0.426,24,1.526,27,2.679,28,0.336,29,0.858,30,3,31,3.431,32,1.035,34,1.38,35,1.251,40,0.178,41,0.142,43,1.701,45,2.036,46,1.035,48,2.804,50,1.181,52,0.012,53,0.012,130,0.264,157,1.818,185,1.426,186,0.974,187,1.298,204,2.343,216,2.345,230,0.858,243,3.244,251,1.971,290,3.849,293,5.756,295,2.345,308,2.345,325,2.795,453,3.849,597,2.679,669,3.13,812,3.979,918,2.795,923,2.795,958,3.504,959,3.13,960,5.73,961,5.01,962,3.639,963,3.639,964,3.639,965,4.31,966,4.742,967,3.639,968,3.639,969,4.31,970,4.31,971,5.01,972,4.31,973,6.474,974,3.849,975,3.13,976,3.13,977,3.639,978,2.345,979,2.795,980,3.639,981,3.639,982,3.639,983,3.13,984,3.639,985,3.639]],["title/classes/UserDto.html",[41,0.146,816,2.405]],["body/classes/UserDto.html",[3,0.181,4,0.181,5,0.12,9,0.246,13,1.465,14,0.019,22,0.554,28,0.283,32,1.054,40,0.248,41,0.254,46,2.132,47,1.332,52,0.012,53,0.012,130,0.499,136,2.599,138,2.885,157,1.254,199,1.054,203,1.314,207,2.748,208,1.478,209,2.979,210,2.372,211,1.405,243,1.947,644,2.885,792,3.038,793,2.219,795,4.311,796,2.219,812,2.388,813,5.169,814,2.846,815,3.187,816,4.01,818,3.548,819,4.364,820,3.187,821,4.557,822,3.187,823,4.2,824,2.846,825,3.187,986,3.705,987,3.705,988,3.705,989,3.705,990,3.705,991,3.705,992,2.846,993,3.705,994,3.705,995,3.705]],["title/entities/UserEntity.html",[230,0.88,371,1.488]],["body/entities/UserEntity.html",[3,0.143,4,0.143,5,0.095,7,0.722,9,0.194,13,1.538,14,0.019,22,0.582,28,0.305,40,0.143,41,0.218,47,1.265,52,0.01,53,0.01,130,0.496,136,2.375,138,2.636,140,2.762,142,1.535,149,1.897,157,1.254,159,1.165,186,0.833,201,2.004,203,1.11,208,2.024,213,2.566,217,3.55,230,1.01,251,1.474,279,3.271,369,1.366,371,2.482,372,2.565,377,2.131,387,3.129,388,4.366,393,1.635,396,2.512,400,3.039,402,4.46,411,4.809,412,1.165,506,4.366,542,3.686,570,3.686,607,2.937,609,2.043,639,2.043,643,3.837,644,2.636,658,1.635,672,2.762,797,3.91,803,3.686,821,4.164,823,3.271,929,2.512,931,2.512,996,2.512,997,2.921,998,2.921,999,2.921,1000,2.921,1001,2.921,1002,2.921,1003,2.921,1004,3.292,1005,2.921,1006,4.295,1007,3.686,1008,2.921,1009,4.285,1010,4.285,1011,2.512,1012,4.285,1013,2.921,1014,2.921,1015,4.285,1016,4.285,1017,4.285,1018,4.285,1019,4.285,1020,2.921,1021,3.686,1022,3.292,1023,3.686,1024,3.686,1025,2.921,1026,4.285,1027,4.285,1028,4.285,1029,2.921,1030,2.921]],["title/classes/UserLoginDto.html",[41,0.146,790,2.405]],["body/classes/UserLoginDto.html",[3,0.219,4,0.219,5,0.145,7,1.105,9,0.297,13,1.292,14,0.018,22,0.489,28,0.311,32,1.272,40,0.281,41,0.277,46,2.054,47,1.24,52,0.014,53,0.014,130,0.486,138,3.069,157,1.105,199,1.272,203,1.489,207,2.673,208,1.783,209,2.811,210,2.687,211,1.695,249,3.215,644,3.069,788,2.676,789,3.433,790,4.32,792,3.44,793,2.676,794,4.018,795,4.013,796,2.676,992,3.433,1031,3.845,1032,4.469,1033,4.469]],["title/classes/UserRegistrationDto.html",[41,0.146,911,2.405]],["body/classes/UserRegistrationDto.html",[3,0.206,4,0.206,5,0.137,7,1.038,9,0.279,13,1.386,14,0.019,22,0.524,28,0.302,32,1.195,40,0.27,41,0.272,46,2.096,47,1.291,52,0.013,53,0.013,130,0.493,136,2.711,138,3.01,157,1.038,199,1.195,203,1.43,207,2.711,208,1.676,209,2.898,210,2.581,211,1.594,249,3.089,644,3.01,792,3.305,793,2.516,795,4.179,796,2.516,818,3.86,909,2.708,910,3.227,911,4.219,913,4.24,992,3.227,1031,3.614,1034,4.201,1035,4.201,1036,4.201,1037,4.201]],["title/entities/UserRoles.html",[371,1.488,607,1.96]],["body/entities/UserRoles.html",[3,0.19,4,0.19,5,0.126,7,0.959,8,4.02,9,0.258,13,1.332,14,0.018,22,0.504,28,0.29,34,1.471,35,1.334,40,0.19,41,0.231,52,0.012,53,0.012,130,0.46,142,2.038,157,1.723,203,1.356,230,1.495,251,1.8,254,2.929,371,2.721,377,2.487,379,2.98,384,2.98,393,3.548,400,3.547,402,4.246,410,4.02,412,1.547,607,2.75,635,4.502,643,3.373,657,5.695,672,4.494,673,2.98,677,4.502,848,4.502,856,4.87,978,2.5,1004,4.02,1011,3.337,1021,4.502,1022,4.02,1023,4.502,1024,4.502,1038,5.454,1039,3.337,1040,3.879,1041,6.34,1042,3.879,1043,5.233,1044,5.233,1045,4.02,1046,5.233,1047,5.233,1048,5.233,1049,3.879]],["title/controllers/UsersController.html",[0,1.488,1050,2.61]],["body/controllers/UsersController.html",[0,1.691,2,0.869,3,0.107,4,0.107,5,0.071,7,1.795,9,0.145,10,0.848,11,2.62,13,1.081,14,0.019,16,2.879,18,3.329,19,2.399,20,3.604,21,3.099,22,0.409,24,1.372,27,2.963,28,0.321,29,0.514,30,2.054,31,3.869,32,0.62,34,0.827,35,0.75,38,2.539,39,1.524,40,0.107,41,0.085,42,1.518,43,2.716,44,1.305,46,0.976,47,1.074,48,3.546,49,2.21,50,1.134,52,0.008,53,0.008,130,0.349,136,2.657,140,2.21,157,1.801,159,0.869,185,1.368,186,0.935,187,1.246,191,1.697,204,1.983,216,1.405,230,0.514,234,3.694,236,3.694,237,2.634,238,3.694,239,3.694,243,2.917,246,2.399,248,4.136,249,2.691,254,2.926,292,2.634,294,1.674,295,1.405,298,1.405,299,1.674,300,1.524,301,1.22,302,1.524,306,1.674,307,1.019,322,2.228,328,1.608,336,1.674,337,1.674,551,1.524,595,2.926,597,2.248,624,3.257,634,2.399,639,3.657,644,1.518,726,1.802,762,2.95,788,3.131,794,4.33,821,2.399,823,2.21,859,1.875,869,1.875,870,2.95,909,3.37,913,4.016,917,4.776,918,2.634,923,2.634,966,2.634,969,2.95,974,2.634,978,1.405,979,1.674,1050,2.399,1051,1.875,1052,4.24,1053,4.24,1054,2.179,1055,2.179,1056,2.179,1057,2.179,1058,3.429,1059,3.429,1060,2.95,1061,2.95,1062,2.179,1063,2.179,1064,3.429,1065,2.634,1066,2.179,1067,2.179,1068,2.179,1069,2.95,1070,2.179,1071,2.179,1072,4.808,1073,2.179,1074,2.95,1075,1.875,1076,2.179,1077,2.179,1078,1.875,1079,1.875,1080,2.179,1081,2.179,1082,2.179,1083,3.429,1084,3.429,1085,3.429,1086,3.429,1087,3.429,1088,2.179,1089,2.179,1090,2.179,1091,1.875,1092,2.179,1093,2.179]],["title/modules/UsersModule.html",[54,1.347,66,2.405]],["body/modules/UsersModule.html",[2,2.211,3,0.207,4,0.207,5,0.138,14,0.019,28,0.366,29,0.997,40,0.207,41,0.165,52,0.013,53,0.013,54,2.002,56,1.978,57,2.454,62,4.187,66,4.754,67,2.913,68,2.223,69,2.094,71,2.744,72,3.32,79,2.533,81,1.873,93,3.639,157,1.046,230,0.997,301,3.103,302,2.959,425,3.461,428,3.25,597,3.269,607,2.913,609,2.959,613,3.25,736,3.878,748,2.959,958,4.325,978,2.727,979,3.25,1050,4.325,1094,4.231,1095,4.231,1096,4.231,1097,4.231,1098,5.544,1099,4.231,1100,4.231,1101,4.231,1102,4.231,1103,4.231,1104,4.231]],["title/injectables/UsersService.html",[178,1.062,597,1.745]],["body/injectables/UsersService.html",[3,0.094,4,0.094,5,0.062,7,0.764,9,0.127,10,0.764,11,2.532,14,0.019,16,1.146,21,1.233,22,0.489,24,1.618,26,1.47,27,3.263,28,0.305,29,0.451,34,0.726,35,0.658,40,0.094,41,0.075,42,1.977,43,2.912,44,1.851,46,0.88,47,1.239,49,1.993,50,1.301,52,0.007,53,0.007,81,0.847,130,0.416,136,2.699,138,2.757,140,3.379,157,1.833,159,1.955,178,0.88,179,0.895,185,1.634,186,1.153,187,1.488,191,1.53,230,0.451,243,3.2,246,3.124,251,1.898,254,3.088,290,3.431,322,2.576,328,1.859,377,1.633,393,1.071,412,0.763,446,4.148,447,2.988,453,1.47,481,1.338,484,1.47,501,1.47,505,1.646,551,3.124,553,1.47,564,1.338,567,1.646,597,1.446,607,2.044,609,1.338,639,2.162,643,2.507,644,2.17,662,1.47,672,1.233,775,2.66,788,1.851,790,2.878,794,1.338,808,2.66,809,2.66,816,1.233,823,1.233,884,1.646,911,3.159,949,2.66,957,3.346,965,2.66,966,4.876,974,4.028,975,1.646,976,1.646,978,1.233,983,2.66,1004,2.375,1006,1.47,1007,1.646,1022,1.47,1045,2.375,1060,3.842,1061,2.66,1065,2.375,1074,3.346,1075,1.646,1078,1.646,1079,1.646,1105,1.646,1106,3.092,1107,3.092,1108,3.89,1109,3.89,1110,1.914,1111,3.092,1112,1.914,1113,3.092,1114,3.092,1115,1.914,1116,3.092,1117,3.092,1118,4.466,1119,1.914,1120,3.092,1121,1.914,1122,5.243,1123,3.092,1124,1.914,1125,3.092,1126,1.914,1127,3.092,1128,1.914,1129,1.914,1130,3.092,1131,3.092,1132,3.092,1133,1.914,1134,1.914,1135,1.914,1136,1.914,1137,1.914,1138,1.914,1139,1.914,1140,1.914,1141,1.914,1142,1.914,1143,1.914,1144,1.914,1145,1.914,1146,1.914,1147,1.914,1148,3.346,1149,1.914,1150,2.66,1151,1.646,1152,1.914,1153,1.914,1154,1.914,1155,1.914,1156,1.914,1157,1.914,1158,1.646,1159,1.914,1160,1.914,1161,1.914,1162,1.646,1163,1.914,1164,1.914,1165,1.914,1166,2.66,1167,1.914,1168,1.914,1169,1.914,1170,1.914,1171,3.092,1172,1.914,1173,1.914,1174,1.914,1175,1.914,1176,1.914]],["title/coverage.html",[1177,4.385]],["body/coverage.html",[0,2.416,1,1.897,5,0.088,6,2.333,14,0.018,36,1.624,38,1.624,41,0.283,52,0.01,53,0.01,71,1.342,130,0.197,157,0.67,159,1.082,178,1.878,180,2.333,197,2.083,198,1.748,200,3.475,201,1.897,202,3.116,212,1.748,214,1.897,215,2.333,230,0.639,244,1.748,274,1.748,282,1.748,298,1.748,301,1.518,303,1.425,304,1.425,305,1.342,308,1.748,311,1.624,327,1.624,357,3.116,371,2.416,372,1.082,373,2.333,387,1.518,398,5.857,416,2.333,417,2.333,425,1.342,426,1.425,429,1.518,431,1.624,437,2.333,585,2.333,586,2.333,595,1.518,596,1.624,597,1.268,598,2.083,607,1.425,623,2.333,646,2.083,696,2.333,707,1.897,708,2.333,709,2.333,713,3.231,714,3.231,716,1.425,720,1.425,726,1.425,729,2.333,736,1.897,737,2.333,738,2.333,739,1.897,750,2.083,760,2.333,788,1.624,789,3.116,790,1.748,797,1.897,798,2.333,812,1.748,813,3.116,814,3.116,816,1.748,828,2.333,835,2.083,843,2.083,846,1.897,847,2.333,865,1.624,882,2.333,909,1.748,910,3.116,911,1.748,914,1.897,915,2.333,927,2.333,938,2.333,958,1.897,959,2.333,996,2.333,1038,2.333,1039,2.333,1050,1.897,1051,2.333,1105,2.333,1177,2.333,1178,2.712,1179,2.712,1180,2.333,1181,6.116,1182,2.333,1183,7.11,1184,7.161,1185,2.712,1186,5.392,1187,2.712,1188,2.712,1189,2.712,1190,2.712,1191,4.056,1192,6.985,1193,2.712,1194,3.489,1195,2.333,1196,4.056,1197,2.712,1198,2.712,1199,3.489,1200,3.489,1201,3.489,1202,4.858,1203,2.333,1204,3.116,1205,2.333,1206,4.434,1207,2.333,1208,2.333,1209,6.278,1210,2.333,1211,2.333,1212,2.333,1213,2.712,1214,2.712,1215,2.712,1216,2.712,1217,2.712,1218,2.712,1219,2.333,1220,2.712,1221,2.712,1222,2.712,1223,2.333]],["title/dependencies.html",[57,1.987,1224,2.678]],["body/dependencies.html",[5,0.134,14,0.019,29,0.975,32,1.176,41,0.213,52,0.013,53,0.013,57,1.83,75,2.665,77,3.557,78,3.176,81,1.83,82,3.557,84,2.665,85,3.941,89,3.557,90,3.557,208,1.649,211,1.568,412,1.649,418,3.176,482,3.557,604,3.176,606,2.892,616,2.665,655,3.557,748,2.892,778,3.557,1006,3.176,1225,4.135,1226,7.192,1227,4.135,1228,5.461,1229,4.135,1230,4.135,1231,4.135,1232,4.135,1233,4.135,1234,4.135,1235,4.135,1236,4.135,1237,4.135,1238,5.461,1239,4.698,1240,4.135,1241,4.135,1242,4.135,1243,4.135,1244,4.135,1245,4.135,1246,4.135,1247,4.135,1248,4.135,1249,6.505,1250,4.135,1251,4.135,1252,3.557,1253,4.135,1254,4.135,1255,4.135,1256,4.135,1257,4.135,1258,4.135,1259,4.135,1260,4.135,1261,4.135,1262,4.135,1263,4.135,1264,4.135,1265,4.135,1266,4.135,1267,4.135,1268,4.135,1269,4.135,1270,4.135,1271,4.135,1272,4.135,1273,4.135,1274,4.135,1275,4.135,1276,4.135,1277,4.135,1278,4.135,1279,4.135,1280,4.135,1281,4.135]],["title/miscellaneous/functions.html",[1282,1.864,1283,3.862]],["body/miscellaneous/functions.html",[9,0.392,14,0.016,52,0.016,53,0.016,1206,4.536,1207,6.173,1282,3.536,1283,5.079,1284,5.079]],["title/index.html",[9,0.207,1285,3.114,1286,2.678]],["body/index.html",[5,0.129,7,0.781,8,3.817,14,0.018,35,1.362,47,0.364,48,1.1,52,0.007,53,0.007,54,1.794,57,1.753,69,2.459,84,2.923,85,2.036,101,1.691,103,3.042,105,1.691,107,1.691,109,1.691,111,1.691,113,1.691,115,1.691,117,1.691,119,1.691,124,1.691,128,3.712,130,0.229,136,0.784,138,1.398,140,4.121,147,3.407,150,3.042,159,0.784,181,3.407,186,0.382,187,0.509,194,4.39,197,2.426,246,2.209,368,2.923,374,1.1,393,2.781,412,2.313,632,1.691,633,2.426,634,1.375,636,1.691,637,2.717,638,1.691,642,2.717,662,3.817,675,1.691,687,1.691,771,2.717,774,1.51,824,1.51,836,1.691,855,1.51,893,3.902,897,2.717,972,1.691,1045,3.042,1069,1.691,1091,3.902,1148,4.274,1150,1.691,1151,1.691,1158,1.691,1162,1.691,1166,1.691,1181,2.717,1204,3.817,1223,1.691,1252,2.717,1286,1.691,1287,3.159,1288,1.965,1289,3.159,1290,3.96,1291,1.965,1292,1.965,1293,1.965,1294,3.159,1295,1.965,1296,3.159,1297,1.965,1298,1.965,1299,3.96,1300,1.965,1301,3.159,1302,4.969,1303,5.307,1304,4.536,1305,5.578,1306,3.159,1307,3.96,1308,3.159,1309,3.159,1310,3.96,1311,1.965,1312,5.578,1313,1.965,1314,3.159,1315,1.965,1316,1.965,1317,5.307,1318,1.965,1319,1.965,1320,1.965,1321,1.965,1322,4.536,1323,3.159,1324,6.587,1325,4.536,1326,4.536,1327,1.965,1328,3.159,1329,1.965,1330,1.965,1331,1.965,1332,5.578,1333,3.159,1334,3.159,1335,3.159,1336,3.96,1337,3.159,1338,1.965,1339,1.965,1340,1.965,1341,1.965,1342,1.965,1343,6.142,1344,4.536,1345,1.965,1346,1.965,1347,1.965,1348,1.965,1349,3.159,1350,1.965,1351,1.965,1352,1.965,1353,1.965,1354,1.965,1355,3.159,1356,1.965,1357,1.965,1358,3.96,1359,3.96,1360,5.8,1361,1.965,1362,4.536,1363,1.965,1364,1.965,1365,3.96,1366,1.965,1367,1.965,1368,1.965,1369,1.965,1370,3.159,1371,1.965,1372,5.8,1373,1.965,1374,1.965,1375,1.965,1376,1.965,1377,1.965,1378,3.159,1379,1.965,1380,1.965,1381,1.965,1382,1.965,1383,1.965,1384,1.965,1385,1.965,1386,1.965,1387,4.536,1388,1.965,1389,1.965,1390,3.159,1391,1.965,1392,1.965,1393,1.965,1394,1.965,1395,1.965,1396,1.965,1397,1.965,1398,1.965,1399,1.965,1400,3.159,1401,1.965,1402,1.965,1403,1.965,1404,1.965,1405,3.159,1406,1.965,1407,1.965,1408,1.965,1409,1.965,1410,3.159,1411,3.159,1412,1.965,1413,1.965,1414,1.965,1415,1.965,1416,1.691,1417,1.965,1418,1.965,1419,3.159,1420,1.965,1421,1.965,1422,1.965,1423,3.159,1424,1.965,1425,1.965,1426,1.965,1427,3.96,1428,3.96,1429,1.965,1430,1.965,1431,1.965,1432,3.159,1433,3.159,1434,1.965,1435,1.965,1436,1.965,1437,1.965,1438,3.159,1439,1.965,1440,1.965,1441,1.965,1442,1.965,1443,1.965,1444,3.159,1445,1.965,1446,1.965,1447,1.965,1448,1.965,1449,1.965,1450,3.159,1451,1.965,1452,3.159,1453,1.965,1454,1.965,1455,1.965,1456,1.965,1457,1.965,1458,1.965,1459,1.965,1460,3.159,1461,4.536,1462,1.965,1463,1.965,1464,1.965,1465,3.96,1466,3.96,1467,3.159,1468,1.965,1469,1.965,1470,1.965,1471,1.965,1472,1.965,1473,1.965,1474,1.965,1475,1.965,1476,1.965,1477,1.965,1478,1.965,1479,1.965,1480,1.965,1481,1.965,1482,1.965,1483,1.965,1484,3.96,1485,3.159,1486,1.965,1487,3.96,1488,3.159,1489,3.159,1490,3.159,1491,3.159,1492,1.965,1493,3.159,1494,3.159,1495,3.159,1496,3.159,1497,1.965,1498,1.965,1499,1.965,1500,2.717,1501,3.159,1502,1.965,1503,1.965,1504,1.965,1505,1.965,1506,1.965,1507,1.965,1508,1.965,1509,1.965,1510,1.965,1511,1.965,1512,1.965,1513,1.965,1514,1.965,1515,1.965,1516,1.965,1517,1.965,1518,1.965,1519,1.965,1520,1.965,1521,1.965,1522,1.965,1523,1.965,1524,1.965,1525,1.965,1526,1.965,1527,1.965,1528,1.965,1529,1.965,1530,1.691,1531,1.965,1532,1.965,1533,1.965,1534,1.965,1535,1.965,1536,1.965,1537,1.965,1538,1.691,1539,1.691,1540,1.965]],["title/modules.html",[56,2.383]],["body/modules.html",[14,0.015,52,0.015,53,0.015,55,3.786,56,2.531,61,3.489,62,3.241,63,3.489,64,3.489,65,3.489,66,3.489,1239,6.468,1530,6.468,1541,7.519,1542,7.519]],["title/overview.html",[1543,4.385]],["body/overview.html",[2,1.574,14,0.018,36,3.578,52,0.013,53,0.013,55,5.282,56,1.845,57,2.344,58,3.395,59,3.395,60,3.395,61,4.647,62,4.432,63,4.418,64,4.514,65,4.292,66,4.647,67,2.782,68,2.073,69,1.953,142,2.073,179,1.845,199,1.123,311,3.578,423,3.395,424,3.395,425,3.606,426,3.355,491,4.554,564,3.703,592,3.395,593,3.395,594,3.395,595,3.919,596,4.193,597,2.986,691,3.395,693,3.395,720,2.073,739,2.76,865,3.578,877,3.395,878,3.395,1543,3.395,1544,3.946,1545,3.946,1546,3.946]],["title/properties.html",[203,1.163,1224,2.678]],["body/properties.html",[14,0.018,52,0.016,53,0.016,203,1.515,374,3.273,1538,5.03,1539,5.03,1547,5.03,1548,5.848,1549,5.848,1550,5.848]],["title/miscellaneous/typealiases.html",[1282,1.864,1551,4.489]],["body/miscellaneous/typealiases.html",[9,0.368,14,0.017,52,0.016,53,0.016,130,0.402,646,4.259,650,2.913,654,4.77,660,5.646,667,3.449,713,3.103,714,3.913,716,2.913,722,4.187,723,3.449,843,4.259,1282,3.32,1552,5.545,1553,6.564,1554,6.564]],["title/miscellaneous/variables.html",[1282,1.864,1555,3.862]],["body/miscellaneous/variables.html",[7,1.185,9,0.227,14,0.019,18,1.794,38,2.87,47,1.213,50,1.13,52,0.011,53,0.011,71,2.372,103,3.682,128,2.388,130,0.519,149,2.122,157,1.484,159,1.361,186,0.664,194,4.588,196,2.936,230,0.805,241,1.91,298,3.089,307,2.241,308,3.089,328,1.295,369,1.596,377,2.326,393,4.127,564,4.2,595,1.91,596,2.044,598,2.622,602,2.622,607,2.518,643,2.2,644,1.511,672,3.089,673,3.682,723,1.794,745,2.622,750,3.682,755,2.936,774,3.682,804,6.344,835,3.682,970,2.936,1065,2.622,1180,2.936,1182,4.123,1194,2.936,1195,4.123,1199,2.936,1200,2.936,1201,4.764,1203,2.936,1204,4.613,1205,2.936,1206,2.622,1208,4.123,1210,4.123,1211,4.123,1212,4.123,1219,2.936,1282,2.044,1284,5.166,1416,2.936,1500,2.936,1547,2.936,1555,2.936,1556,4.793,1557,3.414,1558,3.414,1559,4.793,1560,3.414,1561,3.414,1562,4.793,1563,3.414,1564,3.414,1565,3.414,1566,3.414,1567,3.414,1568,3.414,1569,3.414,1570,3.414,1571,3.414,1572,3.414,1573,3.414,1574,4.793,1575,3.414,1576,3.414,1577,3.414,1578,3.414,1579,3.414,1580,3.414,1581,4.793]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":398,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":492,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":1548,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1183,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1192,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":564,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.6.5",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1184,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":1327,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1546,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1185,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":234,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["20m",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":1406,"title":{},"body":{"index.html":{}}}],["25",{"_index":1187,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":1010,"title":{},"body":{"entities/UserEntity.html":{}}}],["3.0.0",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["3/12",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1186,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1475,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1407,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["5/5",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":491,"title":{},"body":{"injectables/ArticleService.html":{},"overview.html":{}}}],["6.0.0",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1544,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1545,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":650,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":727,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["ability.can(useractionsenum.update",{"_index":725,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["abilitybuilder",{"_index":651,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":652,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1514,"title":{},"body":{"index.html":{}}}],["access",{"_index":677,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":1380,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1431,"title":{},"body":{"index.html":{}}}],["account",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1513,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1421,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1429,"title":{},"body":{"index.html":{}}}],["addarticletofavorites",{"_index":438,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addarticletofavorites(slug",{"_index":452,"title":{},"body":{"injectables/ArticleService.html":{}}}],["again",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":1411,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1552,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":1404,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1299,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1550,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1440,"title":{},"body":{"index.html":{}}}],["api",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":207,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isalpha()@isnotempty",{"_index":710,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isalphanumeric()@isnotempty",{"_index":994,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":988,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":205,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{}}}],["apiproperty()@isnotempty()@isalphanumeric",{"_index":1036,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":1031,"title":{},"body":{"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@isfqdn",{"_index":990,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@maxlength(255",{"_index":986,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":992,"title":{},"body":{"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@type(undefined)@validatenested",{"_index":704,"title":{},"body":{"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({required",{"_index":362,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1506,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":295,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apitags('articles",{"_index":320,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apitags('profiles",{"_index":867,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('tags",{"_index":921,"title":{},"body":{"controllers/TagController.html":{}}}],["apitags('user",{"_index":980,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1529,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":1098,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":667,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1296,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1532,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1553,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":1284,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1554,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../user.decorator.ts",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":1180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":180,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":184,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/article/article.controller.ts",{"_index":215,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["apps/api/src/article/article.controller.ts:100",{"_index":272,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:114",{"_index":291,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:140",{"_index":255,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:154",{"_index":280,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:170",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:195",{"_index":265,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:216",{"_index":269,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:239",{"_index":261,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:46",{"_index":275,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:60",{"_index":285,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:78",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.entity.ts",{"_index":373,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/article.entity.ts:16",{"_index":401,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:19",{"_index":403,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:22",{"_index":407,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:25",{"_index":397,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:28",{"_index":386,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:31",{"_index":395,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:34",{"_index":408,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:37",{"_index":406,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:40",{"_index":399,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:51",{"_index":383,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:54",{"_index":390,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.module.ts",{"_index":427,"title":{},"body":{"modules/ArticleModule.html":{}}}],["apps/api/src/article/article.service.ts",{"_index":437,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["apps/api/src/article/article.service.ts:113",{"_index":469,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:117",{"_index":474,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:149",{"_index":459,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:169",{"_index":478,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:189",{"_index":463,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:203",{"_index":454,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:22",{"_index":450,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:228",{"_index":473,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:233",{"_index":461,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:248",{"_index":467,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:279",{"_index":465,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:307",{"_index":458,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:311",{"_index":456,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:35",{"_index":476,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:43",{"_index":470,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/comment.entity.ts",{"_index":696,"title":{},"body":{"entities/CommentEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/comment.entity.ts:15",{"_index":702,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:18",{"_index":700,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:23",{"_index":697,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:26",{"_index":699,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:29",{"_index":701,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:32",{"_index":703,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/dto/article",{"_index":416,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/articles",{"_index":585,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/create",{"_index":200,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.module.ts:43",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":1194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:16",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:35",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":789,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:20",{"_index":1032,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:28",{"_index":1033,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:35",{"_index":791,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":910,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:21",{"_index":1034,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:29",{"_index":1037,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:37",{"_index":1035,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:44",{"_index":912,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":737,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:12",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":1199,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":646,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:22",{"_index":649,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":694,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":1200,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":828,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":831,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":833,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":830,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":713,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":1206,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/profile/follow.entity.ts",{"_index":729,"title":{},"body":{"entities/FollowEntity.html":{},"coverage.html":{}}}],["apps/api/src/profile/follow.entity.ts:12",{"_index":732,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:6",{"_index":733,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:9",{"_index":731,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/profile.controller.ts",{"_index":847,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.controller.ts:33",{"_index":860,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:56",{"_index":857,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:79",{"_index":864,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.module.ts",{"_index":879,"title":{},"body":{"modules/ProfileModule.html":{}}}],["apps/api/src/profile/profile.service.ts",{"_index":882,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.service.ts:11",{"_index":885,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:19",{"_index":889,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:41",{"_index":888,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:71",{"_index":890,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:97",{"_index":887,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/tag/dto/create",{"_index":708,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts",{"_index":915,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts:17",{"_index":919,"title":{},"body":{"controllers/TagController.html":{}}}],["apps/api/src/tag/tag.entity.ts",{"_index":927,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.entity.ts:12",{"_index":930,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.entity.ts:9",{"_index":928,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.module.ts",{"_index":934,"title":{},"body":{"modules/TagModule.html":{}}}],["apps/api/src/tag/tag.service.ts",{"_index":938,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.service.ts:11",{"_index":941,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:18",{"_index":945,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:22",{"_index":944,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/users/dto/patch",{"_index":813,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":798,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":806,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":801,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":1038,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts",{"_index":959,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts:21",{"_index":968,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.controller.ts:33",{"_index":964,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.decorator.ts",{"_index":1219,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":996,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:27",{"_index":1003,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:33",{"_index":1025,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:39",{"_index":1000,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:45",{"_index":998,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:51",{"_index":1005,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:57",{"_index":1020,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:69",{"_index":1014,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:72",{"_index":997,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:75",{"_index":999,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:79",{"_index":1002,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:120",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:51",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:75",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:98",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":1097,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":1105,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:110",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:132",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:148",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":1110,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:42",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:51",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:61",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:78",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":1335,"title":{},"body":{"index.html":{}}}],["array",{"_index":405,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":201,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["article.author",{"_index":542,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["article.author.id",{"_index":555,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.comments",{"_index":568,"title":{},"body":{"injectables/ArticleService.html":{},"entities/CommentEntity.html":{}}}],["article.comments.findindex",{"_index":573,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.comments.splice(articlecommentindex",{"_index":580,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.controller",{"_index":434,"title":{},"body":{"modules/ArticleModule.html":{}}}],["article.dto",{"_index":319,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["article.dto.ts",{"_index":357,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["article.dto.ts:13",{"_index":365,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:17",{"_index":361,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:21",{"_index":360,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:28",{"_index":364,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:35",{"_index":706,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["article.entity",{"_index":435,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{}}}],["article.favoritescount",{"_index":566,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":563,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.service",{"_index":312,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["article.slug",{"_index":540,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":539,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist.map((name",{"_index":548,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article/article.entity",{"_index":658,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{}}}],["article/article.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["article/comment.entity",{"_index":1029,"title":{},"body":{"entities/UserEntity.html":{}}}],["articlecomment",{"_index":574,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecomment.id",{"_index":575,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecommentdto",{"_index":198,"title":{"classes/ArticleCommentDto.html":{}},"body":{"classes/ArticleCommentDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["articlecommentindex",{"_index":572,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontroller",{"_index":214,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articledto",{"_index":327,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["articleentity",{"_index":372,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["articlefeedqueryparams",{"_index":282,"title":{"classes/ArticleFeedQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articleindex",{"_index":583,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":561,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":562,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":61,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":451,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articles",{"_index":217,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["articles.map((article",{"_index":526,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":514,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleservice",{"_index":311,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesqueryparams",{"_index":274,"title":{"classes/ArticlesQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["articleswithfavorited",{"_index":525,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":1100,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":738,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":743,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":746,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/dto/login.dto",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/dto/register.dto",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":1099,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["authenticated",{"_index":971,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticating",{"_index":1410,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authentication/authorization",{"_index":1318,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":753,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":62,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":374,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"index.html":{},"properties.html":{}}}],["author.favorites.map((el",{"_index":508,"title":{},"body":{"injectables/ArticleService.html":{}}}],["author.id",{"_index":503,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authservice",{"_index":595,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1385,"title":{},"body":{"index.html":{}}}],["await",{"_index":322,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1316,"title":{},"body":{"index.html":{}}}],["bad",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":1017,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":409,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["behind",{"_index":1395,"title":{},"body":{"index.html":{}}}],["below",{"_index":1352,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1426,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":1043,"title":{},"body":{"entities/UserRoles.html":{}}}],["bio",{"_index":821,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["body",{"_index":204,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":1312,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":721,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{}}}],["boolean(follow",{"_index":898,"title":{},"body":{"injectables/ProfileService.html":{}}}],["bootstrap",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1322,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1432,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1522,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1333,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1542,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1239,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":670,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["buildarticlecommentresponse",{"_index":439,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticlecommentresponse(comment",{"_index":455,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse",{"_index":440,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":457,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":1291,"title":{},"body":{"index.html":{}}}],["buildprofileresponse",{"_index":883,"title":{},"body":{"injectables/ProfileService.html":{}}}],["buildprofileresponse(profile",{"_index":886,"title":{},"body":{"injectables/ProfileService.html":{}}}],["built",{"_index":1379,"title":{},"body":{"index.html":{}}}],["can't",{"_index":900,"title":{},"body":{"injectables/ProfileService.html":{}}}],["can(useractionsenum.delete",{"_index":684,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.manage",{"_index":674,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":679,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":682,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":740,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1462,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":1048,"title":{},"body":{"entities/UserRoles.html":{}}}],["case",{"_index":952,"title":{},"body":{"injectables/TagService.html":{}}}],["casl",{"_index":659,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":695,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":655,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":428,"title":{},"body":{"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":299,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":302,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["caslfactory",{"_index":425,"title":{"injectables/CaslFactory.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":63,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":951,"title":{},"body":{"injectables/TagService.html":{}}}],["cert.pem",{"_index":1473,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1461,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1464,"title":{},"body":{"index.html":{}}}],["change",{"_index":1441,"title":{},"body":{"index.html":{}}}],["check",{"_index":836,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":835,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":298,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":337,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["checks",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":1334,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1434,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":1304,"title":{},"body":{"index.html":{}}}],["class",{"_index":41,"title":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":199,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"overview.html":{}}}],["clone",{"_index":1355,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":423,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":424,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":592,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":593,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":691,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":693,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":692,"title":{},"body":{"modules/CaslModule.html":{}}}],["cluster_profilemodule",{"_index":877,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":878,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":932,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_tagmodule_providers",{"_index":933,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":1094,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1095,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1096,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1499,"title":{},"body":{"index.html":{}}}],["column",{"_index":402,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["column('simple",{"_index":404,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":396,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":1008,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":384,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["column({unique",{"_index":929,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["comes",{"_index":1317,"title":{},"body":{"index.html":{}}}],["coming",{"_index":668,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":1365,"title":{},"body":{"index.html":{}}}],["comment",{"_index":213,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleCommentDto.html":{},"entities/UserEntity.html":{}}}],["comment.article",{"_index":389,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["comment.author",{"_index":570,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["comment.dto",{"_index":318,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["comment.dto.ts",{"_index":202,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:15",{"_index":705,"title":{},"body":{"classes/CreateArticleCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":206,"title":{},"body":{"classes/ArticleCommentDto.html":{}}}],["comment.entity",{"_index":413,"title":{},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["commententity",{"_index":387,"title":{"entities/CommentEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["commentid",{"_index":263,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["commenting",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentonarticle",{"_index":218,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentonarticle(user",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentrepository",{"_index":449,"title":{},"body":{"injectables/ArticleService.html":{}}}],["comments",{"_index":279,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["compose",{"_index":1349,"title":{},"body":{"index.html":{}}}],["config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":619,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":621,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":1303,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1520,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1375,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1409,"title":{},"body":{"index.html":{}}}],["connections",{"_index":1420,"title":{},"body":{"index.html":{}}}],["console.log('follow",{"_index":896,"title":{},"body":{"injectables/ProfileService.html":{}}}],["const",{"_index":328,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(articlerepository",{"_index":445,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(configservice",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":741,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(tagrepository",{"_index":940,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":884,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["container",{"_index":1390,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1300,"title":{},"body":{"index.html":{}}}],["context",{"_index":747,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":757,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":839,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":1340,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":321,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('profiles",{"_index":868,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('tags",{"_index":922,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('user",{"_index":981,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('users",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":1442,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1177,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1363,"title":{},"body":{"index.html":{}}}],["create",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":1111,"title":{},"body":{"injectables/UsersService.html":{}}}],["createarticle",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(user",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticlecommentdto",{"_index":212,"title":{"classes/CreateArticleCommentDto.html":{}},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["createarticlecommentdto.comment",{"_index":348,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createarticledto",{"_index":244,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["createcommentonarticle",{"_index":441,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createcommentonarticle(slug",{"_index":460,"title":{},"body":{"injectables/ArticleService.html":{}}}],["created",{"_index":1045,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createdarticle",{"_index":545,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createdat",{"_index":375,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["createforuser",{"_index":647,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":648,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createparamdecorator",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('articles",{"_index":495,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createquerybuilder('users",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtag",{"_index":939,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(tag",{"_index":943,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto",{"_index":707,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["createtoken",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":543,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{}}}],["crud",{"_index":1319,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":808,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":809,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":970,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":394,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["currently",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuser",{"_index":521,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuser.favorites.map((favorite",{"_index":522,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":257,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":966,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1516,"title":{},"body":{"index.html":{}}}],["date",{"_index":391,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["date%.log",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1474,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1508,"title":{},"body":{"index.html":{}}}],["default",{"_index":393,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":254,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':slug",{"_index":341,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":252,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/comments/:id",{"_index":350,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/comments/:id')@useguards(policiesguard)@checkpolicies(new",{"_index":264,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite",{"_index":355,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":259,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username/follow",{"_index":875,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":862,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletearticle",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticle(currentuserid",{"_index":250,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":462,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites",{"_index":221,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":258,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":464,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlepolicyhandler",{"_index":303,"title":{"classes/DeleteArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["deletearticlepolicyhandler())@apiresponse({status",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletecommentfromarticle",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletecommentfromarticle(currentuserid",{"_index":262,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletecommentfromarticle(slug",{"_index":466,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deleted",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":726,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1488,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1394,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1337,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1302,"title":{},"body":{"index.html":{}}}],["desc",{"_index":513,"title":{},"body":{"injectables/ArticleService.html":{}}}],["describe",{"_index":1504,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":1347,"title":{},"body":{"index.html":{}}}],["detached",{"_index":1391,"title":{},"body":{"index.html":{}}}],["details",{"_index":687,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":686,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":688,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":1399,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1537,"title":{},"body":{"index.html":{}}}],["development",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":1419,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1388,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1324,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1487,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1492,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1498,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":1359,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1345,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":1329,"title":{},"body":{"index.html":{}}}],["dto",{"_index":249,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["dto/article",{"_index":313,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/articles",{"_index":315,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/create",{"_index":317,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["dto/patch",{"_index":975,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":953,"title":{},"body":{"injectables/TagService.html":{}}}],["dynamic",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":370,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{}}}],["eager",{"_index":381,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["edit",{"_index":290,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["edit(userid",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser",{"_index":960,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":962,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1292,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":509,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1526,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1478,"title":{},"body":{"index.html":{}}}],["employs",{"_index":1015,"title":{},"body":{"entities/UserEntity.html":{}}}],["empty",{"_index":1413,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1454,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":1402,"title":{},"body":{"index.html":{}}}],["end",{"_index":1494,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1416,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":371,"title":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":1041,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":1362,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1364,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1204,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":901,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagService.html":{}}}],["everything",{"_index":678,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["example",{"_index":824,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["exclude",{"_index":1026,"title":{},"body":{"entities/UserEntity.html":{}}}],["exec",{"_index":1483,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":829,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":832,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":1387,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":553,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1367,"title":{},"body":{"index.html":{}}}],["exists",{"_index":957,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":622,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1418,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exportable",{"_index":892,"title":{},"body":{"injectables/ProfileService.html":{}}}],["exports",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":1373,"title":{},"body":{"index.html":{}}}],["express",{"_index":1428,"title":{},"body":{"index.html":{}}}],["extends",{"_index":752,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1519,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderwithscheme('token",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":653,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":369,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":1013,"title":{},"body":{"entities/UserEntity.html":{}}}],["false})@isoptional()@isstring",{"_index":420,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring({each",{"_index":363,"title":{},"body":{"classes/ArticleDto.html":{}}}],["fastify",{"_index":1252,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["favorite.id",{"_index":523,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":527,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{}}}],["favoriteids",{"_index":520,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":528,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":506,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["favoritescount",{"_index":376,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["favourite",{"_index":268,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle(currentuserid",{"_index":266,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feat",{"_index":1524,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1459,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1448,"title":{},"body":{"index.html":{}}}],["features",{"_index":1320,"title":{},"body":{"index.html":{}}}],["feed",{"_index":284,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feed.dto",{"_index":314,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["feed.dto.ts",{"_index":417,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["feed.dto.ts:10",{"_index":421,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["feed.dto.ts:17",{"_index":422,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["fetch",{"_index":917,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":795,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["fields",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1495,"title":{},"body":{"index.html":{}}}],["findbyslug",{"_index":442,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":468,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fine",{"_index":954,"title":{},"body":{"injectables/TagService.html":{}}}],["folder",{"_index":1465,"title":{},"body":{"index.html":{}}}],["follow",{"_index":855,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["follow.entity",{"_index":880,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["follow.followingid",{"_index":536,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followentity",{"_index":429,"title":{"entities/FollowEntity.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["follower",{"_index":899,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followerid",{"_index":532,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["following",{"_index":897,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["followingid",{"_index":730,"title":{},"body":{"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["followinguserids",{"_index":534,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followprofile",{"_index":849,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followprofile(currentuserid",{"_index":852,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followrepository",{"_index":448,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["follows",{"_index":530,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{}}}],["follows.length",{"_index":533,"title":{},"body":{"injectables/ArticleService.html":{}}}],["follows.map((follow",{"_index":535,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followtocreate",{"_index":903,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followerid",{"_index":904,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followingid",{"_index":905,"title":{},"body":{"injectables/ProfileService.html":{}}}],["format",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["forroot",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":1290,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":800,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1493,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1533,"title":{},"body":{"index.html":{}}}],["function",{"_index":843,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1283,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1518,"title":{},"body":{"index.html":{}}}],["generate",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1466,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":332,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug')@apiresponse({status",{"_index":271,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug/comments",{"_index":343,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug/comments')@apiresponse({status",{"_index":278,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":869,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":859,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get('feed",{"_index":324,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('feed')@apiresponse({status",{"_index":283,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(id",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarticle",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(@param('slug",{"_index":333,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(slug",{"_index":270,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticles(query",{"_index":273,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getbyusername",{"_index":1106,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcommentsforarticle",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsforarticle(@param('slug",{"_index":344,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsforarticle(slug",{"_index":277,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsonarticle",{"_index":443,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getcommentsonarticle(slug",{"_index":472,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getfeed",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getfeed(currentuserid",{"_index":281,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getone",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofile",{"_index":850,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(currentuserid",{"_index":858,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getrootmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getslug",{"_index":444,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":475,"title":{},"body":{"injectables/ArticleService.html":{}}}],["gettags",{"_index":916,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getting",{"_index":1285,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":961,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@request",{"_index":982,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(req",{"_index":967,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemailandpass",{"_index":1107,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemailandpass(email",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1356,"title":{},"body":{"index.html":{}}}],["github",{"_index":1485,"title":{},"body":{"index.html":{}}}],["given",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":802,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":1006,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":739,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":827,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1455,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1457,"title":{},"body":{"index.html":{}}}],["handle",{"_index":717,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handle(ability",{"_index":718,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handler",{"_index":834,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":844,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":845,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":307,"title":{},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":714,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:18",{"_index":826,"title":{},"body":{"classes/PatchUserPolicyHandler.html":{}}}],["handlers.ts:24",{"_index":728,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:30",{"_index":811,"title":{},"body":{"classes/PatchArticlePolicyHandler.html":{}}}],["handlers.ts:35",{"_index":719,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{}}}],["handlers.ts:8",{"_index":735,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":803,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{}}}],["hashed",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":1297,"title":{},"body":{"index.html":{}}}],["host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1496,"title":{},"body":{"index.html":{}}}],["http/2",{"_index":1452,"title":{},"body":{"index.html":{}}}],["http2",{"_index":1306,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":1374,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1381,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":1393,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":479,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpexception('article",{"_index":552,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('profile",{"_index":894,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpexception('you",{"_index":556,"title":{},"body":{"injectables/ArticleService.html":{}}}],["https",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":685,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":1357,"title":{},"body":{"index.html":{}}}],["https://gravatar.com/avatar/123",{"_index":825,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["https://typeorm.io",{"_index":1446,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":480,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.bad_request",{"_index":902,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpstatus.forbidden",{"_index":557,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":554,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["iarticleresponsebody",{"_index":296,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iarticlesresponsebody",{"_index":297,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iat",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":377,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"injectables/JwtStrategy.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":507,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":510,"title":{},"body":{"injectables/ArticleService.html":{}}}],["igenericmessagebody",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignored",{"_index":955,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":823,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":715,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":654,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/TagService.html":{}}}],["inject(winston_module_provider",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["injectable",{"_index":178,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":481,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(articleentity",{"_index":483,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(commententity",{"_index":486,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(followentity",{"_index":485,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(tagentity",{"_index":947,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":484,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":1298,"title":{},"body":{"index.html":{}}}],["interface",{"_index":720,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":734,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":716,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":712,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isalphanumeric",{"_index":818,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isemail",{"_index":792,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isfqdn",{"_index":819,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":209,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isnotfavorited",{"_index":559,"title":{},"body":{"injectables/ArticleService.html":{}}}],["isoptional",{"_index":366,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["ispublic",{"_index":755,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":367,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["it's",{"_index":1405,"title":{},"body":{"index.html":{}}}],["item",{"_index":689,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":690,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["iuser",{"_index":973,"title":{},"body":{"controllers/UserController.html":{}}}],["iuserresponsebody",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["javascript",{"_index":1330,"title":{},"body":{"index.html":{}}}],["joi",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":1027,"title":{},"body":{"entities/UserEntity.html":{}}}],["jwt",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":736,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":617,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":596,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["keepconnectionalive",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1472,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyout",{"_index":1471,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":664,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1515,"title":{},"body":{"index.html":{}}}],["layout",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":1412,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('articles.author",{"_index":496,"title":{},"body":{"injectables/ArticleService.html":{}}}],["length",{"_index":1009,"title":{},"body":{"entities/UserEntity.html":{}}}],["level",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":1444,"title":{},"body":{"index.html":{}}}],["license",{"_index":1538,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1540,"title":{},"body":{"index.html":{}}}],["limit",{"_index":418,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"dependencies.html":{}}}],["loads",{"_index":1389,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1344,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1328,"title":{},"body":{"index.html":{}}}],["located",{"_index":1463,"title":{},"body":{"index.html":{}}}],["location",{"_index":1510,"title":{},"body":{"index.html":{}}}],["logger",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["logging",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":794,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(payload",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["logindto",{"_index":788,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logs",{"_index":1309,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["lower",{"_index":488,"title":{},"body":{"injectables/ArticleService.html":{}}}],["luckily",{"_index":1453,"title":{},"body":{"index.html":{}}}],["made",{"_index":1313,"title":{},"body":{"index.html":{}}}],["main",{"_index":1523,"title":{},"body":{"index.html":{}}}],["make",{"_index":1325,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1458,"title":{},"body":{"index.html":{}}}],["manage",{"_index":661,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":1353,"title":{},"body":{"index.html":{}}}],["many",{"_index":1023,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["manytomany",{"_index":1028,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":1001,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytoone",{"_index":410,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":379,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1512,"title":{},"body":{"index.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":490,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":489,"title":{},"body":{"injectables/ArticleService.html":{}}}],["maxfiles",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlength",{"_index":820,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxlength(255",{"_index":822,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxsize",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["mediumtext",{"_index":385,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":793,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["minlength(8",{"_index":796,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["mins",{"_index":1408,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1282,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1539,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":1370,"title":{},"body":{"index.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":1182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":1438,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1450,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":1439,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":965,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":1336,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1433,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1414,"title":{},"body":{"index.html":{}}}],["nest",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":748,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1469,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":1396,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1289,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1476,"title":{},"body":{"index.html":{}}}],["non",{"_index":1323,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1360,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nullable",{"_index":382,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["number",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":1311,"title":{},"body":{"index.html":{}}}],["object",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(article",{"_index":538,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["object.assign(comment",{"_index":569,"title":{},"body":{"injectables/ArticleService.html":{}}}],["object.keys(payload).foreach((key",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":1424,"title":{},"body":{"index.html":{}}}],["offset",{"_index":419,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["ondelete",{"_index":1047,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":1022,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":411,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":388,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["open",{"_index":1500,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":1208,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1467,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":1348,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1423,"title":{},"body":{"index.html":{}}}],["optional",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":1400,"title":{},"body":{"index.html":{}}}],["os",{"_index":1536,"title":{},"body":{"index.html":{}}}],["out",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":1351,"title":{},"body":{"index.html":{}}}],["over",{"_index":1427,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1543,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1224,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1486,"title":{},"body":{"index.html":{}}}],["panel",{"_index":1341,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":351,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('slug",{"_index":338,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":870,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["particular",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1535,"title":{},"body":{"index.html":{}}}],["passport",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":614,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":1030,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwords",{"_index":1016,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwordtransformer",{"_index":797,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["patch",{"_index":815,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["patcharticlepolicyhandler",{"_index":304,"title":{"classes/PatchArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patcharticlepolicyhandler())@apiresponse({status",{"_index":289,"title":{},"body":{"controllers/ArticleController.html":{}}}],["patchuserdto",{"_index":812,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["patchuserpolicyhandler",{"_index":305,"title":{"classes/PatchUserPolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["patchuserpolicyhandler())@apiresponse({status",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["path",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.article",{"_index":330,"title":{},"body":{"controllers/ArticleController.html":{}}}],["payload.user",{"_index":985,"title":{},"body":{"controllers/UserController.html":{}}}],["payload[key",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":1422,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1425,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":681,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["permit",{"_index":1044,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":1321,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":1368,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1456,"title":{},"body":{"index.html":{}}}],["plaintoclass(userentity",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":300,"title":{},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":1201,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":301,"title":{"guards/PoliciesGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":724,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":723,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":722,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":837,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":841,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":1378,"title":{},"body":{"index.html":{}}}],["post",{"_index":292,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["post(':slug/comments",{"_index":346,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/comments')@useguards(policiesguard)@checkpolicies(new",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite",{"_index":353,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":267,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':username/follow",{"_index":873,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":854,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('login",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apiresponse({status",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":1437,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":216,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":1301,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":400,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":1350,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1491,"title":{},"body":{"index.html":{}}}],["production",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":856,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{}}}],["profile.controller",{"_index":881,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.email",{"_index":908,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.service",{"_index":866,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/follow.entity",{"_index":430,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["profile/profile.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":846,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":64,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":848,"title":{},"body":{"controllers/ProfileController.html":{},"entities/UserRoles.html":{}}}],["profileservice",{"_index":865,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileusername",{"_index":853,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["progress",{"_index":1521,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1288,"title":{},"body":{"index.html":{}}}],["project",{"_index":1384,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":546,"title":{},"body":{"injectables/ArticleService.html":{}}}],["properties",{"_index":203,"title":{"properties.html":{}},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":1315,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1103,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":1507,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":1398,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1531,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get()@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@post()@apiresponse({status",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["public.decorator",{"_index":751,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":293,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":335,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":288,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put()@apiresponse({status",{"_index":963,"title":{},"body":{"controllers/UserController.html":{}}}],["queried",{"_index":974,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":276,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":500,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.dto",{"_index":316,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.dto.ts",{"_index":586,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":591,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:17",{"_index":587,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:24",{"_index":588,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:31",{"_index":589,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:38",{"_index":590,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.favorited",{"_index":504,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.limit",{"_index":516,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.offset",{"_index":518,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":497,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":493,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1=0",{"_index":511,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":502,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":498,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":515,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":524,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.limit(query.limit",{"_index":517,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.offset(query.offset",{"_index":519,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.orderby('articles.createdat",{"_index":512,"title":{},"body":{"injectables/ArticleService.html":{}}}],["quickly",{"_index":1314,"title":{},"body":{"index.html":{}}}],["r",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1477,"title":{},"body":{"index.html":{}}}],["random",{"_index":1403,"title":{},"body":{"index.html":{}}}],["react",{"_index":1376,"title":{},"body":{"index.html":{}}}],["read",{"_index":675,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1527,"title":{},"body":{"index.html":{}}}],["received",{"_index":923,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":918,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["recordkey",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":742,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":913,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["register(payload",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerdto",{"_index":909,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["registered",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpayload",{"_index":983,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["relational",{"_index":1511,"title":{},"body":{"index.html":{}}}],["relations",{"_index":505,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":1024,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1534,"title":{},"body":{"index.html":{}}}],["remark",{"_index":662,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":1366,"title":{},"body":{"index.html":{}}}],["repo",{"_index":1310,"title":{},"body":{"index.html":{}}}],["repository",{"_index":446,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":1021,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":665,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":972,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":669,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UserController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user[recordkey",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":368,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"index.html":{}}}],["reset",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":1369,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1358,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1505,"title":{},"body":{"index.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":969,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":1397,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1449,"title":{},"body":{"index.html":{}}}],["role",{"_index":672,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":1039,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":1040,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":1042,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":1049,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":1019,"title":{},"body":{"entities/UserEntity.html":{}}}],["roles",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":248,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["rsa:4096",{"_index":1470,"title":{},"body":{"index.html":{}}}],["run",{"_index":1372,"title":{},"body":{"index.html":{}}}],["running",{"_index":1480,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":1331,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1415,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1549,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":1293,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":680,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["seconds",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":618,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":1012,"title":{},"body":{"entities/UserEntity.html":{}}}],["self",{"_index":1460,"title":{},"body":{"index.html":{}}}],["served",{"_index":1386,"title":{},"body":{"index.html":{}}}],["server",{"_index":1294,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('email",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1295,"title":{},"body":{"index.html":{}}}],["signed",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":620,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":256,"title":{},"body":{"controllers/ArticleController.html":{}}}],["sits",{"_index":1417,"title":{},"body":{"index.html":{}}}],["slug",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["slugify",{"_index":482,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":487,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1479,"title":{},"body":{"index.html":{}}}],["special",{"_index":663,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1502,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1436,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1445,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1338,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":1346,"title":{},"body":{"index.html":{}}}],["start",{"_index":1343,"title":{},"body":{"index.html":{}}}],["started",{"_index":1286,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":1287,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["statements",{"_index":1179,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1430,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":666,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":660,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":754,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1530,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1447,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1435,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1326,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1541,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1501,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":1223,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":499,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tag.controller",{"_index":935,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":946,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.dto.ts",{"_index":709,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:8",{"_index":711,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":936,"title":{},"body":{"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["tag.name",{"_index":926,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tag.service",{"_index":920,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.entity",{"_index":432,"title":{},"body":{"modules/ArticleModule.html":{}}}],["tag/tag.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":433,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["tagcontroller",{"_index":914,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":431,"title":{"entities/TagEntity.html":{}},"body":{"modules/ArticleModule.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":358,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["tagmodule",{"_index":65,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":942,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":544,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":925,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":426,"title":{"injectables/TagService.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1525,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1382,"title":{},"body":{"index.html":{}}}],["test",{"_index":1484,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":1307,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1482,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1451,"title":{},"body":{"index.html":{}}}],["this.appservice.getrootmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":494,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.delete",{"_index":558,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":529,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":547,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":354,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticlecommentresponse(comment",{"_index":349,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":331,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":329,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createcommentonarticle",{"_index":347,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticle(slug",{"_index":342,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":356,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletecommentfromarticle",{"_index":352,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":334,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticles(query",{"_index":323,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getcommentsonarticle(slug",{"_index":345,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getfeed(currentuserid",{"_index":326,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":339,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.authservice.createtoken(user",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.caslfactory.createforuser(user.user",{"_index":840,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.commentrepository.delete",{"_index":582,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.commentrepository.save(comment",{"_index":571,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":842,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyslug(slug",{"_index":550,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.delete",{"_index":907,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.find",{"_index":531,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.findone",{"_index":895,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.save(followtocreate",{"_index":906,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.get(userid",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(payload.username",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getslug(payload.title",{"_index":541,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.getuserbyemailandpass(email",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`tag",{"_index":956,"title":{},"body":{"injectables/TagService.html":{}}}],["this.logger.info('calling",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["this.profileservice.buildprofileresponse(profile",{"_index":872,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.followprofile",{"_index":874,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":871,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowprofile",{"_index":876,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.reflector.get",{"_index":838,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":756,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tagrepository.find",{"_index":948,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(article",{"_index":950,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.createtag",{"_index":549,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagservice.gettags",{"_index":924,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":415,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["this.userrepository",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":501,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":567,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload.user",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(username",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(userid",{"_index":984,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validateuser(payload.user",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":551,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timestamp",{"_index":392,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["title",{"_index":359,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["to(value",{"_index":805,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["todo",{"_index":891,"title":{},"body":{"injectables/ProfileService.html":{}}}],["token",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tokens",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["transform",{"_index":807,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":208,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["transports",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1342,"title":{},"body":{"index.html":{}}}],["true",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":949,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1551,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":1308,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1490,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1497,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":412,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":436,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":937,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1489,"title":{},"body":{"index.html":{}}}],["ui",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":1011,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["unfavourite",{"_index":260,"title":{},"body":{"controllers/ArticleController.html":{}}}],["unfollow",{"_index":863,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowprofile",{"_index":851,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowprofile(currentuserid",{"_index":861,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unique",{"_index":931,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1481,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1392,"title":{},"body":{"index.html":{}}}],["updatearticle",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":286,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":477,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":287,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticledto.article",{"_index":340,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatedat",{"_index":378,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["updatetimestamp",{"_index":414,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["url",{"_index":1007,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":893,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["useclass",{"_index":1104,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1503,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":294,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":336,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.articles",{"_index":380,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.bio",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.comments",{"_index":698,"title":{},"body":{"entities/CommentEntity.html":{}}}],["user.comments.findindex",{"_index":577,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.comments.splice(usercommentindex",{"_index":581,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.controller",{"_index":1101,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.decorator",{"_index":977,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":976,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":814,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":989,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:28",{"_index":995,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:36",{"_index":987,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:45",{"_index":991,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:53",{"_index":993,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:63",{"_index":817,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.email",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":978,"title":{},"body":{"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.favorites.findindex",{"_index":560,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":565,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":584,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.id",{"_index":683,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["user.image",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.roles",{"_index":1046,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":671,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["user[key",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":656,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["usercomment",{"_index":578,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercomment.id",{"_index":579,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercommentindex",{"_index":576,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercontroller",{"_index":958,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdto",{"_index":816,"title":{"classes/UserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":230,"title":{"entities/UserEntity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":453,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["userlogindto",{"_index":790,"title":{"classes/UserLoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userparam",{"_index":308,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userparam('id",{"_index":325,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["userregistrationdto",{"_index":911,"title":{"classes/UserRegistrationDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":447,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":607,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":657,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":673,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":1109,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1102,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":979,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.decorator",{"_index":309,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["users/user.entity",{"_index":310,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["users/users.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":1050,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":66,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":597,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1371,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1401,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":1004,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(request",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":210,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["validates",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":1108,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(undefined",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["validation",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":211,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["value",{"_index":804,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":810,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":799,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":1181,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1555,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1547,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":1332,"title":{},"body":{"index.html":{}}}],["view",{"_index":1517,"title":{},"body":{"index.html":{}}}],["vue",{"_index":1377,"title":{},"body":{"index.html":{}}}],["web",{"_index":1305,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["where('articles.authorid",{"_index":537,"title":{},"body":{"injectables/ArticleService.html":{}}}],["where('users.email",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":1383,"title":{},"body":{"index.html":{}}}],["winston",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["winstonfilerotator",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":1354,"title":{},"body":{"index.html":{}}}],["work",{"_index":1509,"title":{},"body":{"index.html":{}}}],["world",{"_index":1528,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1443,"title":{},"body":{"index.html":{}}}],["write",{"_index":676,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":1018,"title":{},"body":{"entities/UserEntity.html":{}}}],["x509",{"_index":1468,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":1339,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1361,"title":{},"body":{"index.html":{}}}],["yes",{"_index":471,"title":{},"body":{"injectables/ArticleService.html":{}}}],["yyyy",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["zippedarchive",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getRootMessage(): Promise {\n    return this.appService.getRootMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArticleModule } from './article/article.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { TagModule } from './tag/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule.forRoot(),\n    UsersModule,\n    CaslModule,\n    TagModule,\n    ArticleModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \ngetRootMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  getRootMessage(): IMessage {\n    this.logger.info('Calling getRootMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleCommentDto.html":{"url":"classes/ArticleCommentDto.html","title":"class - ArticleCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, ValidateNested } from 'class-validator';\n\nexport class ArticleCommentDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n}\n\nexport class CreateArticleCommentDto {\n  @ApiProperty()\n  @Type(() => ArticleCommentDto)\n  @ValidateNested()\n  comment: ArticleCommentDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentOnArticle\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                deleteCommentFromArticle\n                            \n                            \n                                    Async\n                                favouriteArticle\n                            \n                            \n                                    Async\n                                getArticle\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getCommentsForArticle\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentOnArticle(user: UserEntity, slug: string, createArticleCommentDto: CreateArticleCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/comments')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Commenting on Article Request Completed'})@ApiResponse({status: 400, description: 'Commenting on Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createArticleCommentDto\n                                    \n                                                CreateArticleCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: 201, description: 'Create Articles Request Completed'})@ApiResponse({status: 400, description: 'Create Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:78\n                \n            \n\n\n            \n                \n                    Route to create an article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    payload\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteArticlePolicyHandler())@ApiResponse({status: 201, description: 'Delete Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:140\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfavourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Unfavourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCommentFromArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentFromArticle(currentUserId: number, commentId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/comments/:id')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Delete Comment from Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Comment from Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        favouriteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    favouriteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Favourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Favourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiResponse({status: 200, description: 'Get Article Request Completed'})@ApiResponse({status: 400, description: 'Get Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:100\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 201, description: 'Get Articles Request Completed'})@ApiResponse({status: 400, description: 'Get Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommentsForArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsForArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug/comments')@ApiResponse({status: 200, description: 'Get Article Comments Request Completed'})@ApiResponse({status: 400, description: 'Get Article Comments Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')@ApiResponse({status: 201, description: 'Get Article Feed Request Completed'})@ApiResponse({status: 400, description: 'Get Article Feed Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchArticlePolicyHandler())@ApiResponse({status: 201, description: 'Edit Article Request Completed'})@ApiResponse({status: 400, description: 'Edit Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport {\n  DeleteArticlePolicyHandler,\n  PatchArticlePolicyHandler,\n  PatchUserPolicyHandler,\n} from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleService } from './article.service';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { CreateArticleCommentDto } from './dto/create-article-comment.dto';\nimport { CreateArticleDto } from './dto/create-article.dto';\n\n@ApiBearerAuth()\n@ApiTags('articles')\n@Controller('articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 201, description: 'Get Articles Request Completed' })\n  @ApiResponse({ status: 400, description: 'Get Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticles(\n    @Query()\n    query: ArticlesQueryParams,\n  ): Promise {\n    return await this.articleService.getArticles(query);\n  }\n\n  @Get('feed')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Feed Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Feed Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getFeed(\n    @UserParam('id') currentUserId: number,\n    @Query() query: ArticleFeedQueryParams,\n  ) {\n    return await this.articleService.getFeed(currentUserId, query);\n  }\n\n  /**\n   * Route to create an article\n   * @param {ArticleDto} payload the article dto\n   */\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Create Articles Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Create Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async createArticle(\n    @UserParam() user: UserEntity,\n    @Body() payload: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      user,\n      payload.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Get(':slug')\n  @ApiResponse({\n    status: 200,\n    description: 'Get Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticle(@Param('slug') slug: string): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Put(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Edit Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Edit Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body() updateArticleDto: CreateArticleDto,\n  ) {\n    const article = await this.articleService.updateArticle(\n      slug,\n      currentUserId,\n      updateArticleDto.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Delete(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Delete Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteArticle(slug, currentUserId);\n  }\n\n  @Get(':slug/comments')\n  @ApiResponse({\n    status: 200,\n    description: 'Get Article Comments Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Comments Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getCommentsForArticle(@Param('slug') slug: string) {\n    return await this.articleService.getCommentsOnArticle(slug);\n  }\n\n  @Post(':slug/comments')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Commenting on Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Commenting on Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async commentOnArticle(\n    @UserParam() user: UserEntity,\n    @Param('slug') slug: string,\n    @Body() createArticleCommentDto: CreateArticleCommentDto,\n  ) {\n    const comment = await this.articleService.createCommentOnArticle(\n      slug,\n      user,\n      createArticleCommentDto.comment,\n    );\n    return this.articleService.buildArticleCommentResponse(comment);\n  }\n\n  @Delete(':slug/comments/:id')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Comment from Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Delete Comment from Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteCommentFromArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('id') commentId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteCommentFromArticle(\n      slug,\n      commentId,\n      currentUserId,\n    );\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Favourite an Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Favourite an Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async favouriteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfavourite an Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfavourite an Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticleFromFavorites(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                tagList\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty()\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                comments\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                favoritesCount\n                            \n                            \n                                id\n                            \n                            \n                                slug\n                            \n                            \n                                tagList\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'mediumtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.article, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Default description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { CommentEntity } from './comment.entity';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: 'Default description' })\n  description: string;\n\n  @Column({ type: 'mediumtext' })\n  body: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEntity, (user) => user.articles, {\n    eager: true,\n    nullable: false,\n  })\n  author: UserEntity;\n\n  @OneToMany(() => CommentEntity, (comment) => comment.article, { eager: true })\n  comments: CommentEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleFeedQueryParams.html":{"url":"classes/ArticleFeedQueryParams.html","title":"class - ArticleFeedQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleFeedQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/article-feed.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticleFeedQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                        \n                            CaslFactory\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagEntity } from '../tag/tag.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleController } from './article.controller';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleService } from './article.service';\nimport { CommentEntity } from './comment.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ArticleEntity,\n      UserEntity,\n      TagEntity,\n      FollowEntity,\n      CommentEntity,\n    ]),\n  ],\n  controllers: [ArticleController],\n  providers: [ArticleService, CaslFactory, TagService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleCommentResponse\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                createCommentOnArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                deleteCommentFromArticle\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getCommentsOnArticle\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, followRepository: Repository, commentRepository: Repository, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/article/article.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleCommentResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleCommentResponse(comment: CommentEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:311\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CommentEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { comment: CommentEntity; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IArticleResponseBody\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCommentOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCommentOnArticle(slug: string, user: UserEntity, payload: ArticleCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:279\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCommentFromArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentFromArticle(slug: string, commentId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommentsOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsOnArticle(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, currentUserId: number, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport slugify from 'slugify';\nimport { Repository } from 'typeorm';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\nimport { CommentEntity } from './comment.entity';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { ArticleCommentDto } from './dto/create-article-comment.dto';\nimport { ArticleDto } from './dto/create-article.dto';\n\n@Injectable()\nexport class ArticleService {\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n    @InjectRepository(CommentEntity)\n    private readonly commentRepository: Repository,\n    private readonly tagService: TagService,\n  ) {}\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n\n  async getArticles(\n    query: ArticlesQueryParams,\n    userId?: number,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author');\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      queryBuilder.andWhere('articles.authorId = :id', {\n        id: author.id,\n      });\n    }\n\n    if (query.favorited) {\n      const author = await this.userRepository.findOne({\n        where: {\n          username: query.favorited,\n        },\n        relations: ['favorites'],\n      });\n      const ids = author.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.authorId IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1=0');\n      }\n    }\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    let favoriteIds: number[] = [];\n\n    if (userId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: userId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articles = await queryBuilder.getMany();\n    const articlesWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articlesWithFavorited, articlesCount };\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({ where: { slug } });\n  }\n\n  async getFeed(currentUserId: number, query: ArticleFeedQueryParams) {\n    const follows = await this.followRepository.find({\n      where: { followerId: currentUserId },\n    });\n\n    if (follows.length === 0) {\n      return { articles: [], articlesCount: 0 };\n    }\n\n    const followingUserIds = follows.map((follow) => follow.followingId);\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author')\n      .where('articles.authorId IN (:...ids)', { ids: followingUserIds });\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    const articles = await queryBuilder.getMany();\n\n    return { articles, articlesCount };\n  }\n\n  async createArticle(\n    user: UserEntity,\n    payload: ArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, payload);\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n    article.slug = this.getSlug(payload.title);\n    article.author = user;\n\n    // Creating tags from tagList\n    const [createdArticle] = await Promise.all([\n      this.articleRepository.save(article),\n      ...article.tagList.map((name) => this.tagService.createTag({ name })),\n    ]);\n    return createdArticle;\n  }\n\n  async updateArticle(\n    slug: string,\n    currentUserId: number,\n    payload: ArticleDto,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, payload);\n\n    return await this.articleRepository.save(article);\n  }\n\n  async deleteArticle(slug: string, currentUserId: number) {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    return await this.articleRepository.delete({ slug });\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async getCommentsOnArticle(slug: string): Promise {\n    const article = await this.findBySlug(slug);\n    return article.comments;\n  }\n\n  async createCommentOnArticle(\n    slug: string,\n    user: UserEntity,\n    payload: ArticleCommentDto,\n  ) {\n    const article = await this.findBySlug(slug);\n\n    const comment = new CommentEntity();\n    Object.assign(comment, payload);\n    comment.author = user;\n    comment.article = article;\n\n    return await this.commentRepository.save(comment);\n  }\n\n  async deleteCommentFromArticle(\n    slug: string,\n    commentId: number,\n    userId: number,\n  ) {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['comments'],\n    });\n\n    const articleCommentIndex = article.comments.findIndex(\n      (articleComment) => articleComment.id === commentId,\n    );\n    const userCommentIndex = user.comments.findIndex(\n      (userComment) => userComment.id === commentId,\n    );\n\n    if (articleCommentIndex > -1) {\n      article.comments.splice(articleCommentIndex, 1);\n      await this.articleRepository.save(article);\n    }\n\n    if (userCommentIndex > -1) {\n      user.comments.splice(userCommentIndex, 1);\n      await this.userRepository.save(user);\n    }\n\n    return await this.commentRepository.delete({ id: commentId });\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex > -1) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    } else {\n      throw new HttpException(\n        'Article is not in favorites',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return article;\n  }\n\n  buildArticleResponse(article: ArticleEntity): IArticleResponseBody {\n    return { article };\n  }\n\n  buildArticleCommentResponse(comment: CommentEntity) {\n    delete comment.article;\n    return { comment };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesQueryParams.html":{"url":"classes/ArticlesQueryParams.html","title":"class - ArticlesQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/articles-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                favorited\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticlesQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  tag: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  author: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  favorited: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { module: typeof AuthModule; providers: {}; }\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\nconst providers = [AuthService, JwtStrategy];\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [...providers, UsersService],\n  controllers: [],\n  exports: providers,\n})\nexport class AuthModule {\n  static forRoot() {\n    return {\n      module: AuthModule,\n      providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserEntity } from '../users/user.entity';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {UserEntity} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  createToken({ id, username, roles, email }: UserEntity): string {\n    return this.jwtService.sign({\n      id,\n      username,\n      roles,\n      email,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: UserEntity) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    // User scoped permissions\n    can(UserActionsEnum.Update, UserEntity, { id: user.id });\n    can(UserActionsEnum.Update, ArticleEntity, { author: user });\n    can(UserActionsEnum.Delete, ArticleEntity, { author: user });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CommentEntity.html":{"url":"entities/CommentEntity.html","title":"entity - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.comments, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\n\n@Entity({ name: 'comments' })\nexport class CommentEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  body: string;\n\n  @ManyToOne(() => ArticleEntity, (article) => article.comments, {\n    nullable: false,\n  })\n  article: ArticleEntity;\n\n  @ManyToOne(() => UserEntity, (user) => user.comments, { nullable: false })\n  author: UserEntity;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleCommentDto.html":{"url":"classes/CreateArticleCommentDto.html","title":"class - CreateArticleCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleCommentDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article-comment.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, ValidateNested } from 'class-validator';\n\nexport class ArticleCommentDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n}\n\nexport class CreateArticleCommentDto {\n  @ApiProperty()\n  @Type(() => ArticleCommentDto)\n  @ValidateNested()\n  comment: ArticleCommentDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty()\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlpha()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/dto/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlpha, IsNotEmpty } from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsAlpha()\n  @IsNotEmpty()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteArticlePolicyHandler.html":{"url":"classes/DeleteArticlePolicyHandler.html","title":"class - DeleteArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowEntity.html":{"url":"entities/FollowEntity.html","title":"entity - FollowEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followerId\n                            \n                            \n                                followingId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'follows' })\nexport class FollowEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  followerId: number;\n\n  @Column()\n  followingId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, jwtPayload: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    jwtPayload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        validation method for jwt token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {UsersService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('Token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate(request: Request, jwtPayload: Record) {\n    const { iat, exp, id } = jwtPayload;\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserLoginDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchArticlePolicyHandler.html":{"url":"classes/PatchArticlePolicyHandler.html","title":"class - PatchArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPolicyHandler.html":{"url":"classes/PatchUserPolicyHandler.html","title":"class - PatchUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user.user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Follow Profile Request Completed'})@ApiResponse({status: 400, description: 'Follow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 201, description: 'Get Profile by Username Request Completed'})@ApiResponse({status: 400, description: 'Get Profile by Username Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfollow Profile Request Completed'})@ApiResponse({status: 400, description: 'Unfollow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { PatchUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { ProfileService } from './profile.service';\n\n@ApiBearerAuth()\n@ApiTags('profiles')\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Get(':username')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Profile by Username Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Get Profile by Username Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.getProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Post(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Follow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Follow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async followProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.followProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Delete(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfollow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfollow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async unfollowProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.unfollowProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, FollowEntity])],\n  controllers: [ProfileController],\n  providers: [ProfileService, CaslFactory],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildProfileResponse\n                            \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildProfileResponse\n                        \n                    \n                \n            \n            \n                \nbuildProfileResponse(profile)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { profile: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\n\n// TODO: type everything (exportable in api-types for UI to use)\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async getProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: {\n        followerId: currentUserId,\n        followingId: user.id,\n      },\n    });\n    console.log('follow', follow, currentUserId, user.id);\n\n    return { ...user, following: Boolean(follow) };\n  }\n\n  async followProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    if (!follow) {\n      const followToCreate = new FollowEntity();\n      followToCreate.followerId = currentUserId;\n      followToCreate.followingId = user.id;\n      await this.followRepository.save(followToCreate);\n    }\n\n    return { ...user, following: true };\n  }\n\n  async unfollowProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    await this.followRepository.delete({\n      followerId: currentUserId,\n      followingId: user.id,\n    });\n\n    return { ...user, following: false };\n  }\n\n  buildProfileResponse(profile: UserEntity & { following: boolean }) {\n    delete profile.email;\n    return { profile };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRegistrationDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Fetch Tags Request Received'})@ApiResponse({status: 400, description: 'Fetch Tags Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/tag/tag.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { Public } from '../auth/public.decorator';\nimport { TagService } from './tag.service';\n\n@ApiBearerAuth()\n@ApiTags('tags')\n@Controller('tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Fetch Tags Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Tags Request Failed' })\n  async getTags() {\n    const tags = await this.tagService.getTags();\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Tag Entity Class\n */\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TagController } from './tag.controller';\nimport { TagEntity } from './tag.entity';\nimport { TagService } from './tag.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/tag/tag.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(tag: CreateTagDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                CreateTagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Repository } from 'typeorm';\nimport { Logger } from 'winston';\n\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { TagEntity } from './tag.entity';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  async getTags(): Promise {\n    return await this.tagRepository.find();\n  }\n\n  async createTag(tag: CreateTagDto): Promise {\n    try {\n      const article = new TagEntity();\n      Object.assign(article, tag);\n      return await this.tagRepository.save(article);\n    } catch (error) {\n      // Error case is likely a duplicate tag which is fine to be ignored\n      this.logger.debug(`Tag ${tag.name} exists, so not creating duplicate`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponse({status: 200, description: 'Put User Request Received'})@ApiResponse({status: 400, description: 'Put User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:21\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IUser\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Request } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IUser } from '@starter/api-types';\n\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserParam } from './user.decorator';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly usersService: UsersService) {}\n  /**\n   * Retrieves current authenticated user\n   * @returns {IUser} queried user data\n   */\n  @Get()\n  getUser(@Request() req): IUser {\n    return req.user as IUser;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Put()\n  @ApiResponse({ status: 200, description: 'Put User Request Received' })\n  @ApiResponse({ status: 400, description: 'Put User Request Failed' })\n  async editUser(\n    @UserParam('id') userId: number,\n    @Body() payload: PatchUserDto,\n  ): Promise {\n    return this.usersService.edit(userId, payload.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bio\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                image\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    Bio field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsFQDN()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    Image field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                bio\n                            \n                            \n                                comments\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:45\n                        \n                    \n\n            \n                \n                    Bio column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:27\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:51\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:57\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { CommentEntity } from '../article/comment.entity';\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Bio column\n   */\n  @Column({ default: '' })\n  bio: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  image: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @OneToMany(() => CommentEntity, (comment) => comment.author)\n  comments: CommentEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:28\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRegistrationDto.html":{"url":"classes/UserRegistrationDto.html","title":"class - UserRegistrationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRegistrationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:21\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:37\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:29\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { UserEntity } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => UserEntity, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:120\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:98\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody, IUserResponseBody } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param usersService\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post()\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(\n    @Body() payload: RegisterDto,\n  ): Promise> {\n    const user = await this.usersService.create(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() payload: LoginDto,\n  ): Promise> {\n    const user = await this.usersService.validateUser(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { UserController } from './user.controller';\nimport { UserEntity } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRoles]), AuthModule],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController, UserController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getUserByEmailAndPass\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: UserRegistrationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                UserRegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:148\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(userId: number, payload: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailAndPass\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailAndPass(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: UserLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:132\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { LoginDto, UserLoginDto } from '../auth/dto/login.dto';\nimport { UserRegistrationDto } from '../auth/dto/register.dto';\nimport { UserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { UserEntity } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getUserByEmailAndPass(email: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.email = :email and users.password = :password')\n      .setParameter('email', email)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {UserRegistrationDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: UserRegistrationDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        image: url(payload.email, {\n          protocol: 'https',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {Partial} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(userId: number, payload: Partial): Promise {\n    const user = await this.get(userId);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ email, password }: UserLoginDto): Promise {\n    const user = await this.getUserByEmailAndPass(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                25 %\n                (3/12)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                apps/api/src/article/comment.entity.ts\n            \n            entity\n            CommentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/article-feed.dto.ts\n            \n            class\n            ArticleFeedQueryParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/articles-query.dto.ts\n            \n            class\n            ArticlesQueryParams\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article-comment.dto.ts\n            \n            class\n            ArticleCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article-comment.dto.ts\n            \n            class\n            CreateArticleCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            ArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            UserLoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            UserRegistrationDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/follow.entity.ts\n            \n            entity\n            FollowEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            UserDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.decorator.ts\n            \n            variable\n            UserParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            slugify : ^1.6.5\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            providers   (apps/.../auth.module.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            UserParam   (apps/.../user.decorator.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthService, JwtStrategy]\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserEntity, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserParam\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (recordKey: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    if (!request.user) {\n      null;\n    }\n\n    if (recordKey) {\n      return request.user.user[recordKey as keyof typeof request.user.user];\n    }\n\n    return request.user.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
