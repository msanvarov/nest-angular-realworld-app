var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.38,1,2.504]],["body/controllers/AppController.html",[0,2.415,1,3.694,2,1.549,3,0.232,4,0.232,5,0.153,6,3.487,7,1.477,8,4.549,9,0.316,10,1.199,11,2.273,12,6.349,13,1.127,14,0.021,15,4.074,16,3.391,17,6.349,18,3.467,19,2.811,20,3.139,21,3.391,22,0.407,23,4.074,24,1.422,25,5.434,26,4.832,27,2.415,28,0.375,29,0.865,30,3.139,31,3.506,32,1.391,33,3.487,34,1.467,35,1.319,36,3.867,37,3.487,38,3.694,39,3.487,40,0.232,41,0.105,42,1.734,43,1.838,44,2.389,45,2.225,46,1.187,47,0.865,48,2.923,49,2.581,50,0.865,51,4.074,52,0.015,53,0.015]],["title/modules/AppModule.html",[54,1.239,55,2.504]],["body/modules/AppModule.html",[1,3.276,2,1.51,3,0.27,4,0.151,5,0.149,14,0.021,28,0.399,29,0.565,36,3.461,37,2.278,40,0.151,41,0.069,44,3.086,47,0.565,50,0.842,52,0.011,53,0.011,54,1.355,55,4.862,56,1.201,57,1.689,58,2.278,59,2.278,60,2.278,61,3.739,62,3.3,63,3.739,64,3.739,65,3.739,66,3.739,67,2.027,68,1.36,69,1.276,70,2.662,71,1.903,72,3.3,73,4.503,74,4.433,75,1.686,76,2.662,77,2.278,78,2.026,79,1.561,80,3.969,81,1.133,82,4.062,83,2.662,84,1.686,85,3.333,86,2.662,87,2.662,88,3.969,89,2.278,90,2.278,91,2.662,92,2.662,93,2.278,94,2.662,95,2.662,96,2.662,97,2.662,98,2.662,99,2.662,100,2.662,101,2.278,102,2.662,103,3.021,104,2.662,105,2.278,106,2.662,107,2.278,108,2.662,109,2.278,110,2.662,111,2.278,112,2.662,113,2.278,114,2.662,115,2.278,116,2.662,117,2.278,118,2.662,119,2.278,120,2.662,121,2.662,122,3.276,123,4.062,124,2.278,125,2.662,126,2.662,127,2.662,128,1.837,129,2.662,130,0.226,131,2.662,132,2.662,133,2.662,134,2.662,135,2.662,136,1.07,137,2.662,138,1.276,139,2.662,140,1.686,141,2.662,142,1.454,143,2.662,144,2.662,145,2.662,146,3.969,147,3.397,148,2.662,149,2.374,150,2.026,151,2.662,152,2.662,153,4.746,154,5.261,155,3.969,156,3.969,157,1.157,158,3.969,159,2.115,160,3.969,161,3.969,162,2.662,163,3.969,164,2.662,165,2.278,166,2.662,167,2.662,168,2.662,169,2.662,170,2.662,171,2.662,172,2.662,173,2.662,174,2.662,175,2.662,176,2.662,177,2.662]],["title/injectables/AppService.html",[36,2.128,178,0.952]],["body/injectables/AppService.html",[3,0.236,4,0.236,5,0.156,7,1.212,9,0.321,10,1.212,14,0.021,22,0.54,24,1.431,25,5.675,26,5.046,28,0.364,29,0.879,33,5.159,34,1.492,35,1.341,36,3.174,40,0.236,41,0.107,42,2.719,43,1.869,44,3.747,46,1.207,47,0.879,50,0.879,52,0.015,53,0.015,84,2.625,85,3.429,122,2.859,130,0.351,150,4.118,178,1.421,179,1.869,180,3.546,181,4.632,182,6.39,183,4.143,184,6.013,185,4.143,186,1.088,187,0.744,188,0.979,189,4.143,190,3.546,191,3.546,192,1.986,193,4.143,194,4.143,195,4.143,196,2.859,197,4.143,198,3.546,199,3.153]],["title/controllers/ArticleController.html",[0,1.38,200,2.504]],["body/controllers/ArticleController.html",[0,0.63,2,0.63,3,0.094,4,0.094,5,0.062,7,1.614,9,0.128,10,0.612,11,2.521,13,1.41,14,0.021,18,3.62,19,3.518,20,3.616,22,0.509,24,1.142,27,2.404,28,0.332,29,0.351,30,1.602,31,3.914,32,0.565,34,0.596,35,0.536,40,0.094,41,0.043,43,1.826,45,0.904,46,0.483,47,1.359,48,3.62,49,3.23,50,1.082,52,0.007,53,0.007,130,0.432,157,1.016,186,1.338,187,0.916,188,1.204,200,1.885,201,1.417,202,1.049,203,3.812,204,2.984,205,3.487,206,2.984,207,3.487,208,2.732,209,2.984,210,2.984,211,1.417,212,0.859,213,2.067,214,2.99,215,1.656,216,4.693,217,3.326,218,4.693,219,3.88,220,4.693,221,4.693,222,1.656,223,4.125,224,4.168,225,1.731,226,1.656,227,1.656,228,1.656,229,2.626,230,1.656,231,4.046,232,5.08,233,1.656,234,2.146,235,1.656,236,2.338,237,4.046,238,1.656,239,3.812,240,2.209,241,1.656,242,1.656,243,4.046,244,1.656,245,1.656,246,1.656,247,1.656,248,1.417,249,4.125,250,2.564,251,1.417,252,1.656,253,1.885,254,1.656,255,3.463,256,1.656,257,1.656,258,3.079,259,1.656,260,1.492,261,2.079,262,1.417,263,1.26,264,1.049,265,1.417,266,1.417,267,1.049,268,1.26,269,1.143,270,0.904,271,1.143,272,1.395,273,1.395,274,1.672,275,1.26,276,0.747,277,1.731,278,1.417,279,0.565,280,2.045,281,1.417,282,1.417,283,1.417,284,1.26,285,1.417,286,1.656,287,1.656,288,3.079,289,2.604,290,1.656,291,0.971,292,1.736,293,1.656,294,1.656,295,4.819,296,1.656,297,1.656,298,2.732,299,1.656,300,3.079,301,3.079,302,4.046,303,1.656,304,1.656,305,1.656,306,1.656,307,1.656,308,1.656,309,1.656]],["title/classes/ArticleDto.html",[41,0.093,291,2.128]],["body/classes/ArticleDto.html",[3,0.236,4,0.236,5,0.156,7,1.352,9,0.322,13,1.769,14,0.021,22,0.638,28,0.343,32,1.418,40,0.308,41,0.165,47,1.492,52,0.015,53,0.015,130,0.577,149,2.722,188,1.281,214,2.435,224,2.435,260,3.295,291,3.751,310,1.418,311,5.049,312,3.16,313,1.755,314,4.164,315,4.164,316,6.034,317,4.153,318,4.153,319,3.16,320,4.153,321,4.153,322,4.153,323,3.476,324,2.268,325,3.493,326,4.125,327,4.125,328,3.741,329,1.991,330,3.741,331,2.268,332,3.554]],["title/entities/ArticleEntity.html",[333,1.544,334,1.459]],["body/entities/ArticleEntity.html",[3,0.189,4,0.189,5,0.125,7,1.376,9,0.258,13,1.902,14,0.021,22,0.686,28,0.265,40,0.189,41,0.086,47,1.459,52,0.013,53,0.013,130,0.599,142,1.815,149,2.103,157,1.358,159,1.336,187,0.597,203,2.293,212,1.238,232,4.096,234,2.102,260,2.939,279,1.134,313,1.509,314,3.715,315,3.715,333,1.983,334,1.874,335,2.844,336,3.157,337,5.383,338,5.383,339,2.429,340,5.383,341,2.844,342,4.66,343,4.66,344,3.323,345,4.607,346,4.66,347,3.323,348,6.145,349,5.835,350,3.915,351,5.835,352,3.323,353,3.989,354,3.323,355,3.547,356,3.323,357,3.41,358,3.323,359,4.355,360,3.323,361,4.66,362,4.66,363,3.323,364,3.323,365,3.323,366,4.66,367,3.989,368,1.336,369,3.323,370,3.323]],["title/modules/ArticleModule.html",[54,1.239,61,2.299]],["body/modules/ArticleModule.html",[2,2.129,3,0.248,4,0.248,5,0.164,14,0.021,28,0.408,29,0.926,40,0.248,41,0.112,52,0.015,53,0.015,54,1.911,56,1.969,57,2.382,61,4.582,67,2.859,68,2.229,69,2.092,71,2.683,72,2.559,79,2.559,81,1.857,200,4.265,212,1.188,279,1.49,280,4.044,281,3.736,334,1.755,371,3.736,372,3.736,373,3.306,374,3.522,375,4.364,376,3.321,377,3.282,378,4.364,379,3.736,380,4.364,381,3.736,382,4.364]],["title/injectables/ArticleService.html",[178,0.952,280,2.128]],["body/injectables/ArticleService.html",[3,0.103,4,0.103,5,0.068,9,0.14,10,0.659,11,2.506,14,0.021,22,0.569,24,1.236,27,2.759,28,0.334,29,0.384,34,0.652,35,0.586,40,0.103,41,0.047,42,1.251,46,1.082,47,1.386,50,1.211,52,0.008,53,0.008,81,0.771,130,0.484,136,1.182,149,0.817,157,1.369,159,1.492,178,0.772,179,0.817,186,1.498,187,1.053,188,1.348,192,2.411,203,2.029,204,3.176,206,3.176,209,3.176,210,3.176,211,1.551,212,0.906,213,2.181,214,2.505,224,3.438,232,4.201,234,2.24,239,2.947,248,1.551,249,3.176,250,2.706,253,4.221,255,3.655,265,3.176,266,1.551,279,0.618,280,1.724,282,1.551,283,1.551,284,1.379,285,1.551,289,3.336,291,2.505,292,2.374,314,1.25,315,1.25,334,1.888,336,2.505,339,2.119,355,2.238,368,0.728,374,2.706,379,1.551,381,1.551,383,1.551,384,3.711,385,2.94,386,2.94,387,2.94,388,1.811,389,3.657,390,2.824,391,1.811,392,2.94,393,1.811,394,1.811,395,2.94,396,1.811,397,1.811,398,1.811,399,1.811,400,2.94,401,1.811,402,1.811,403,2.94,404,1.811,405,1.811,406,1.811,407,1.551,408,1.551,409,1.25,410,2.517,411,1.811,412,1.379,413,1.811,414,1.811,415,1.811,416,1.811,417,1.551,418,1.811,419,1.811,420,1.811,421,1.811,422,1.811,423,2.94,424,1.811,425,2.029,426,2.94,427,3.574,428,2.94,429,1.811,430,2.94,431,3.655,432,3.655,433,3.711,434,1.811,435,1.811,436,1.811,437,1.811,438,1.811,439,1.811,440,2.94,441,1.811,442,1.811,443,1.811,444,1.811,445,1.811,446,2.94,447,1.811,448,1.811,449,1.811,450,1.811,451,2.94,452,1.811,453,2.517,454,1.811,455,1.811,456,2.517,457,2.94,458,1.811,459,1.811,460,1.551,461,1.379,462,1.379,463,2.94,464,1.811,465,4.271,466,1.811,467,1.811,468,3.711,469,2.029,470,1.811,471,1.379,472,1.551,473,1.811,474,1.811,475,1.811,476,2.94,477,2.94,478,2.94,479,2.94,480,2.94,481,2.029,482,1.811,483,2.94,484,2.517,485,2.94,486,1.811]],["title/classes/ArticlesQueryParams.html",[41,0.093,250,2.299]],["body/classes/ArticlesQueryParams.html",[3,0.23,4,0.23,5,0.152,9,0.313,13,1.818,14,0.02,22,0.656,28,0.303,32,1.377,40,0.23,41,0.137,47,1.433,52,0.014,53,0.014,130,0.557,234,2.278,250,3.37,310,1.377,313,1.722,319,5.003,323,3.448,326,5.138,327,4.814,329,1.935,330,4.537,331,3.59,336,3.489,425,4.106,453,5.093,487,5.778,488,3.454,489,5.093,490,5.95,491,5.95,492,4.035,493,4.035,494,4.035,495,4.035,496,4.035,497,4.035,498,4.035,499,5.95,500,4.035,501,4.035,502,5.319,503,4.035]],["title/modules/AuthModule.html",[54,1.239,62,2.128]],["body/modules/AuthModule.html",[2,1.35,3,0.202,4,0.202,5,0.134,10,0.795,11,1.35,14,0.021,22,0.354,24,0.795,28,0.396,29,0.753,40,0.202,41,0.091,50,1.036,52,0.013,53,0.013,54,2.049,56,1.602,57,2.076,62,4.214,67,2.492,68,1.813,69,1.702,71,3.194,72,2.862,73,4.772,74,4.143,75,2.249,78,3.714,79,2.082,81,1.511,122,2.45,123,3.039,212,0.753,234,1.279,279,1.212,292,1.279,504,3.039,505,3.039,506,3.039,507,3.842,508,4.126,509,2.934,510,2.702,511,4.177,512,5.575,513,3.55,514,2.702,515,3.55,516,2.702,517,3.55,518,2.45,519,2.492,520,3.55,521,2.45,522,3.039,523,3.55,524,3.55,525,2.702,526,3.55,527,3.55,528,2.249,529,3.55,530,3.55,531,3.039,532,3.55,533,4.88,534,3.55]],["title/injectables/AuthService.html",[178,0.952,507,1.981]],["body/injectables/AuthService.html",[3,0.203,4,0.203,5,0.135,7,1.098,9,0.277,10,1.098,14,0.021,22,0.558,24,1.098,27,1.612,28,0.342,29,0.758,40,0.203,41,0.092,42,2.562,43,2.716,44,3.699,46,1.838,47,1.04,50,0.758,52,0.013,53,0.013,74,4.605,75,2.263,130,0.51,136,1.97,157,1.428,178,1.286,179,1.612,186,1.286,187,0.88,188,1.158,192,3.024,212,1.339,213,2.503,225,2.263,234,2.015,260,2.676,279,1.219,313,1.586,339,2.211,507,2.676,509,2.211,516,2.719,528,3.814,535,3.058,536,3.729,537,5.594,538,5.594,539,3.572,540,6.795,541,4.9,542,3.572,543,3.572,544,4.194,545,3.729,546,4.605,547,4.194,548,4.194,549,4.194,550,4.194,551,2.465,552,3.572,553,3.572,554,3.058,555,3.105,556,2.349,557,3.572]],["title/injectables/CaslFactory.html",[178,0.952,373,1.739]],["body/injectables/CaslFactory.html",[3,0.218,4,0.218,5,0.144,9,0.297,10,1.152,14,0.021,22,0.383,24,0.859,28,0.368,29,0.814,34,1.382,35,1.665,40,0.293,41,0.099,50,0.814,52,0.014,53,0.014,130,0.526,157,1.884,159,1.542,178,1.35,179,1.731,186,1.007,187,0.689,188,0.906,212,1.316,279,1.31,292,1.382,310,1.31,334,2.333,336,3.016,373,2.466,461,2.92,558,2.92,559,5.143,560,5.143,561,3.836,562,2.964,563,5.143,564,5.143,565,5.143,566,4.402,567,3.284,568,2.25,569,3.284,570,2.095,571,5.143,572,4.402,573,3.836,574,3.914,575,3.836,576,3.836,577,3.836,578,5.143,579,1.96,580,3.836,581,3.284,582,5.143,583,3.836,584,3.259,585,2.92,586,3.836,587,4.966,588,3.836,589,4.402,590,4.402,591,3.836,592,3.836,593,3.836,594,3.836,595,3.836,596,3.836,597,3.836,598,3.284,599,3.836,600,3.836,601,3.836]],["title/modules/CaslModule.html",[54,1.239,63,2.299]],["body/modules/CaslModule.html",[3,0.283,4,0.283,5,0.187,14,0.02,28,0.346,29,1.055,40,0.283,41,0.128,52,0.017,53,0.017,54,2.073,56,2.244,57,2.585,63,4.571,67,3.102,68,2.54,69,2.384,71,2.912,373,3.571,511,5.199,602,4.256,603,4.973,604,4.256,605,4.973,606,2.716]],["title/classes/CreateArticleDto.html",[41,0.093,214,2.128]],["body/classes/CreateArticleDto.html",[3,0.259,4,0.259,5,0.171,7,1.019,9,0.353,13,1.259,14,0.02,22,0.454,28,0.358,32,1.553,40,0.327,41,0.171,47,1.405,52,0.016,53,0.016,130,0.534,149,2.593,214,3.371,224,3.695,260,2.485,291,3.881,310,1.553,311,4.374,312,3.463,313,1.861,314,3.14,315,3.14,319,3.463,323,3.561,324,2.485,325,3.614,326,4.374,327,4.374,328,3.967,329,2.181,330,3.967,331,2.485,332,3.894,607,4.55,608,4.55]],["title/classes/CreateTagDto.html",[41,0.093,609,2.504]],["body/classes/CreateTagDto.html",[3,0.289,4,0.289,5,0.191,9,0.394,13,1.404,14,0.02,22,0.507,28,0.35,32,1.733,40,0.289,41,0.158,46,1.929,47,1.305,52,0.017,53,0.017,130,0.43,187,1.189,310,1.733,313,1.991,323,3.141,325,3.358,329,2.433,609,4.244,610,5.264,611,4.345,612,5.076,613,5.076,614,6.15]],["title/classes/DeleteArticlePolicyHandler.html",[41,0.093,272,1.853]],["body/classes/DeleteArticlePolicyHandler.html",[3,0.231,4,0.231,5,0.153,9,0.315,10,1.197,14,0.021,22,0.406,24,0.91,28,0.361,34,1.464,35,1.316,40,0.375,41,0.163,50,1.346,52,0.015,53,0.015,130,0.506,186,1.067,187,0.73,188,0.96,212,1.267,272,2.73,273,2.076,274,1.948,276,1.834,279,1.387,310,1.387,334,2.4,562,2.73,568,2.383,570,2.219,579,3.615,606,2.219,615,2.918,616,2.219,617,3.598,618,3.522,619,3.386,620,4.286,621,4.064,622,2.076,623,3.502,624,3.134,625,2.076,626,2.383,627,3.386,628,2.076,629,3.386]],["title/classes/DeleteUserPolicyHandler.html",[41,0.093,628,1.853]],["body/classes/DeleteUserPolicyHandler.html",[3,0.231,4,0.231,5,0.153,9,0.315,10,1.197,14,0.021,22,0.406,24,0.91,28,0.361,34,1.464,35,1.316,40,0.375,41,0.163,50,1.346,52,0.015,53,0.015,130,0.506,186,1.067,187,0.73,188,0.96,212,1.267,272,2.076,273,2.076,274,1.948,276,1.834,279,1.387,310,1.387,334,2.4,562,2.73,568,2.383,570,2.219,579,3.615,606,2.219,615,2.918,616,2.219,617,3.598,618,3.522,619,3.386,620,4.286,622,2.076,623,3.502,624,3.134,625,2.076,626,2.383,627,3.386,628,2.73,629,3.386,630,4.064]],["title/entities/FollowEntity.html",[333,1.544,631,2.299]],["body/entities/FollowEntity.html",[3,0.274,4,0.274,5,0.181,9,0.374,13,1.789,14,0.02,22,0.645,28,0.274,40,0.274,41,0.124,52,0.016,53,0.016,130,0.548,142,2.631,187,0.866,234,2.547,313,1.929,333,2.535,339,2.918,357,4.097,359,4.398,368,1.937,631,3.774,632,4.124,633,5.535,634,5.535,635,4.819,636,4.819,637,4.819,638,4.819]],["title/interfaces/IPolicyHandler.html",[618,1.853,622,1.853]],["body/interfaces/IPolicyHandler.html",[3,0.232,4,0.232,5,0.153,9,0.316,10,1.199,14,0.021,22,0.407,24,0.912,28,0.361,34,1.467,35,1.319,40,0.375,41,0.164,50,1.347,52,0.015,53,0.015,130,0.507,186,1.069,187,0.732,188,0.962,212,1.269,272,2.081,273,2.081,274,1.953,276,1.838,279,1.391,334,2.403,562,2.734,568,2.389,570,2.225,579,3.617,606,2.225,615,2.923,616,2.225,617,3.467,618,3.524,619,3.391,620,4.288,622,2.081,623,3.723,624,3.139,625,2.081,626,2.389,627,3.391,628,2.081,629,3.391,639,4.074,640,4.074]],["title/injectables/JwtAuthGuard.html",[178,0.952,641,2.504]],["body/injectables/JwtAuthGuard.html",[3,0.247,4,0.247,5,0.164,7,0.973,9,0.337,10,1.25,14,0.021,22,0.557,24,0.973,28,0.37,29,0.922,40,0.247,41,0.112,42,1.848,45,2.371,50,1.184,52,0.015,53,0.015,130,0.473,149,1.959,178,1.465,179,1.959,186,1.465,187,1.002,188,1.318,292,1.564,518,2.997,528,3.535,536,4.246,641,3.85,642,5.276,643,3.717,644,3.85,645,4.775,646,3.717,647,5.894,648,4.342,649,4.775,650,4.951,651,4.342,652,3.717,653,2.997,654,4.342,655,3.305,656,4.342,657,3.717,658,4.342,659,3.717,660,4.775,661,4.342,662,3.717,663,4.342,664,4.342]],["title/injectables/JwtStrategy.html",[178,0.952,508,2.128]],["body/injectables/JwtStrategy.html",[3,0.212,4,0.212,5,0.14,7,0.835,9,0.289,10,1.13,11,2.175,14,0.021,22,0.504,24,1.13,27,2.58,28,0.375,29,0.791,40,0.212,41,0.147,42,2.607,43,2.58,46,1.47,52,0.014,53,0.014,74,4.737,75,2.362,130,0.428,178,1.324,179,1.682,186,1.324,187,0.906,188,1.192,192,2.419,212,0.791,279,1.273,292,1.343,331,2.036,339,1.682,508,2.959,509,3.139,518,2.573,522,3.191,528,3.882,531,3.191,545,3.839,546,4.418,657,3.191,659,3.191,665,3.191,666,5.718,667,4.894,668,3.728,669,3.728,670,3.728,671,6.127,672,3.728,673,5.045,674,5.045,675,4.318,676,3.839,677,3.191,678,3.728,679,3.728,680,3.191,681,3.728,682,3.728,683,3.728,684,3.728,685,3.728,686,3.728,687,3.728,688,3.728,689,5.045,690,5.045,691,5.045]],["title/classes/LoginDto.html",[41,0.093,692,2.299]],["body/classes/LoginDto.html",[3,0.257,4,0.257,5,0.17,7,1.014,9,0.351,13,1.585,14,0.021,22,0.572,28,0.326,32,1.545,40,0.257,41,0.17,46,2.029,47,1.402,52,0.016,53,0.016,130,0.486,138,3.267,225,3.629,310,1.545,313,1.854,323,3.21,325,3.432,329,2.17,556,3.267,692,3.629,693,3.874,694,4.359,695,3.874,696,4.526,697,4.559,698,3.444,699,4.526,700,3.953,701,3.124,702,3.124]],["title/classes/PasswordTransformer.html",[41,0.093,703,2.504]],["body/classes/PasswordTransformer.html",[3,0.243,4,0.243,5,0.161,7,1.371,9,0.332,10,1.238,14,0.021,22,0.551,24,1.238,28,0.314,40,0.243,41,0.158,43,2.493,47,1.569,50,1.173,52,0.015,53,0.015,130,0.468,138,2.649,186,1.45,187,0.993,188,1.305,310,1.46,324,3.017,368,1.72,617,3.017,703,3.813,704,3.661,705,6.12,706,5.525,707,4.277,708,5.525,709,5.537,710,5.974,711,5.525,712,4.277,713,5.525,714,4.729,715,3.661,716,4.277]],["title/classes/PatchArticlePolicyHandler.html",[41,0.093,273,1.853]],["body/classes/PatchArticlePolicyHandler.html",[3,0.231,4,0.231,5,0.153,9,0.315,10,1.197,14,0.021,22,0.406,24,0.91,28,0.361,34,1.464,35,1.316,40,0.375,41,0.163,50,1.346,52,0.015,53,0.015,130,0.506,186,1.067,187,0.73,188,0.96,212,1.267,272,2.076,273,2.73,274,1.948,276,1.834,279,1.387,310,1.387,334,2.4,562,2.73,568,2.383,570,2.219,579,3.615,606,2.219,615,2.918,616,2.219,617,3.598,618,3.522,619,3.386,620,4.286,622,2.076,623,3.502,624,3.134,625,2.076,626,2.383,627,3.386,628,2.076,629,3.386,717,4.064]],["title/classes/PatchUserDto.html",[41,0.093,718,2.299]],["body/classes/PatchUserDto.html",[3,0.229,4,0.229,5,0.152,7,0.902,9,0.312,13,1.114,14,0.021,22,0.402,28,0.338,32,1.374,40,0.302,41,0.174,46,2.035,47,1.394,52,0.014,53,0.014,130,0.504,136,2.135,138,2.546,157,1.915,213,2.713,310,1.374,313,1.719,323,3.514,324,2.198,325,3.684,328,3.665,329,1.93,556,2.546,697,4.534,700,3.665,701,2.778,702,2.778,718,3.365,719,4.042,720,3.064,721,4.546,722,4.004,723,4.026,724,4.026,725,4.042,726,4.546,727,3.446,728,3.665,729,3.446,730,3.365,731,3.064,732,3.446]],["title/classes/PatchUserPolicyHandler.html",[41,0.093,274,1.739]],["body/classes/PatchUserPolicyHandler.html",[3,0.231,4,0.231,5,0.153,9,0.314,10,1.195,14,0.021,22,0.405,24,0.908,28,0.361,34,1.46,35,1.313,40,0.375,41,0.163,50,1.345,52,0.015,53,0.015,130,0.506,186,1.064,187,0.728,188,0.958,212,1.266,272,2.071,273,2.071,274,2.558,276,1.829,279,1.384,310,1.384,334,2.398,562,2.725,568,2.378,570,2.214,579,3.614,606,2.214,615,2.914,616,2.214,617,3.595,618,3.52,619,3.38,620,4.283,622,2.071,623,3.716,624,3.129,625,2.071,626,2.378,627,3.38,628,2.071,629,3.38,733,4.054]],["title/guards/PoliciesGuard.html",[270,1.981,644,2.504]],["body/guards/PoliciesGuard.html",[3,0.217,4,0.217,5,0.144,9,0.296,10,1.149,11,2.202,14,0.021,22,0.578,24,1.149,27,2.314,28,0.367,29,0.811,40,0.217,41,0.098,42,1.625,45,2.086,50,1.229,52,0.014,53,0.014,130,0.491,157,1.113,178,1.346,186,1.52,187,1.04,188,1.368,192,2.967,269,2.636,270,2.8,276,1.723,292,2.085,373,3.255,514,2.907,562,3.297,579,3.161,606,2.086,617,2.086,625,3.161,626,2.24,645,5.297,646,3.269,647,5.689,649,4.389,650,4.709,652,3.269,653,2.636,662,3.269,734,3.819,735,3.269,736,5.128,737,3.819,738,3.819,739,5.128,740,3.819,741,5.128,742,3.903,743,3.269,744,3.819,745,3.819,746,3.819,747,3.819,748,3.819,749,3.819,750,2.907,751,3.819,752,3.819]],["title/controllers/ProfileController.html",[0,1.38,753,2.504]],["body/controllers/ProfileController.html",[0,1.043,2,1.043,3,0.156,4,0.156,5,0.103,7,1.585,9,0.213,10,0.909,11,2.462,13,1.336,14,0.021,18,3.536,19,3.334,20,3.499,22,0.482,24,1.082,28,0.351,29,0.582,30,2.38,31,3.862,32,0.936,40,0.156,41,0.071,43,1.238,45,1.498,46,0.799,47,1.374,48,3.536,49,3.061,50,1.025,52,0.011,53,0.011,130,0.41,136,2.147,186,1.268,187,0.868,188,1.141,202,1.738,216,4.541,218,4.541,219,3.677,220,4.541,221,4.541,229,1.609,234,2.332,236,3.474,239,4.468,240,3.061,261,2.087,263,2.087,264,1.738,267,1.738,268,2.087,269,1.893,270,1.498,271,1.893,274,2.316,275,2.087,276,1.238,277,1.738,278,2.348,288,3.677,289,2.468,292,1.74,300,3.089,301,3.089,753,2.801,754,2.348,755,5.323,756,4.135,757,4.135,758,4.135,759,2.348,760,5.787,761,2.743,762,4.063,763,2.743,764,2.348,765,2.348,766,2.743,767,2.348,768,2.743,769,5.339,770,2.743,771,2.833,772,2.348,773,2.743,774,2.743,775,2.348,776,4.135,777,2.743,778,4.831,779,2.743,780,2.743,781,2.743,782,2.743]],["title/modules/ProfileModule.html",[54,1.239,64,2.299]],["body/modules/ProfileModule.html",[2,2.197,3,0.261,4,0.261,5,0.173,14,0.021,28,0.403,29,0.973,40,0.261,41,0.118,52,0.016,53,0.016,54,1.972,56,2.069,57,2.458,64,4.544,67,2.951,68,2.343,69,2.199,71,2.769,72,2.69,79,2.69,81,1.952,212,0.973,279,1.566,373,3.349,376,3.49,525,3.49,631,3.66,753,4.364,771,4.096,772,3.926,783,3.926,784,3.926,785,4.586,786,3.926,787,4.586]],["title/injectables/ProfileService.html",[178,0.952,771,2.128]],["body/injectables/ProfileService.html",[3,0.152,4,0.152,5,0.101,9,0.208,10,0.893,11,2.447,14,0.021,22,0.563,24,1.182,28,0.321,29,0.568,35,0.867,40,0.152,41,0.069,42,1.697,46,1.162,47,1.365,50,1.12,52,0.011,53,0.011,81,1.14,128,1.849,130,0.478,136,1.915,149,1.209,157,1.875,159,2.378,178,1.047,179,1.209,186,1.481,187,1.014,188,1.333,192,1.912,196,1.849,212,0.846,229,1.571,234,2.317,239,4.519,240,3.018,279,0.914,289,3.13,292,2.131,331,1.463,368,1.077,389,4.229,390,3.035,407,4.078,408,2.293,409,1.849,412,2.038,427,3.625,469,3.894,471,3.625,472,4.078,590,2.293,623,1.571,631,2.526,633,4.078,634,4.078,755,3.625,756,3.413,757,3.413,758,3.413,759,3.413,760,5.759,762,4.016,764,3.413,767,3.413,771,2.339,786,2.293,788,2.293,789,3.988,790,2.293,791,4.764,792,2.678,793,3.988,794,2.678,795,2.678,796,2.678,797,2.678,798,2.678,799,2.678,800,2.293,801,2.678,802,4.764,803,3.988,804,6.127,805,2.678,806,5.063,807,2.678,808,3.988,809,3.988,810,3.988,811,3.988,812,2.678,813,2.678,814,2.678,815,2.678,816,2.678,817,2.678]],["title/classes/RegisterDto.html",[41,0.093,818,2.299]],["body/classes/RegisterDto.html",[3,0.241,4,0.241,5,0.159,7,0.949,9,0.328,13,1.685,14,0.021,22,0.608,28,0.312,32,1.446,40,0.241,41,0.166,46,2.079,47,1.452,52,0.015,53,0.015,130,0.516,136,2.684,138,3.201,225,3.478,310,1.446,313,1.777,323,3.292,325,3.519,329,2.03,556,3.201,695,3.625,697,4.721,698,3.223,700,3.789,701,2.923,702,2.923,725,4.178,818,3.478,819,3.625,820,4.699,821,4.235,822,4.235,823,4.235,824,4.235]],["title/controllers/TagController.html",[0,1.38,825,2.504]],["body/controllers/TagController.html",[0,1.664,2,1.664,3,0.249,4,0.249,5,0.165,7,1.461,9,0.339,10,1.256,11,2.353,13,1.21,14,0.02,16,3.552,18,3.563,20,3.288,21,3.552,22,0.437,24,0.98,28,0.352,29,0.929,30,3.288,31,3.628,32,1.494,40,0.249,41,0.113,45,2.389,46,1.275,48,3.062,50,0.929,52,0.015,53,0.015,202,2.772,240,2.772,251,3.745,264,2.772,289,2.235,292,1.576,374,3.16,462,5.34,825,3.869,826,3.745,827,5.584,828,5.584,829,3.33,830,4.375,831,3.745,832,4.375,833,4.375,834,3.33,835,4.375,836,4.375,837,3.745]],["title/entities/TagEntity.html",[333,1.544,377,2.128]],["body/entities/TagEntity.html",[3,0.273,4,0.273,5,0.181,7,1.076,9,0.373,13,1.645,14,0.02,22,0.594,28,0.273,40,0.273,41,0.166,47,1.262,52,0.016,53,0.016,130,0.504,142,2.624,149,2.683,187,1.213,234,2.142,313,1.925,333,2.872,339,2.914,357,4.092,359,3.768,368,1.932,377,3.488,425,4.104,462,3.657,838,4.113,839,4.805,840,4.113,841,4.805,842,4.113]],["title/modules/TagModule.html",[54,1.239,65,2.299]],["body/modules/TagModule.html",[2,2.27,3,0.275,4,0.275,5,0.182,14,0.02,28,0.395,29,1.026,40,0.275,41,0.124,52,0.016,53,0.016,54,2.037,56,2.18,57,2.54,65,4.483,67,3.048,68,2.468,69,2.317,71,2.861,72,2.834,79,2.834,81,2.056,374,3.615,377,2.834,825,4.469,831,4.136,843,4.832,844,4.832,845,4.832,846,4.832,847,4.136,848,4.832]],["title/injectables/TagService.html",[178,0.952,374,1.853]],["body/injectables/TagService.html",[3,0.219,4,0.219,5,0.145,9,0.299,10,1.156,11,2.534,14,0.021,22,0.58,24,1.156,27,2.802,28,0.387,29,0.818,40,0.219,41,0.099,42,2.195,46,1.504,50,1.095,52,0.014,53,0.014,81,1.64,84,2.442,85,3.268,122,2.66,130,0.437,159,1.549,165,4.416,178,1.354,179,1.739,184,5.825,186,1.354,187,0.927,188,1.219,190,3.298,191,3.298,192,2.473,224,2.26,284,2.933,289,2.635,292,1.388,368,1.549,374,2.635,377,3.025,389,4.286,409,2.66,425,4.014,456,3.298,461,2.933,609,4.286,827,5.316,837,3.298,847,3.298,849,3.298,850,5.159,851,3.854,852,3.854,853,5.159,854,5.159,855,3.854,856,3.854,857,3.854,858,3.854,859,3.854,860,3.298,861,3.854,862,3.854,863,3.854,864,5.159,865,3.854,866,3.854,867,3.854,868,3.298]],["title/controllers/UserController.html",[0,1.38,869,2.504]],["body/controllers/UserController.html",[0,1.325,2,1.325,3,0.198,4,0.198,5,0.131,7,1.334,9,0.27,10,1.079,11,2.1,13,1.333,14,0.021,16,3.052,18,3.414,20,2.825,21,3.052,22,0.481,24,1.334,27,2.491,28,0.377,29,0.74,30,2.825,31,3.238,32,1.19,34,1.255,35,1.128,40,0.198,41,0.09,43,1.572,45,1.903,46,1.016,48,2.631,50,1.023,52,0.013,53,0.013,130,0.295,157,2.076,186,1.265,187,0.866,188,1.138,202,2.208,212,0.74,213,3.043,234,1.989,253,3.325,258,3.667,260,2.631,262,5.535,264,2.208,277,2.208,288,2.652,509,2.491,581,2.983,718,3.774,829,2.652,834,2.652,869,3.325,870,2.983,871,5.522,872,4.818,873,3.485,874,3.485,875,3.485,876,4.124,877,4.533,878,3.485,879,3.485,880,4.124,881,4.124,882,4.818,883,4.124,884,6.252,885,3.667,886,2.983,887,2.983,888,3.485,889,2.208,890,2.652,891,3.485,892,3.485,893,3.485,894,2.983,895,3.485,896,3.485]],["title/classes/UserDto.html",[41,0.093,722,2.299]],["body/classes/UserDto.html",[3,0.202,4,0.202,5,0.134,9,0.275,13,1.741,14,0.021,22,0.628,28,0.317,32,1.212,40,0.278,41,0.162,46,2.115,47,1.479,52,0.013,53,0.013,130,0.565,136,2.53,138,3.017,157,1.422,213,1.813,310,1.212,313,1.58,323,3.403,324,1.939,325,3.551,328,3.368,329,1.702,556,3.017,697,4.808,698,2.702,700,3.368,701,2.45,702,2.45,718,2.249,719,4.949,720,2.702,721,3.039,722,3.804,725,3.714,726,4.177,727,3.039,728,4.344,729,3.039,730,3.987,731,2.702,732,3.039,897,3.55,898,3.55,899,3.55,900,3.55,901,3.55,902,3.55,903,3.55,904,3.55,905,3.55]],["title/entities/UserEntity.html",[212,0.77,333,1.544]],["body/entities/UserEntity.html",[3,0.166,4,0.166,5,0.11,7,0.652,9,0.226,13,1.818,14,0.021,22,0.656,28,0.332,40,0.166,41,0.142,47,1.417,52,0.012,53,0.012,130,0.557,136,2.347,138,2.799,140,2.686,142,1.589,149,1.913,157,1.457,159,1.17,187,0.762,203,3.451,212,0.9,224,2.486,234,1.527,313,1.372,324,2.731,331,1.589,333,2.593,334,2.529,339,2.256,350,1.707,353,2.491,357,3.168,359,4.592,368,1.17,432,4.28,460,3.629,519,2.806,521,2.009,551,2.009,555,3.699,556,2.799,570,1.589,584,2.686,703,3.791,709,3.629,728,4.03,730,3.168,840,2.491,842,2.491,906,2.491,907,4.239,908,2.911,909,2.911,910,2.911,911,2.911,912,2.911,913,2.911,914,3.226,915,2.911,916,4.181,917,3.629,918,2.911,919,4.239,920,4.239,921,2.491,922,4.239,923,2.911,924,2.911,925,4.239,926,4.239,927,4.239,928,4.239,929,4.239,930,2.911,931,3.629,932,3.226,933,3.629,934,3.629,935,2.911,936,4.239,937,4.239,938,4.239,939,5,940,2.911]],["title/entities/UserRoles.html",[333,1.544,519,1.853]],["body/entities/UserRoles.html",[3,0.212,4,0.212,5,0.14,7,0.833,8,3.834,9,0.288,13,1.58,14,0.021,22,0.57,28,0.325,34,1.34,35,1.204,40,0.212,41,0.147,52,0.014,53,0.014,130,0.519,142,2.031,157,1.966,212,1.299,229,2.954,234,1.814,313,1.631,333,2.806,339,2.577,341,3.184,345,3.184,350,3.59,357,3.619,359,4.346,367,4.312,368,1.495,519,2.573,547,4.312,555,3.192,569,5.475,584,4.273,585,2.831,589,4.312,755,4.659,889,2.357,914,3.834,921,3.184,931,4.312,932,3.834,933,4.312,934,4.312,941,5.24,942,3.184,943,3.72,944,6.122,945,3.72,946,5.037,947,5.037,948,3.834,949,5.037,950,5.037,951,5.037,952,5.037,953,3.72]],["title/controllers/UsersController.html",[0,1.38,954,2.504]],["body/controllers/UsersController.html",[0,1.544,2,0.788,3,0.118,4,0.118,5,0.078,7,1.573,9,0.161,10,0.734,11,2.411,13,1.276,14,0.021,16,2.923,18,3.337,19,2.26,20,3.4,21,2.923,22,0.46,24,1.196,27,2.757,28,0.361,29,0.44,30,1.92,31,3.656,32,0.707,34,0.746,35,0.671,38,2.802,39,1.774,40,0.118,41,0.053,42,1.394,43,2.523,44,1.215,46,0.954,47,1.187,48,3.337,49,2.075,50,0.979,52,0.009,53,0.009,130,0.391,136,2.586,140,2.075,157,2.055,159,0.833,186,1.211,187,0.829,188,1.09,192,1.57,202,1.313,212,0.44,213,2.728,216,3.511,217,2.26,218,3.511,219,2.492,220,3.511,221,3.511,223,3.948,225,2.923,229,2.946,260,2.217,261,2.492,263,1.577,264,1.313,267,1.313,268,1.577,269,1.43,270,1.132,271,1.43,275,1.577,276,0.935,289,2.074,292,1.462,300,1.577,301,1.577,469,1.43,507,2.743,509,2.081,536,3.09,546,2.26,551,3.467,556,1.57,628,1.673,667,2.803,692,3.183,694,4.542,728,2.26,730,2.075,765,1.774,775,1.774,776,2.803,818,3.183,820,4.3,828,4.571,829,2.492,834,2.492,877,2.492,880,2.803,885,2.492,889,1.313,890,1.577,954,2.26,955,1.774,956,4.06,957,4.06,958,2.072,959,2.072,960,2.072,961,2.072,962,3.275,963,3.275,964,2.803,965,2.803,966,2.072,967,2.072,968,3.275,969,2.492,970,2.072,971,2.072,972,2.072,973,2.803,974,2.072,975,2.072,976,4.613,977,2.072,978,2.803,979,1.774,980,2.072,981,2.072,982,1.774,983,1.774,984,2.072,985,2.072,986,2.072,987,3.275,988,3.275,989,3.275,990,3.275,991,3.275,992,2.072,993,2.072,994,2.072,995,1.774,996,2.072,997,2.072]],["title/modules/UsersModule.html",[54,1.239,66,2.299]],["body/modules/UsersModule.html",[2,2.032,3,0.231,4,0.231,5,0.153,14,0.021,28,0.412,29,0.863,40,0.231,41,0.105,52,0.015,53,0.015,54,1.824,56,1.834,57,2.274,62,3.967,66,4.526,67,2.73,68,2.076,69,1.948,71,2.562,72,3.134,79,2.383,81,1.729,93,3.479,157,1.185,212,0.863,270,2.918,271,2.805,373,3.243,376,3.093,509,3.052,519,2.73,521,2.805,525,3.093,641,3.688,653,2.805,869,4.121,889,2.575,890,3.093,954,4.121,998,4.064,999,4.064,1000,4.064,1001,4.064,1002,5.344,1003,4.064,1004,4.064,1005,4.064,1006,4.064,1007,4.064,1008,4.064]],["title/injectables/UsersService.html",[178,0.952,509,1.637]],["body/injectables/UsersService.html",[3,0.104,4,0.104,5,0.069,7,0.661,9,0.141,10,0.661,11,2.329,14,0.021,16,1.153,21,1.153,22,0.552,24,1.415,26,1.384,27,3.043,28,0.342,29,0.386,34,0.655,35,0.589,40,0.104,41,0.047,42,1.822,43,2.71,44,1.73,46,0.86,47,1.373,49,1.869,50,1.127,52,0.008,53,0.008,81,0.774,130,0.469,136,2.628,138,2.879,140,3.193,157,2.093,159,1.892,178,0.775,179,0.821,186,1.451,187,1.027,188,1.306,192,1.414,212,0.386,213,2.999,217,2.955,229,3.113,234,1.912,253,1.256,258,3.258,289,2.404,292,1.695,339,1.679,350,1.067,368,0.731,389,3.943,390,2.832,409,1.256,412,1.384,427,1.384,431,1.557,469,2.955,471,1.384,481,1.256,484,1.557,509,1.331,519,1.901,521,1.256,551,2.036,555,2.358,556,2.256,574,1.384,584,1.153,677,2.525,692,2.982,694,1.384,714,2.525,715,2.525,722,1.153,730,1.153,790,1.557,818,2.982,860,2.525,868,3.186,876,2.525,877,4.66,885,3.835,886,1.557,887,1.557,889,1.153,894,2.525,914,2.245,916,1.384,917,1.557,932,1.384,948,2.245,964,3.665,965,2.525,969,2.245,978,3.186,979,1.557,982,1.557,983,1.557,1009,1.557,1010,2.95,1011,2.95,1012,3.722,1013,3.722,1014,1.819,1015,2.95,1016,1.819,1017,2.95,1018,2.95,1019,1.819,1020,2.95,1021,2.95,1022,4.281,1023,1.819,1024,2.95,1025,1.819,1026,5.039,1027,2.95,1028,1.819,1029,2.95,1030,1.819,1031,2.95,1032,1.819,1033,1.819,1034,2.95,1035,2.95,1036,2.95,1037,1.819,1038,1.819,1039,1.819,1040,1.819,1041,1.819,1042,1.819,1043,1.819,1044,1.819,1045,1.819,1046,1.819,1047,1.819,1048,1.819,1049,1.819,1050,1.819,1051,1.819,1052,3.186,1053,1.819,1054,2.525,1055,1.557,1056,1.819,1057,1.819,1058,1.819,1059,1.819,1060,1.819,1061,1.819,1062,1.557,1063,1.819,1064,1.819,1065,1.819,1066,1.557,1067,1.819,1068,1.819,1069,1.819,1070,2.525,1071,1.819,1072,1.819,1073,1.819,1074,1.819,1075,2.95,1076,1.819,1077,1.819,1078,1.819,1079,1.819,1080,1.819]],["title/coverage.html",[1081,4.239]],["body/coverage.html",[0,2.273,1,1.902,5,0.104,6,2.359,14,0.021,36,1.616,38,1.902,41,0.176,52,0.011,53,0.011,71,1.321,130,0.234,157,0.803,159,1.108,178,1.702,180,2.359,199,2.097,200,1.902,201,2.359,212,0.585,214,1.616,250,1.746,267,1.746,270,1.505,272,1.408,273,1.408,274,1.321,277,1.746,280,1.616,291,1.616,311,3.1,312,3.1,333,2.43,334,1.108,335,2.359,355,5.595,373,1.321,374,1.408,377,1.616,383,2.359,487,2.359,488,2.359,507,1.505,508,1.616,509,1.244,510,2.097,519,1.408,535,2.359,558,2.097,609,1.902,610,2.359,611,2.359,615,3.118,616,3.118,618,1.408,622,1.408,628,1.408,631,1.746,632,2.359,641,1.902,642,2.359,643,2.359,644,1.902,655,2.097,665,2.359,692,1.746,693,2.359,703,1.902,704,2.359,718,1.746,719,3.1,720,3.1,722,1.746,735,2.359,742,2.097,750,2.097,753,1.902,754,2.359,771,1.616,788,2.359,818,1.746,819,2.359,825,1.902,826,2.359,838,2.359,849,2.359,869,1.902,870,2.359,906,2.359,941,2.359,942,2.359,954,1.902,955,2.359,1009,2.359,1081,2.359,1082,2.756,1083,2.756,1084,2.359,1085,5.951,1086,2.359,1087,6.899,1088,7,1089,2.756,1090,5.352,1091,2.756,1092,2.756,1093,2.756,1094,4.073,1095,2.756,1096,6.482,1097,3.486,1098,2.359,1099,4.073,1100,2.756,1101,2.756,1102,3.486,1103,3.486,1104,3.486,1105,4.845,1106,2.359,1107,3.1,1108,2.359,1109,4.346,1110,2.359,1111,2.359,1112,6.184,1113,2.359,1114,2.359,1115,2.359,1116,2.756,1117,2.756,1118,2.756,1119,2.756,1120,2.756,1121,2.756,1122,2.359,1123,2.756,1124,2.756,1125,2.756,1126,2.359]],["title/dependencies.html",[57,1.857,1127,2.593]],["body/dependencies.html",[5,0.149,14,0.021,29,0.843,32,1.355,41,0.136,52,0.014,53,0.014,57,1.689,75,2.515,77,3.398,78,3.021,81,1.689,82,3.398,84,2.515,85,3.739,89,3.398,90,3.398,324,2.168,329,1.903,368,1.596,410,3.398,489,3.398,516,3.021,518,2.74,528,2.515,567,3.398,653,2.74,680,3.398,916,3.021,1128,3.97,1129,6.961,1130,3.97,1131,5.262,1132,3.97,1133,3.97,1134,3.97,1135,3.97,1136,3.97,1137,3.97,1138,3.97,1139,3.97,1140,3.97,1141,5.262,1142,4.504,1143,3.97,1144,3.97,1145,3.97,1146,3.97,1147,3.97,1148,3.97,1149,3.97,1150,3.97,1151,3.97,1152,6.285,1153,3.97,1154,3.97,1155,3.398,1156,3.97,1157,3.97,1158,3.97,1159,3.97,1160,3.97,1161,3.97,1162,3.97,1163,3.97,1164,3.97,1165,3.97,1166,3.97,1167,3.97,1168,3.97,1169,3.97,1170,3.97,1171,3.97,1172,3.97,1173,3.97,1174,3.97,1175,3.97,1176,3.97,1177,3.97,1178,3.97,1179,3.97,1180,3.97,1181,3.97,1182,3.97,1183,3.97,1184,3.97]],["title/miscellaneous/functions.html",[1185,1.777,1186,3.735]],["body/miscellaneous/functions.html",[9,0.444,14,0.018,52,0.018,53,0.018,1109,4.353,1110,5.955,1185,3.355,1186,4.896,1187,4.896]],["title/index.html",[9,0.235,1188,3.029,1189,2.593]],["body/index.html",[5,0.143,7,0.675,8,3.629,14,0.019,35,1.226,47,0.396,48,1.019,52,0.008,53,0.008,54,1.628,57,1.612,69,2.286,84,2.754,85,1.909,101,1.598,103,2.882,105,1.598,107,1.598,109,1.598,111,1.598,113,1.598,115,1.598,117,1.598,119,1.598,124,1.598,128,3.519,130,0.255,136,0.751,138,1.444,140,3.907,147,3.242,150,2.882,159,0.751,181,3.242,187,0.335,188,0.441,196,4.177,199,2.293,217,2.079,330,3,336,1.095,350,2.797,368,2.244,544,1.598,545,2.293,546,1.288,548,1.598,549,2.579,550,1.598,554,2.579,574,3.629,587,1.598,598,1.598,675,2.579,676,1.421,731,1.421,743,1.598,762,1.421,800,3.72,806,2.579,883,1.598,948,2.882,973,1.598,995,3.72,1052,4.082,1054,1.598,1055,1.598,1062,1.598,1066,1.598,1070,1.598,1085,2.579,1107,3.629,1126,1.598,1155,2.579,1189,1.598,1190,3.013,1191,1.867,1192,3.013,1193,3.788,1194,1.867,1195,1.867,1196,1.867,1197,3.013,1198,1.867,1199,3.013,1200,1.867,1201,1.867,1202,3.788,1203,1.867,1204,3.013,1205,4.769,1206,5.099,1207,4.347,1208,5.365,1209,3.013,1210,3.788,1211,3.013,1212,3.013,1213,3.788,1214,1.867,1215,5.365,1216,1.867,1217,3.013,1218,1.867,1219,1.867,1220,5.099,1221,1.867,1222,1.867,1223,1.867,1224,1.867,1225,4.347,1226,3.013,1227,6.357,1228,4.347,1229,4.347,1230,1.867,1231,3.013,1232,1.867,1233,1.867,1234,1.867,1235,5.365,1236,3.013,1237,3.013,1238,3.013,1239,3.788,1240,3.013,1241,1.867,1242,1.867,1243,1.867,1244,1.867,1245,1.867,1246,5.919,1247,4.347,1248,1.867,1249,1.867,1250,1.867,1251,1.867,1252,3.013,1253,1.867,1254,1.867,1255,1.867,1256,1.867,1257,1.867,1258,3.013,1259,1.867,1260,1.867,1261,3.788,1262,3.788,1263,5.583,1264,1.867,1265,4.347,1266,1.867,1267,1.867,1268,3.788,1269,1.867,1270,1.867,1271,1.867,1272,1.867,1273,3.013,1274,1.867,1275,5.583,1276,1.867,1277,1.867,1278,1.867,1279,1.867,1280,1.867,1281,3.013,1282,1.867,1283,1.867,1284,1.867,1285,1.867,1286,1.867,1287,1.867,1288,1.867,1289,1.867,1290,4.347,1291,1.867,1292,1.867,1293,3.013,1294,1.867,1295,1.867,1296,1.867,1297,1.867,1298,1.867,1299,1.867,1300,1.867,1301,1.867,1302,1.867,1303,3.013,1304,1.867,1305,1.867,1306,1.867,1307,1.867,1308,3.013,1309,1.867,1310,1.867,1311,1.867,1312,1.867,1313,3.013,1314,3.013,1315,1.867,1316,1.867,1317,1.867,1318,1.867,1319,1.598,1320,1.867,1321,1.867,1322,3.013,1323,1.867,1324,1.867,1325,1.867,1326,3.013,1327,1.867,1328,1.867,1329,1.867,1330,3.788,1331,3.788,1332,1.867,1333,1.867,1334,1.867,1335,3.013,1336,3.013,1337,1.867,1338,1.867,1339,1.867,1340,1.867,1341,3.013,1342,1.867,1343,1.867,1344,1.867,1345,1.867,1346,1.867,1347,3.013,1348,1.867,1349,1.867,1350,1.867,1351,1.867,1352,1.867,1353,3.013,1354,1.867,1355,3.013,1356,1.867,1357,1.867,1358,1.867,1359,1.867,1360,1.867,1361,1.867,1362,1.867,1363,3.013,1364,4.347,1365,1.867,1366,1.867,1367,1.867,1368,3.788,1369,3.788,1370,3.013,1371,1.867,1372,1.867,1373,1.867,1374,1.867,1375,1.867,1376,1.867,1377,1.867,1378,1.867,1379,1.867,1380,1.867,1381,1.867,1382,1.867,1383,1.867,1384,1.867,1385,1.867,1386,1.867,1387,3.788,1388,3.013,1389,1.867,1390,3.788,1391,3.013,1392,3.013,1393,3.013,1394,3.013,1395,1.867,1396,3.013,1397,3.013,1398,3.013,1399,3.013,1400,1.867,1401,1.867,1402,1.867,1403,2.579,1404,3.013,1405,1.867,1406,1.867,1407,1.867,1408,1.867,1409,1.867,1410,1.867,1411,1.867,1412,1.867,1413,1.867,1414,1.867,1415,1.867,1416,1.867,1417,1.867,1418,1.867,1419,1.867,1420,1.867,1421,1.867,1422,1.867,1423,1.867,1424,1.867,1425,1.867,1426,1.867,1427,1.867,1428,1.867,1429,1.867,1430,1.867,1431,1.867,1432,1.867,1433,1.598,1434,1.867,1435,1.867,1436,1.867,1437,1.867,1438,1.867,1439,1.867,1440,1.867,1441,1.598,1442,1.598,1443,1.867]],["title/modules.html",[56,2.235]],["body/modules.html",[14,0.017,52,0.017,53,0.017,55,3.61,56,2.36,61,3.314,62,3.068,63,3.314,64,3.314,65,3.314,66,3.314,1142,6.239,1433,6.239,1444,7.289,1445,7.289]],["title/overview.html",[1446,4.239]],["body/overview.html",[2,1.44,14,0.02,36,3.38,52,0.014,53,0.014,55,5.049,56,1.708,57,2.169,58,3.24,59,3.24,60,3.24,61,4.421,62,4.203,63,4.2,64,4.292,65,4.077,66,4.421,67,2.604,68,1.934,69,1.815,142,2.067,179,1.708,280,3.38,310,1.292,371,3.24,372,3.24,373,3.381,374,3.149,417,3.24,481,3.518,504,3.24,505,3.24,506,3.24,507,3.699,508,3.973,509,2.782,602,3.24,604,3.24,622,1.934,644,2.613,771,3.38,783,3.24,784,3.24,1446,3.24,1447,3.786,1448,3.786,1449,3.786,1450,3.786]],["title/properties.html",[313,1.413,1127,2.593]],["body/properties.html",[14,0.02,52,0.018,53,0.018,313,1.833,336,3.321,1441,4.847,1442,4.847,1451,4.847,1452,5.663,1453,5.663,1454,5.663]],["title/miscellaneous/typealiases.html",[1185,1.777,1455,4.364]],["body/miscellaneous/typealiases.html",[9,0.416,14,0.019,52,0.017,53,0.017,130,0.455,558,4.081,562,2.739,566,4.589,572,5.44,579,3.246,615,2.928,616,3.699,618,2.739,624,3.972,625,3.246,750,4.081,1185,3.144,1456,5.362,1457,6.355,1458,6.355]],["title/miscellaneous/variables.html",[1185,1.777,1459,3.735]],["body/miscellaneous/variables.html",[7,1.031,9,0.253,14,0.021,18,1.783,38,3.178,47,1.344,50,0.977,52,0.013,53,0.013,71,2.207,103,3.504,128,2.254,130,0.587,149,2.077,157,1.688,159,1.313,187,0.587,196,4.372,198,2.795,212,0.693,240,2.069,267,2.917,276,2.077,277,2.917,292,1.176,331,1.783,339,2.406,350,4.187,481,3.996,507,1.783,508,1.915,510,2.485,514,2.485,519,2.352,555,2.069,556,1.566,584,2.917,585,3.504,625,1.668,650,2.485,655,3.504,660,2.795,676,3.504,710,6.111,742,3.504,881,2.795,969,2.485,1084,2.795,1086,3.941,1097,2.795,1098,3.941,1102,2.795,1103,2.795,1104,4.564,1106,2.795,1107,4.407,1108,2.795,1109,2.485,1111,3.941,1113,3.941,1114,3.941,1115,3.941,1122,2.795,1185,1.915,1187,4.956,1319,2.795,1403,2.795,1451,2.795,1459,2.795,1460,4.604,1461,3.266,1462,3.266,1463,4.604,1464,3.266,1465,3.266,1466,4.604,1467,3.266,1468,3.266,1469,3.266,1470,3.266,1471,3.266,1472,3.266,1473,3.266,1474,3.266,1475,3.266,1476,3.266,1477,3.266,1478,4.604,1479,3.266,1480,3.266,1481,5.332,1482,3.266,1483,3.266,1484,3.266]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":355,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":418,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":1452,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":481,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.6.5",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1088,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":1450,"title":{},"body":{"overview.html":{}}}],["14.0.0",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":1230,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":216,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["20m",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":1309,"title":{},"body":{"index.html":{}}}],["255",{"_index":920,"title":{},"body":{"entities/UserEntity.html":{}}}],["3.0.0",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1378,"title":{},"body":{"index.html":{}}}],["37",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1310,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":1067,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":1448,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":417,"title":{},"body":{"injectables/ArticleService.html":{},"overview.html":{}}}],["6.0.0",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1447,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1149,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1449,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":562,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":629,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["ability.can(useractionsenum.update",{"_index":627,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["abilitybuilder",{"_index":563,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":564,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1417,"title":{},"body":{"index.html":{}}}],["access",{"_index":589,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":1283,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1334,"title":{},"body":{"index.html":{}}}],["account",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1416,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1324,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1332,"title":{},"body":{"index.html":{}}}],["addarticletofavorites",{"_index":384,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addarticletofavorites(slug",{"_index":393,"title":{},"body":{"injectables/ArticleService.html":{}}}],["again",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":1314,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1456,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":1307,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1202,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1141,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1454,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1343,"title":{},"body":{"index.html":{}}}],["api",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":198,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":323,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isalpha()@isnotempty",{"_index":612,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isalphanumeric()@isnotempty",{"_index":904,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":899,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":316,"title":{},"body":{"classes/ArticleDto.html":{}}}],["apiproperty()@isnotempty()@isalphanumeric",{"_index":823,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":695,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isnotempty()@isfqdn",{"_index":901,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@maxlength(255",{"_index":897,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":698,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@type(undefined)@validatenested",{"_index":723,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty({required",{"_index":319,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1409,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":264,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apitags('articles",{"_index":286,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apitags('profile",{"_index":773,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('tags",{"_index":832,"title":{},"body":{"controllers/TagController.html":{}}}],["apitags('user",{"_index":891,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1432,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":1002,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":579,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1199,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1435,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1457,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":1187,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1458,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../user.decorator.ts",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":1084,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":180,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":189,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/article/article.controller.ts",{"_index":201,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["apps/api/src/article/article.controller.ts:123",{"_index":230,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:139",{"_index":244,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:162",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:42",{"_index":252,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:61",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:83",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:97",{"_index":259,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.entity.ts",{"_index":335,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/article.entity.ts:14",{"_index":358,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:17",{"_index":360,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:20",{"_index":364,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:23",{"_index":354,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:26",{"_index":347,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:29",{"_index":352,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:32",{"_index":365,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:35",{"_index":363,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:38",{"_index":356,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:46",{"_index":344,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.module.ts",{"_index":375,"title":{},"body":{"modules/ArticleModule.html":{}}}],["apps/api/src/article/article.service.ts",{"_index":383,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["apps/api/src/article/article.service.ts:105",{"_index":401,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:109",{"_index":397,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:129",{"_index":406,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:149",{"_index":394,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:174",{"_index":399,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:18",{"_index":391,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:198",{"_index":396,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:27",{"_index":404,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:35",{"_index":402,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/dto/articles",{"_index":487,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/create",{"_index":311,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":510,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.module.ts:43",{"_index":513,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":1097,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:16",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:35",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":693,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:14",{"_index":696,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:22",{"_index":699,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":819,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:19",{"_index":821,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:27",{"_index":824,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:35",{"_index":822,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":642,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":665,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":669,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":672,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":1102,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":558,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:22",{"_index":561,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":605,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":1103,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":735,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":738,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":740,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":737,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":615,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":1106,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":1108,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":1109,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/profile/follow.entity.ts",{"_index":632,"title":{},"body":{"entities/FollowEntity.html":{},"coverage.html":{}}}],["apps/api/src/profile/follow.entity.ts:12",{"_index":636,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:6",{"_index":637,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:9",{"_index":635,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/profile.controller.ts",{"_index":754,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.controller.ts:33",{"_index":766,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:56",{"_index":763,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:79",{"_index":770,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.module.ts",{"_index":785,"title":{},"body":{"modules/ProfileModule.html":{}}}],["apps/api/src/profile/profile.service.ts",{"_index":788,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.service.ts:11",{"_index":792,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:19",{"_index":796,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:41",{"_index":795,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:71",{"_index":797,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:97",{"_index":794,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/tag/dto/create",{"_index":610,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts",{"_index":826,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts:15",{"_index":830,"title":{},"body":{"controllers/TagController.html":{}}}],["apps/api/src/tag/tag.entity.ts",{"_index":838,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.entity.ts:12",{"_index":841,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.entity.ts:9",{"_index":839,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.module.ts",{"_index":845,"title":{},"body":{"modules/TagModule.html":{}}}],["apps/api/src/tag/tag.service.ts",{"_index":849,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.service.ts:11",{"_index":852,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:18",{"_index":856,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:22",{"_index":855,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/users/dto/patch",{"_index":719,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":704,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":712,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":707,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":941,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts",{"_index":870,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts:21",{"_index":879,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.controller.ts:33",{"_index":875,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.decorator.ts",{"_index":1122,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":906,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:26",{"_index":913,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:32",{"_index":935,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:38",{"_index":910,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:44",{"_index":909,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:50",{"_index":915,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:56",{"_index":930,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:68",{"_index":924,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:71",{"_index":908,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:75",{"_index":912,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:120",{"_index":961,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:51",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:75",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:98",{"_index":967,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":1001,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:110",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:132",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:148",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:42",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:51",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:61",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:78",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":1238,"title":{},"body":{"index.html":{}}}],["array",{"_index":362,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["article.author",{"_index":460,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["article.author.id",{"_index":473,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.controller",{"_index":380,"title":{},"body":{"modules/ArticleModule.html":{}}}],["article.dto",{"_index":285,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["article.dto.ts",{"_index":312,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["article.dto.ts:13",{"_index":322,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:17",{"_index":318,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:21",{"_index":317,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:28",{"_index":321,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:35",{"_index":608,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["article.entity",{"_index":381,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["article.favoritescount",{"_index":483,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":480,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.service",{"_index":281,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["article.slug",{"_index":458,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":457,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist.map((name",{"_index":466,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article/article.entity",{"_index":570,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{}}}],["article/article.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["articlecontroller",{"_index":200,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articledto",{"_index":291,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["articleentity",{"_index":334,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["articleindex",{"_index":485,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":478,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":479,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":61,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":392,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articles",{"_index":203,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["articles.map((article",{"_index":452,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":440,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleservice",{"_index":280,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesqueryparams",{"_index":250,"title":{"classes/ArticlesQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["articleswithfavorited",{"_index":451,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":1004,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":643,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":648,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":651,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":523,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/dto/login.dto",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/dto/register.dto",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":1003,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["authenticated",{"_index":882,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticating",{"_index":1313,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authentication/authorization",{"_index":1221,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":654,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":658,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":62,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":336,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"index.html":{},"properties.html":{}}}],["author.favorites.map((el",{"_index":434,"title":{},"body":{"injectables/ArticleService.html":{}}}],["author.id",{"_index":429,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authservice",{"_index":507,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1288,"title":{},"body":{"index.html":{}}}],["await",{"_index":289,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1219,"title":{},"body":{"index.html":{}}}],["bad",{"_index":218,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":674,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":927,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":366,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["behind",{"_index":1298,"title":{},"body":{"index.html":{}}}],["below",{"_index":1255,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1329,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":946,"title":{},"body":{"entities/UserRoles.html":{}}}],["bio",{"_index":728,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["body",{"_index":260,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["body('article",{"_index":303,"title":{},"body":{"controllers/ArticleController.html":{}}}],["boilerplate",{"_index":1215,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":623,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{}}}],["boolean(follow",{"_index":807,"title":{},"body":{"injectables/ProfileService.html":{}}}],["bootstrap",{"_index":1110,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1225,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1335,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1425,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1236,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1445,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1142,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":582,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["buildarticleresponse",{"_index":385,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":395,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":1194,"title":{},"body":{"index.html":{}}}],["buildprofileresponse",{"_index":789,"title":{},"body":{"injectables/ProfileService.html":{}}}],["buildprofileresponse(profile",{"_index":793,"title":{},"body":{"injectables/ProfileService.html":{}}}],["built",{"_index":1282,"title":{},"body":{"index.html":{}}}],["can't",{"_index":809,"title":{},"body":{"injectables/ProfileService.html":{}}}],["can(useractionsenum.delete",{"_index":595,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.manage",{"_index":586,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":591,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":594,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":645,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":649,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1365,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":952,"title":{},"body":{"entities/UserRoles.html":{}}}],["case",{"_index":863,"title":{},"body":{"injectables/TagService.html":{}}}],["casl",{"_index":571,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":606,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":567,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":376,"title":{},"body":{"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":268,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":271,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":275,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["caslfactory",{"_index":373,"title":{"injectables/CaslFactory.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":63,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":862,"title":{},"body":{"injectables/TagService.html":{}}}],["cert.pem",{"_index":1376,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1364,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1367,"title":{},"body":{"index.html":{}}}],["change",{"_index":1344,"title":{},"body":{"index.html":{}}}],["check",{"_index":743,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":742,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":267,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":301,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["checks",{"_index":673,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":1237,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1337,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":1207,"title":{},"body":{"index.html":{}}}],["class",{"_index":41,"title":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":310,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["clone",{"_index":1258,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":371,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":372,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":504,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":505,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":506,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":602,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":604,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":603,"title":{},"body":{"modules/CaslModule.html":{}}}],["cluster_profilemodule",{"_index":783,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":784,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":843,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_tagmodule_providers",{"_index":844,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":998,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":999,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1000,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1402,"title":{},"body":{"index.html":{}}}],["column",{"_index":359,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["column('simple",{"_index":361,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":353,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":918,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":345,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["column({unique",{"_index":840,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["comes",{"_index":1220,"title":{},"body":{"index.html":{}}}],["coming",{"_index":580,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":1268,"title":{},"body":{"index.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["compose",{"_index":1252,"title":{},"body":{"index.html":{}}}],["config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":1206,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1423,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1278,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1312,"title":{},"body":{"index.html":{}}}],["connections",{"_index":1323,"title":{},"body":{"index.html":{}}}],["console.log('follow",{"_index":805,"title":{},"body":{"injectables/ProfileService.html":{}}}],["const",{"_index":292,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(articlerepository",{"_index":388,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(configservice",{"_index":668,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":183,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":646,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(tagrepository",{"_index":851,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":790,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["container",{"_index":1293,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1203,"title":{},"body":{"index.html":{}}}],["context",{"_index":652,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":663,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":662,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":746,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":1243,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":287,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('profile",{"_index":774,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('tags",{"_index":833,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('user",{"_index":892,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('users",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":1345,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1081,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1266,"title":{},"body":{"index.html":{}}}],["create",{"_index":217,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["createarticle",{"_index":204,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(user",{"_index":211,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticledto",{"_index":214,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["created",{"_index":948,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createdarticle",{"_index":463,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createdat",{"_index":337,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["createforuser",{"_index":559,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":560,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createparamdecorator",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('articles",{"_index":421,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createquerybuilder('users",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtag",{"_index":850,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(tag",{"_index":854,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto",{"_index":609,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["createtoken",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":461,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{}}}],["crud",{"_index":1222,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":714,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":715,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":881,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":351,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["currently",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuser",{"_index":447,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuser.favorites.map((favorite",{"_index":448,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":1066,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":877,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1419,"title":{},"body":{"index.html":{}}}],["date",{"_index":348,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["date%.log",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1377,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1411,"title":{},"body":{"index.html":{}}}],["default",{"_index":350,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":527,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':slug",{"_index":305,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite",{"_index":308,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":959,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username/follow",{"_index":781,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":768,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletearticle",{"_index":205,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites",{"_index":206,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":398,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlepolicyhandler",{"_index":272,"title":{"classes/DeleteArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["deletearticlepolicyhandler())@apiresponse({status",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deleted",{"_index":965,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":1079,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":958,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":628,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":960,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1391,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1297,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1240,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1205,"title":{},"body":{"index.html":{}}}],["desc",{"_index":439,"title":{},"body":{"injectables/ArticleService.html":{}}}],["describe",{"_index":1407,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":1250,"title":{},"body":{"index.html":{}}}],["detached",{"_index":1294,"title":{},"body":{"index.html":{}}}],["details",{"_index":598,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":597,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":599,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":1302,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1440,"title":{},"body":{"index.html":{}}}],["development",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":1322,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1291,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1227,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1390,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1395,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1401,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":199,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":1262,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1248,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":1232,"title":{},"body":{"index.html":{}}}],["dto",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["dto/articles",{"_index":282,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/create",{"_index":284,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["dto/patch",{"_index":886,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":864,"title":{},"body":{"injectables/TagService.html":{}}}],["dynamic",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":332,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{}}}],["eager",{"_index":343,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["edit",{"_index":258,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["edit(userid",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser",{"_index":871,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":873,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1195,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":435,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1429,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1381,"title":{},"body":{"index.html":{}}}],["employs",{"_index":925,"title":{},"body":{"entities/UserEntity.html":{}}}],["empty",{"_index":1316,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1357,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":1305,"title":{},"body":{"index.html":{}}}],["end",{"_index":1397,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1319,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":333,"title":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":944,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":1265,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1267,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1107,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":810,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagService.html":{}}}],["everything",{"_index":590,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["example",{"_index":731,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["exclude",{"_index":936,"title":{},"body":{"entities/UserEntity.html":{}}}],["exec",{"_index":1386,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":736,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":739,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":1290,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":650,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":471,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1270,"title":{},"body":{"index.html":{}}}],["exists",{"_index":868,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":690,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":534,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1321,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exportable",{"_index":799,"title":{},"body":{"injectables/ProfileService.html":{}}}],["exports",{"_index":511,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":1276,"title":{},"body":{"index.html":{}}}],["express",{"_index":1331,"title":{},"body":{"index.html":{}}}],["extends",{"_index":657,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1422,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":679,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":683,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":565,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":331,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":923,"title":{},"body":{"entities/UserEntity.html":{}}}],["false})@isoptional()@isint()@min(1",{"_index":496,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isint()@min(1)@max(100",{"_index":494,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring",{"_index":491,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring({each",{"_index":320,"title":{},"body":{"classes/ArticleDto.html":{}}}],["fastify",{"_index":1155,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["favorite.id",{"_index":449,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":453,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{}}}],["favoriteids",{"_index":446,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":454,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":432,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["favoritescount",{"_index":338,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["favourite",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle",{"_index":207,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle(currentuserid",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feat",{"_index":1427,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1362,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1351,"title":{},"body":{"index.html":{}}}],["features",{"_index":1223,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":828,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":697,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["fields",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1398,"title":{},"body":{"index.html":{}}}],["findbyslug",{"_index":386,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":400,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fine",{"_index":865,"title":{},"body":{"injectables/TagService.html":{}}}],["folder",{"_index":1368,"title":{},"body":{"index.html":{}}}],["follow",{"_index":762,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["follow.entity",{"_index":786,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["followentity",{"_index":631,"title":{"entities/FollowEntity.html":{}},"body":{"entities/FollowEntity.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["follower",{"_index":808,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followerid",{"_index":633,"title":{},"body":{"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["following",{"_index":806,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["followingid",{"_index":634,"title":{},"body":{"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["followprofile",{"_index":756,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followprofile(currentuserid",{"_index":759,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followrepository",{"_index":791,"title":{},"body":{"injectables/ProfileService.html":{}}}],["follows",{"_index":638,"title":{},"body":{"entities/FollowEntity.html":{}}}],["followtocreate",{"_index":812,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followerid",{"_index":813,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followingid",{"_index":814,"title":{},"body":{"injectables/ProfileService.html":{}}}],["format",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["forroot",{"_index":512,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":1193,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":706,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1396,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1436,"title":{},"body":{"index.html":{}}}],["function",{"_index":750,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1186,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1421,"title":{},"body":{"index.html":{}}}],["generate",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1369,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":296,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug')@apiresponse({status",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":775,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":765,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get()@apiresponse({status",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["get(id",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarticle",{"_index":208,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(@param('slug",{"_index":297,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(slug",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":209,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticles(userid",{"_index":248,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getbyusername",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofile",{"_index":757,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(currentuserid",{"_index":764,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getslug",{"_index":387,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":403,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getstartingmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["gettags",{"_index":827,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getting",{"_index":1188,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":872,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@request",{"_index":893,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(req",{"_index":878,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemailandpass",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemailandpass(email",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":957,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":966,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1259,"title":{},"body":{"index.html":{}}}],["github",{"_index":1388,"title":{},"body":{"index.html":{}}}],["given",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":708,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":916,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":644,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":734,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1358,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1360,"title":{},"body":{"index.html":{}}}],["handle",{"_index":619,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handle(ability",{"_index":620,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handler",{"_index":741,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":751,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":752,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":276,"title":{},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":616,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:18",{"_index":733,"title":{},"body":{"classes/PatchUserPolicyHandler.html":{}}}],["handlers.ts:24",{"_index":630,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:30",{"_index":717,"title":{},"body":{"classes/PatchArticlePolicyHandler.html":{}}}],["handlers.ts:35",{"_index":621,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{}}}],["handlers.ts:8",{"_index":640,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":709,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{}}}],["hashed",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":1200,"title":{},"body":{"index.html":{}}}],["host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1399,"title":{},"body":{"index.html":{}}}],["http/2",{"_index":1355,"title":{},"body":{"index.html":{}}}],["http2",{"_index":1209,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":1277,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1284,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":1296,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":407,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpexception('article",{"_index":470,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('profile",{"_index":802,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpexception('you",{"_index":474,"title":{},"body":{"injectables/ArticleService.html":{}}}],["https",{"_index":1062,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":596,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":1260,"title":{},"body":{"index.html":{}}}],["https://gravatar.com/avatar/123",{"_index":732,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["https://typeorm.io",{"_index":1349,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":408,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.bad_request",{"_index":811,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpstatus.forbidden",{"_index":475,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":472,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["iarticleresponsebody",{"_index":265,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iarticlesresponsebody",{"_index":266,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iat",{"_index":689,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":339,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"entities/FollowEntity.html":{},"injectables/JwtStrategy.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":433,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":436,"title":{},"body":{"injectables/ArticleService.html":{}}}],["igenericmessagebody",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignored",{"_index":866,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":684,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":730,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":617,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":566,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/TagService.html":{}}}],["inject(winston_module_provider",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["injectable",{"_index":178,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":409,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(articleentity",{"_index":411,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(followentity",{"_index":801,"title":{},"body":{"injectables/ProfileService.html":{}}}],["injectrepository(tagentity",{"_index":858,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":412,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":1201,"title":{},"body":{"index.html":{}}}],["interface",{"_index":622,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":639,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":618,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":655,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":614,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isalphanumeric",{"_index":725,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":700,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isfqdn",{"_index":726,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["isint",{"_index":499,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["isnotempty",{"_index":325,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isnotfavorited",{"_index":476,"title":{},"body":{"injectables/ArticleService.html":{}}}],["isoptional",{"_index":326,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["ispublic",{"_index":660,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":327,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["it's",{"_index":1308,"title":{},"body":{"index.html":{}}}],["item",{"_index":600,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":601,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["iuser",{"_index":884,"title":{},"body":{"controllers/UserController.html":{}}}],["iuserresponsebody",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["javascript",{"_index":1233,"title":{},"body":{"index.html":{}}}],["joi",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":937,"title":{},"body":{"entities/UserEntity.html":{}}}],["jwt",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":524,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":641,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":682,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":515,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":686,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":508,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["keepconnectionalive",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":1070,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":1071,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1375,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyout",{"_index":1374,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":576,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1418,"title":{},"body":{"index.html":{}}}],["layout",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":1315,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('articles.author",{"_index":422,"title":{},"body":{"injectables/ArticleService.html":{}}}],["length",{"_index":919,"title":{},"body":{"entities/UserEntity.html":{}}}],["level",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":1347,"title":{},"body":{"index.html":{}}}],["license",{"_index":1441,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1443,"title":{},"body":{"index.html":{}}}],["limit",{"_index":489,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"dependencies.html":{}}}],["loads",{"_index":1292,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1247,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1231,"title":{},"body":{"index.html":{}}}],["located",{"_index":1366,"title":{},"body":{"index.html":{}}}],["location",{"_index":1413,"title":{},"body":{"index.html":{}}}],["logger",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["logging",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":694,"title":{},"body":{"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(payload",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["logindto",{"_index":692,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logs",{"_index":1212,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["lower",{"_index":414,"title":{},"body":{"injectables/ArticleService.html":{}}}],["luckily",{"_index":1356,"title":{},"body":{"index.html":{}}}],["made",{"_index":1216,"title":{},"body":{"index.html":{}}}],["main",{"_index":1426,"title":{},"body":{"index.html":{}}}],["make",{"_index":1228,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1361,"title":{},"body":{"index.html":{}}}],["manage",{"_index":573,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":1256,"title":{},"body":{"index.html":{}}}],["many",{"_index":933,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["manytomany",{"_index":938,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":911,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytoone",{"_index":367,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":341,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1415,"title":{},"body":{"index.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":416,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":415,"title":{},"body":{"injectables/ArticleService.html":{}}}],["max",{"_index":500,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["max(100",{"_index":503,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["maxfiles",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlength",{"_index":727,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxlength(255",{"_index":729,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxsize",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["mediumtext",{"_index":346,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":688,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":501,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["min(1",{"_index":502,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["minlength",{"_index":701,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["minlength(8",{"_index":702,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["mins",{"_index":1311,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1185,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1442,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":1273,"title":{},"body":{"index.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":1341,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1353,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":1342,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":876,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":1239,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1336,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1317,"title":{},"body":{"index.html":{}}}],["nest",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":653,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":516,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":518,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1372,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":1299,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1192,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1379,"title":{},"body":{"index.html":{}}}],["non",{"_index":1226,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1263,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":234,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/FollowEntity.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":1214,"title":{},"body":{"index.html":{}}}],["object",{"_index":676,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(article",{"_index":456,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["object.keys(payload).foreach((key",{"_index":1069,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":1327,"title":{},"body":{"index.html":{}}}],["offset",{"_index":490,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["ondelete",{"_index":951,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":932,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":939,"title":{},"body":{"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":907,"title":{},"body":{"entities/UserEntity.html":{}}}],["open",{"_index":1403,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":1111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":1115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1370,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":1251,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1326,"title":{},"body":{"index.html":{}}}],["optional",{"_index":188,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":1303,"title":{},"body":{"index.html":{}}}],["os",{"_index":1439,"title":{},"body":{"index.html":{}}}],["out",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":1254,"title":{},"body":{"index.html":{}}}],["over",{"_index":1330,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1446,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1127,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1389,"title":{},"body":{"index.html":{}}}],["panel",{"_index":1244,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('slug",{"_index":302,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":776,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["particular",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1438,"title":{},"body":{"index.html":{}}}],["passport",{"_index":680,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":517,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":526,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":678,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":681,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":940,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwords",{"_index":926,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwordtransformer",{"_index":703,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["patch",{"_index":721,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["patcharticlepolicyhandler",{"_index":273,"title":{"classes/PatchArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patcharticlepolicyhandler())@apiresponse({status",{"_index":257,"title":{},"body":{"controllers/ArticleController.html":{}}}],["patchuserdto",{"_index":718,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["patchuserpolicyhandler",{"_index":274,"title":{"classes/PatchUserPolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["patchuserpolicyhandler())@apiresponse({status",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["path",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":213,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.article",{"_index":294,"title":{},"body":{"controllers/ArticleController.html":{}}}],["payload.user",{"_index":896,"title":{},"body":{"controllers/UserController.html":{}}}],["payload[key",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":1325,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1328,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":593,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["permit",{"_index":947,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":1224,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1065,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":1271,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1359,"title":{},"body":{"index.html":{}}}],["plaintoclass(userentity",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":269,"title":{},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":1104,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":270,"title":{"guards/PoliciesGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":626,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":625,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":624,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":744,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":748,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":1281,"title":{},"body":{"index.html":{}}}],["post",{"_index":261,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["post(':slug/favorite",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':username/follow",{"_index":779,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":761,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('login",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apiresponse({status",{"_index":215,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":1340,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":202,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":1204,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":357,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":192,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":1253,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1394,"title":{},"body":{"index.html":{}}}],["production",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":755,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{}}}],["profile.controller",{"_index":787,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.email",{"_index":817,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.service",{"_index":772,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":753,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":64,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":949,"title":{},"body":{"entities/UserRoles.html":{}}}],["profileservice",{"_index":771,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileusername",{"_index":760,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["progress",{"_index":1424,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1191,"title":{},"body":{"index.html":{}}}],["project",{"_index":1287,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":464,"title":{},"body":{"injectables/ArticleService.html":{}}}],["properties",{"_index":313,"title":{"properties.html":{}},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":1061,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":1218,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1007,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":1410,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":1301,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1434,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('/')@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@post()@apiresponse({status",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["public.decorator",{"_index":656,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":262,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":299,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":256,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put()@apiresponse({status",{"_index":874,"title":{},"body":{"controllers/UserController.html":{}}}],["queried",{"_index":885,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":249,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":426,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.dto",{"_index":283,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.dto.ts",{"_index":488,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":498,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:17",{"_index":492,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:24",{"_index":493,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:33",{"_index":495,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:41",{"_index":497,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.favorited",{"_index":430,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.limit",{"_index":442,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.offset",{"_index":444,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":423,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":419,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1=0",{"_index":437,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":428,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":424,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":441,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":450,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.limit(query.limit",{"_index":443,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.offset(query.offset",{"_index":445,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.orderby('articles.createdat",{"_index":438,"title":{},"body":{"injectables/ArticleService.html":{}}}],["quickly",{"_index":1217,"title":{},"body":{"index.html":{}}}],["r",{"_index":1064,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1380,"title":{},"body":{"index.html":{}}}],["random",{"_index":1306,"title":{},"body":{"index.html":{}}}],["react",{"_index":1279,"title":{},"body":{"index.html":{}}}],["read",{"_index":587,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1430,"title":{},"body":{"index.html":{}}}],["received",{"_index":834,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":829,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":671,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["recordkey",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":1080,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":647,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":820,"title":{},"body":{"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["register(payload",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerdto",{"_index":818,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registered",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpayload",{"_index":894,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["relational",{"_index":1414,"title":{},"body":{"index.html":{}}}],["relations",{"_index":431,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":934,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1437,"title":{},"body":{"index.html":{}}}],["remark",{"_index":574,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":963,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":962,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":1269,"title":{},"body":{"index.html":{}}}],["repo",{"_index":1213,"title":{},"body":{"index.html":{}}}],["repository",{"_index":389,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":931,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":577,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":883,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":581,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UserController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[recordkey",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":330,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"index.html":{}}}],["reset",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":1272,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1261,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1408,"title":{},"body":{"index.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":880,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":1300,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1352,"title":{},"body":{"index.html":{}}}],["role",{"_index":584,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":521,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":942,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":943,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":945,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":953,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":929,"title":{},"body":{"entities/UserEntity.html":{}}}],["roles",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["rsa:4096",{"_index":1373,"title":{},"body":{"index.html":{}}}],["run",{"_index":1275,"title":{},"body":{"index.html":{}}}],["running",{"_index":1383,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":1234,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1063,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1318,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1453,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":1196,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":592,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["seconds",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":685,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":922,"title":{},"body":{"entities/UserEntity.html":{}}}],["self",{"_index":1363,"title":{},"body":{"index.html":{}}}],["served",{"_index":1289,"title":{},"body":{"index.html":{}}}],["server",{"_index":1197,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('email",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1198,"title":{},"body":{"index.html":{}}}],["signed",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{}}}],["sits",{"_index":1320,"title":{},"body":{"index.html":{}}}],["slug",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["slugify",{"_index":410,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":413,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1382,"title":{},"body":{"index.html":{}}}],["special",{"_index":575,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1405,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1339,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1348,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1241,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":1249,"title":{},"body":{"index.html":{}}}],["start",{"_index":1246,"title":{},"body":{"index.html":{}}}],["started",{"_index":1189,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":1190,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["startingmessage",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["statements",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1333,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":666,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":578,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":572,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":659,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":664,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1433,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1350,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1338,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1229,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1444,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1404,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":1126,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":425,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tag.controller",{"_index":846,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":857,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.dto.ts",{"_index":611,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:8",{"_index":613,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":847,"title":{},"body":{"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["tag.name",{"_index":837,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tag.service",{"_index":831,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.entity",{"_index":378,"title":{},"body":{"modules/ArticleModule.html":{}}}],["tag/tag.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":379,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["tagcontroller",{"_index":825,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":377,"title":{"entities/TagEntity.html":{}},"body":{"modules/ArticleModule.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":314,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["tagmodule",{"_index":65,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":853,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":462,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":836,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":374,"title":{"injectables/TagService.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1428,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1285,"title":{},"body":{"index.html":{}}}],["test",{"_index":1387,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":1210,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1385,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1354,"title":{},"body":{"index.html":{}}}],["this.appservice.startingmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":420,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":455,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":465,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":307,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":295,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":293,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":309,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":298,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticles(userid",{"_index":290,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":304,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.authservice.createtoken(user",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.caslfactory.createforuser(user",{"_index":747,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":749,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyslug(slug",{"_index":468,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.delete",{"_index":816,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.findone",{"_index":803,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.save(followtocreate",{"_index":815,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.get(userid",{"_index":1068,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(payload.username",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getslug(payload.title",{"_index":459,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.getuserbyemailandpass(email",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`tag",{"_index":867,"title":{},"body":{"injectables/TagService.html":{}}}],["this.logger.info('calling",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["this.profileservice.buildprofileresponse(profile",{"_index":778,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.followprofile",{"_index":780,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":777,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowprofile",{"_index":782,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.reflector.get",{"_index":745,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":661,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tagrepository.find",{"_index":859,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(article",{"_index":861,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.createtag",{"_index":467,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagservice.gettags",{"_index":835,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":370,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["this.userrepository",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":1059,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":427,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":1058,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":484,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(username",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(userid",{"_index":895,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validateuser(payload",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":469,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":691,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timestamp",{"_index":349,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["title",{"_index":315,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["to(value",{"_index":711,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["todo",{"_index":798,"title":{},"body":{"injectables/ProfileService.html":{}}}],["token",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tokens",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["transform",{"_index":713,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":324,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["transports",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1245,"title":{},"body":{"index.html":{}}}],["true",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["true})@type(undefined)@validatenested",{"_index":607,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["try",{"_index":860,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1455,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":1211,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1393,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1400,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":514,"title":{},"body":{"modules/AuthModule.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":368,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([articleentity",{"_index":382,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":848,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":525,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1392,"title":{},"body":{"index.html":{}}}],["ui",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":221,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":677,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":921,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["unfavourite",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{}}}],["unfollow",{"_index":769,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowprofile",{"_index":758,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowprofile(currentuserid",{"_index":767,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unique",{"_index":842,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1384,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1295,"title":{},"body":{"index.html":{}}}],["updatearticle",{"_index":210,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":254,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":405,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":255,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatedat",{"_index":340,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["updatetimestamp",{"_index":369,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["url",{"_index":917,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":1060,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":800,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["useclass",{"_index":1008,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1406,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":263,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":300,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.articles",{"_index":342,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.bio",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.controller",{"_index":1005,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.decorator",{"_index":888,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":887,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":720,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":900,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:28",{"_index":905,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:36",{"_index":898,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:45",{"_index":902,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:53",{"_index":903,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:63",{"_index":724,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.email",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":889,"title":{},"body":{"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.favorites.findindex",{"_index":477,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":482,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":486,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.id",{"_index":804,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user.image",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.roles",{"_index":950,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":583,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["user[key",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":568,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["usercontroller",{"_index":869,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdto",{"_index":722,"title":{"classes/UserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":212,"title":{"entities/UserEntity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userparam",{"_index":277,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userparam('id",{"_index":288,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["userrepository",{"_index":390,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1098,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":519,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":569,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":585,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1006,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":890,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":520,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.decorator",{"_index":278,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["users/user.entity",{"_index":279,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["users/users.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":522,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":954,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":66,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":509,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1274,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1304,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":914,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":675,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":667,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(undefined",{"_index":670,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":328,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["validates",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(undefined",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["validation",{"_index":687,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":329,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":710,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":716,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":705,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":1085,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1459,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1451,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":1235,"title":{},"body":{"index.html":{}}}],["view",{"_index":1420,"title":{},"body":{"index.html":{}}}],["vue",{"_index":1280,"title":{},"body":{"index.html":{}}}],["web",{"_index":1208,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["welcomemessage",{"_index":194,"title":{},"body":{"injectables/AppService.html":{}}}],["where('users.email",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":964,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":1286,"title":{},"body":{"index.html":{}}}],["winston",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["winstonfilerotator",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":1257,"title":{},"body":{"index.html":{}}}],["work",{"_index":1412,"title":{},"body":{"index.html":{}}}],["world",{"_index":1431,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1346,"title":{},"body":{"index.html":{}}}],["write",{"_index":588,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":928,"title":{},"body":{"entities/UserEntity.html":{}}}],["x509",{"_index":1371,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":1242,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1264,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["zippedarchive",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getStartingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStartingMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStartingMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/')@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get('/')\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getStartingMessage(): Promise {\n    return this.appService.startingMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArticleModule } from './article/article.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { TagModule } from './tag/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule.forRoot(),\n    UsersModule,\n    CaslModule,\n    TagModule,\n    ArticleModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startingMessage\n                        \n                    \n                \n            \n            \n                \nstartingMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  startingMessage(): IMessage {\n    this.logger.info('Calling welcomeMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                favouriteArticle\n                            \n                            \n                                    Async\n                                getArticle\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: 201, description: 'Create Articles Request Completed'})@ApiResponse({status: 400, description: 'Create Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:61\n                \n            \n\n\n            \n                \n                    Route to create an article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    payload\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteArticlePolicyHandler())@ApiResponse({status: 201, description: 'Delete Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:123\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfavourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Unfavourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        favouriteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    favouriteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Favourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Favourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiResponse({status: 201, description: 'Get Article Request Completed'})@ApiResponse({status: 400, description: 'Get Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:83\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(userId: number, query: ArticlesQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 201, description: 'Get Articles Request Completed'})@ApiResponse({status: 400, description: 'Get Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchArticlePolicyHandler())@ApiResponse({status: 201, description: 'Edit Article Request Completed'})@ApiResponse({status: 400, description: 'Edit Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport {\n  DeleteArticlePolicyHandler,\n  PatchArticlePolicyHandler,\n  PatchUserPolicyHandler,\n} from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleService } from './article.service';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { CreateArticleDto } from './dto/create-article.dto';\n\n@ApiBearerAuth()\n@ApiTags('articles')\n@Controller('articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Get()\n  @ApiResponse({ status: 201, description: 'Get Articles Request Completed' })\n  @ApiResponse({ status: 400, description: 'Get Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticles(\n    @UserParam('id') userId: number,\n    @Query()\n    query: ArticlesQueryParams,\n  ): Promise {\n    return await this.articleService.getArticles(userId, query);\n  }\n\n  /**\n   * Route to create an article\n   * @param {ArticleDto} payload the article dto\n   */\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Create Articles Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Create Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async createArticle(\n    @UserParam() user: UserEntity,\n    @Body() payload: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      user,\n      payload.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Get(':slug')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticle(@Param('slug') slug: string): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Put(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Edit Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Edit Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body('article') updateArticleDto: CreateArticleDto,\n  ) {\n    const article = await this.articleService.updateArticle(\n      slug,\n      updateArticleDto,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Delete(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Delete Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticle(\n    @Param('slug') slug: string,\n  ): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Favourite an Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Favourite an Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async favouriteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfavourite an Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfavourite an Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticleFromFavorites(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                tagList\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty({ required: true })\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                favoritesCount\n                            \n                            \n                                id\n                            \n                            \n                                slug\n                            \n                            \n                                tagList\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'mediumtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Default description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: 'Default description' })\n  description: string;\n\n  @Column({ type: 'mediumtext' })\n  body: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEntity, (user) => user.articles, { eager: true })\n  author: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                        \n                            CaslFactory\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { TagEntity } from '../tag/tag.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleController } from './article.controller';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleService } from './article.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ArticleEntity, UserEntity, TagEntity])],\n  controllers: [ArticleController],\n  providers: [ArticleService, CaslFactory, TagService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/article/article.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IArticleResponseBody\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(userId: number, query: ArticlesQueryParams)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, updateArticleDto: CreateArticleDto, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport slugify from 'slugify';\nimport { Repository } from 'typeorm';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { ArticleDto, CreateArticleDto } from './dto/create-article.dto';\n\n@Injectable()\nexport class ArticleService {\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    private readonly tagService: TagService,\n  ) {}\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n\n  async getArticles(\n    userId: number,\n    query: ArticlesQueryParams,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author');\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      queryBuilder.andWhere('articles.authorId = :id', {\n        id: author.id,\n      });\n    }\n\n    if (query.favorited) {\n      const author = await this.userRepository.findOne({\n        where: {\n          username: query.favorited,\n        },\n        relations: ['favorites'],\n      });\n      const ids = author.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.authorId IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1=0');\n      }\n    }\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    let favoriteIds: number[] = [];\n\n    if (userId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: userId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articles = await queryBuilder.getMany();\n    const articlesWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articlesWithFavorited, articlesCount };\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({ where: { slug } });\n  }\n\n  async createArticle(\n    user: UserEntity,\n    payload: ArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, payload);\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n    article.slug = this.getSlug(payload.title);\n    article.author = user;\n\n    // Creating tags from tagList\n    const [createdArticle] = await Promise.all([\n      this.articleRepository.save(article),\n      ...article.tagList.map((name) => this.tagService.createTag({ name })),\n    ]);\n    return createdArticle;\n  }\n\n  async updateArticle(\n    slug: string,\n    updateArticleDto: CreateArticleDto,\n    currentUserId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, updateArticleDto);\n\n    return await this.articleRepository.save(article);\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex >= 0) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  buildArticleResponse(article: ArticleEntity): IArticleResponseBody {\n    return { article };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesQueryParams.html":{"url":"classes/ArticlesQueryParams.html","title":"class - ArticlesQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/articles-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                favorited\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\n\nexport class ArticlesQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  tag: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  author: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  favorited: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsInt()\n  @Min(1)\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { module: typeof AuthModule; providers: {}; }\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\nconst providers = [AuthService, JwtStrategy];\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [...providers, UsersService],\n  controllers: [],\n  exports: providers,\n})\nexport class AuthModule {\n  static forRoot() {\n    return {\n      module: AuthModule,\n      providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserEntity } from '../users/user.entity';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {UserEntity} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  createToken({ id, username, roles, email }: UserEntity): string {\n    return this.jwtService.sign({\n      id,\n      username,\n      roles,\n      email,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: UserEntity) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    // User scoped permissions\n    can(UserActionsEnum.Update, ArticleEntity, { author: user });\n    can(UserActionsEnum.Delete, ArticleEntity, { author: user });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty({ required: true })\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlpha()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/dto/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlpha, IsNotEmpty } from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsAlpha()\n  @IsNotEmpty()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteArticlePolicyHandler.html":{"url":"classes/DeleteArticlePolicyHandler.html","title":"class - DeleteArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowEntity.html":{"url":"entities/FollowEntity.html","title":"entity - FollowEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followerId\n                            \n                            \n                                followingId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'follows' })\nexport class FollowEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  followerId: number;\n\n  @Column()\n  followingId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {UsersService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({\n    iat,\n    exp,\n    id,\n  }: Record): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:14\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:22\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class LoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchArticlePolicyHandler.html":{"url":"classes/PatchArticlePolicyHandler.html","title":"class - PatchArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPolicyHandler.html":{"url":"classes/PatchUserPolicyHandler.html","title":"class - PatchUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Follow Profile Request Completed'})@ApiResponse({status: 400, description: 'Follow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 201, description: 'Get Profile by Username Request Completed'})@ApiResponse({status: 400, description: 'Get Profile by Username Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfollow Profile Request Completed'})@ApiResponse({status: 400, description: 'Unfollow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { PatchUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { ProfileService } from './profile.service';\n\n@ApiBearerAuth()\n@ApiTags('profile')\n@Controller('profile')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Get(':username')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Profile by Username Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Get Profile by Username Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.getProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Post(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Follow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Follow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async followProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.followProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Delete(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfollow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfollow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async unfollowProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.unfollowProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, FollowEntity])],\n  controllers: [ProfileController],\n  providers: [ProfileService, CaslFactory],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildProfileResponse\n                            \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildProfileResponse\n                        \n                    \n                \n            \n            \n                \nbuildProfileResponse(profile)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { profile: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\n\n// TODO: type everything (exportable in api-types for UI to use)\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async getProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: {\n        followerId: currentUserId,\n        followingId: user.id,\n      },\n    });\n    console.log('follow', follow, currentUserId, user.id);\n\n    return { ...user, following: Boolean(follow) };\n  }\n\n  async followProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    if (!follow) {\n      const followToCreate = new FollowEntity();\n      followToCreate.followerId = currentUserId;\n      followToCreate.followingId = user.id;\n      await this.followRepository.save(followToCreate);\n    }\n\n    return { ...user, following: true };\n  }\n\n  async unfollowProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    await this.followRepository.delete({\n      followerId: currentUserId,\n      followingId: user.id,\n    });\n\n    return { ...user, following: false };\n  }\n\n  buildProfileResponse(profile: UserEntity & { following: boolean }) {\n    delete profile.email;\n    return { profile };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:19\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:35\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:27\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class RegisterDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 200, description: 'Fetch Tags Request Received'})@ApiResponse({status: 400, description: 'Fetch Tags Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/tag/tag.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { TagService } from './tag.service';\n\n@ApiBearerAuth()\n@ApiTags('tags')\n@Controller('tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Get()\n  @ApiResponse({ status: 200, description: 'Fetch Tags Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Tags Request Failed' })\n  async getTags() {\n    const tags = await this.tagService.getTags();\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Tag Entity Class\n */\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TagController } from './tag.controller';\nimport { TagEntity } from './tag.entity';\nimport { TagService } from './tag.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/tag/tag.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(tag: CreateTagDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                CreateTagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Repository } from 'typeorm';\nimport { Logger } from 'winston';\n\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { TagEntity } from './tag.entity';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  async getTags(): Promise {\n    return await this.tagRepository.find();\n  }\n\n  async createTag(tag: CreateTagDto): Promise {\n    try {\n      const article = new TagEntity();\n      Object.assign(article, tag);\n      return await this.tagRepository.save(article);\n    } catch (error) {\n      // Error case is likely a duplicate tag which is fine to be ignored\n      this.logger.debug(`Tag ${tag.name} exists, so not creating duplicate`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponse({status: 200, description: 'Put User Request Received'})@ApiResponse({status: 400, description: 'Put User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:21\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IUser\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Request } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IUser } from '@starter/api-types';\n\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserParam } from './user.decorator';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly usersService: UsersService) {}\n  /**\n   * Retrieves current authenticated user\n   * @returns {IUser} queried user data\n   */\n  @Get()\n  getUser(@Request() req): IUser {\n    return req.user as IUser;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Put()\n  @ApiResponse({ status: 200, description: 'Put User Request Received' })\n  @ApiResponse({ status: 400, description: 'Put User Request Failed' })\n  async editUser(\n    @UserParam('id') userId: number,\n    @Body() payload: PatchUserDto,\n  ): Promise {\n    return this.usersService.edit(userId, payload.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bio\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                image\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    Bio field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsFQDN()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    Image field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                bio\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:44\n                        \n                    \n\n            \n                \n                    Bio column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:38\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:26\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:68\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:56\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:32\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Bio column\n   */\n  @Column({ default: '' })\n  bio: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  image: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { UserEntity } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => UserEntity, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:120\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:98\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody, IUserResponseBody } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param usersService\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post()\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(\n    @Body() payload: RegisterDto,\n  ): Promise> {\n    const user = await this.usersService.create(payload);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() payload: LoginDto,\n  ): Promise> {\n    const user = await this.usersService.validateUser(payload);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { UserController } from './user.controller';\nimport { UserEntity } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRoles]), AuthModule],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController, UserController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getUserByEmailAndPass\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:148\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(userId: number, payload: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailAndPass\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailAndPass(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:132\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { UserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { UserEntity } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getUserByEmailAndPass(email: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.email = :email and users.password = :password')\n      .setParameter('email', email)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {RegisterDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: RegisterDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        image: url(payload.email, {\n          protocol: 'https',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {Partial} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(userId: number, payload: Partial): Promise {\n    const user = await this.get(userId);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ email, password }: LoginDto): Promise {\n    const user = await this.getUserByEmailAndPass(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/articles-query.dto.ts\n            \n            class\n            ArticlesQueryParams\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            ArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/follow.entity.ts\n            \n            entity\n            FollowEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            UserDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.decorator.ts\n            \n            variable\n            UserParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            slugify : ^1.6.5\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            providers   (apps/.../auth.module.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            UserParam   (apps/.../user.decorator.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthService, JwtStrategy]\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserEntity, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserParam\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (recordKey: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    if (!request.user) {\n      null;\n    }\n\n    if (recordKey) {\n      return request.user[recordKey as keyof typeof request.user];\n    }\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
