var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.488,1,2.61]],["body/controllers/AppController.html",[0,2.625,1,3.897,2,1.7,3,0.209,4,0.209,5,0.139,6,3.667,7,1.688,8,4.768,9,0.283,10,1.377,11,2.476,12,5.663,13,0.958,14,0.019,15,3.275,16,3.118,17,6.582,18,3.459,19,2.982,20,3.337,21,3.591,22,0.363,23,4.263,24,1.627,25,5.663,26,5.057,27,2.605,28,0.334,29,1.005,30,3.337,31,3.717,32,1.213,33,3.667,34,1.617,35,1.466,36,4.09,37,3.667,38,3.337,39,2.982,40,0.209,41,0.166,42,1.887,43,1.993,44,2.553,45,2.386,46,1.213,47,0.75,48,3.118,49,2.748,50,1.005,51,4.263,52,0.013,53,0.013]],["title/modules/AppModule.html",[54,1.283,55,2.61]],["body/modules/AppModule.html",[1,3.46,2,1.655,3,0.242,4,0.137,5,0.135,14,0.019,28,0.354,29,0.659,36,3.668,37,2.405,40,0.137,41,0.109,44,3.278,47,0.492,50,0.978,52,0.01,53,0.01,54,1.701,55,5.093,56,1.307,57,1.238,58,1.469,59,1.469,60,1.238,61,2.313,62,1.469,63,2.405,64,2.405,65,2.405,66,3.948,67,3.501,68,3.948,69,3.948,70,3.948,71,3.948,72,2.18,73,1.469,74,1.384,75,2.796,76,3.501,77,4.708,78,4.654,79,1.802,80,2.796,81,2.405,82,2.147,83,1.674,84,4.149,85,1.238,86,4.255,87,2.796,88,1.802,89,3.528,90,2.796,91,2.796,92,4.149,93,2.405,94,2.405,95,2.796,96,2.796,97,2.405,98,2.796,99,2.796,100,2.796,101,2.796,102,2.796,103,2.796,104,2.796,105,2.405,106,2.796,107,3.187,108,2.796,109,2.405,110,2.796,111,2.405,112,2.796,113,2.405,114,2.796,115,2.405,116,2.796,117,2.405,118,2.796,119,2.405,120,2.796,121,2.405,122,2.796,123,2.405,124,2.796,125,2.796,126,3.46,127,4.255,128,2.405,129,2.796,130,2.796,131,2.796,132,1.955,133,2.796,134,0.203,135,2.796,136,2.796,137,2.796,138,2.796,139,2.796,140,1.115,141,2.796,142,1.238,143,2.796,144,1.802,145,2.796,146,1.469,147,2.796,148,2.796,149,2.796,150,4.149,151,3.569,152,2.796,153,2.423,154,2.147,155,2.796,156,2.796,157,4.947,158,5.473,159,4.149,160,4.149,161,1.025,162,4.149,163,2.183,164,4.149,165,4.149,166,2.796,167,4.149,168,2.796,169,2.405,170,2.796,171,2.796,172,2.796,173,2.796,174,2.796,175,2.796,176,2.796,177,2.796,178,2.796,179,2.796,180,2.796,181,2.796]],["title/injectables/AppService.html",[36,2.234,182,1.062]],["body/injectables/AppService.html",[3,0.212,4,0.212,5,0.141,7,1.392,9,0.288,10,1.392,12,5.906,14,0.019,22,0.479,24,1.637,25,5.906,26,5.274,28,0.324,29,1.022,33,5.382,34,1.643,35,1.49,36,3.372,40,0.212,41,0.169,42,2.932,43,2.026,44,3.966,46,1.233,47,0.762,50,1.022,52,0.013,53,0.013,88,2.793,89,3.629,126,3.03,134,0.314,154,4.326,182,1.602,183,2.026,184,3.727,185,4.844,186,4.333,187,5.58,188,4.333,189,1.233,190,0.842,191,1.123,192,4.333,193,3.727,194,3.727,195,2.145,196,4.333,197,4.333,198,3.03,199,4.333,200,4.333,201,3.328]],["title/classes/ArticleCommentDto.html",[41,0.146,202,2.405]],["body/classes/ArticleCommentDto.html",[3,0.247,4,0.247,5,0.164,9,0.335,13,1.133,14,0.018,22,0.429,28,0.328,32,1.434,40,0.303,41,0.273,47,1.09,52,0.015,53,0.015,134,0.486,202,4.511,203,1.434,204,3.994,205,2.898,206,3.872,207,1.532,208,3.137,209,5.04,210,5.04,211,2.676,212,2.01,213,3.468,214,2.898,215,1.912,216,3.249,217,3.018]],["title/controllers/ArticleController.html",[0,1.488,218,2.61]],["body/controllers/ArticleController.html",[0,0.524,2,0.524,3,0.064,4,0.064,5,0.043,7,1.85,9,0.087,10,0.559,11,2.777,13,1.234,14,0.018,15,1.01,16,1.975,18,3.658,19,3.839,20,3.907,22,0.467,24,1.357,27,2.029,28,0.288,29,0.31,30,1.353,31,4.185,32,0.374,34,0.499,35,0.452,38,1.353,39,0.92,40,0.064,41,0.051,43,1.65,45,0.736,46,0.374,47,1.181,48,3.896,49,3.537,50,1.294,52,0.005,53,0.005,134,0.398,161,1.073,189,1.562,190,1.067,191,1.422,205,3.435,208,1.65,216,2.994,217,2.38,218,1.581,219,1.131,220,0.847,221,3.586,222,2.972,223,2.557,224,2.557,225,2.557,226,2.557,227,2.972,228,2.26,229,2.557,230,2.26,231,2.557,232,2.557,233,1.315,234,1.095,235,5.348,236,1.315,237,3.035,238,4.81,239,3.528,240,5.011,241,4.216,242,5.011,243,5.011,244,1.315,245,2.745,246,1.131,247,1.854,248,2.994,249,1.315,250,3.036,251,1.315,252,3.734,253,1.265,254,1.315,255,2.224,256,1.315,257,1.315,258,2.869,259,1.315,260,3.528,261,4.323,262,1.315,263,1.315,264,3.528,265,1.315,266,1.315,267,3.035,268,1.315,269,1.315,270,1.315,271,1.315,272,3.528,273,1.315,274,1.315,275,1.315,276,1.315,277,1.131,278,2.274,279,1.315,280,4.41,281,1.315,282,1.315,283,2.274,284,1.315,285,1.131,286,2.274,287,1.315,288,3.528,289,1.315,290,1.315,291,2.972,292,1.315,293,1.315,294,2.71,295,1.315,296,1.736,297,1.131,298,1.01,299,0.847,300,1.131,301,1.131,302,0.847,303,1.01,304,0.92,305,0.736,306,0.92,307,1.187,308,1.187,309,1.967,310,1.01,311,0.615,312,1.916,313,1.131,314,0.475,315,1.78,316,1.131,317,1.131,318,1.131,319,1.131,320,1.131,321,1.736,322,1.131,323,1.131,324,1.315,325,1.315,326,2.717,327,1.315,328,1.315,329,3.334,330,1.315,331,0.787,332,1.646,333,1.315,334,1.315,335,3.974,336,1.315,337,1.315,338,1.315,339,1.315,340,3.334,341,3.334,342,4.34,343,1.315,344,1.315,345,1.315,346,1.315,347,1.315,348,1.315,349,1.315,350,1.315,351,1.315,352,1.315,353,1.315,354,1.315,355,1.315,356,1.315,357,1.315,358,1.315,359,1.315,360,1.315]],["title/classes/ArticleDto.html",[41,0.146,331,2.234]],["body/classes/ArticleDto.html",[3,0.216,4,0.216,5,0.144,7,1.56,9,0.293,13,1.5,14,0.018,22,0.568,28,0.309,32,1.256,40,0.279,41,0.26,47,1.282,52,0.014,53,0.014,134,0.513,153,2.524,191,1.477,203,1.256,204,4.451,205,2.065,207,1.409,208,2.952,211,2.939,212,1.761,214,2.666,215,1.675,248,2.846,331,3.995,361,3.392,362,4.415,363,4.415,364,4.415,365,4.415,366,3.392,367,4.415,368,4.415,369,4.415,370,3.414,371,3.987,372,2.846,373,2.065,374,3.798]],["title/entities/ArticleEntity.html",[375,1.488,376,1.488]],["body/entities/ArticleEntity.html",[3,0.16,4,0.16,5,0.106,7,1.538,9,0.217,13,1.596,14,0.019,22,0.604,28,0.265,40,0.16,41,0.128,47,1.234,52,0.011,53,0.011,134,0.528,146,1.718,153,2.608,161,1.149,163,1.304,190,0.636,207,1.149,208,2.529,217,2.784,221,2.287,234,1.389,235,4.155,255,2.026,283,3.486,314,1.18,362,3.783,363,3.783,373,2.174,375,1.854,376,1.854,377,2.812,378,3.027,379,4.653,380,5.409,381,2.271,382,4.653,383,2.511,384,4.649,385,5.891,386,3.999,387,3.269,388,4.155,389,4.649,390,3.269,391,3.297,392,2.812,393,3.999,394,3.269,395,5.354,396,5.068,397,3.573,398,5.068,399,3.269,400,3.999,401,3.269,402,3.571,403,3.269,404,3.239,405,3.269,406,4.202,407,3.269,408,4.649,409,4.649,410,3.269,411,3.269,412,3.269,413,3.999,414,3.571,415,3.999,416,1.304,417,2.511,418,2.812,419,2.812]],["title/classes/ArticleFeedQueryParams.html",[41,0.146,286,2.405]],["body/classes/ArticleFeedQueryParams.html",[3,0.243,4,0.243,5,0.162,9,0.33,13,1.382,14,0.018,22,0.523,28,0.301,32,1.415,40,0.243,41,0.24,52,0.015,53,0.015,134,0.445,203,1.415,207,1.519,211,2.66,215,1.886,255,2.396,286,3.961,366,4.721,370,3.994,371,4.665,372,3.961,373,2.873,420,5.737,421,4.278,422,5.123,423,5.737,424,5.286,425,4.973,426,4.973]],["title/modules/ArticleModule.html",[54,1.283,66,2.405]],["body/modules/ArticleModule.html",[2,2.246,3,0.212,4,0.212,5,0.141,14,0.019,28,0.365,29,1.022,40,0.212,41,0.169,52,0.013,53,0.013,54,2.152,56,2.026,57,1.918,58,2.276,59,2.276,60,1.918,61,2.925,62,2.276,66,4.774,72,2.959,73,2.276,74,2.145,76,2.594,83,2.594,85,1.918,218,4.376,234,1.328,314,1.564,315,4.214,316,3.727,376,2.246,391,3.152,417,3.328,427,3.727,428,3.727,429,3.483,430,3.697,431,4.333,432,3.328,433,3.152,434,3.727,435,3.372,436,4.333,437,3.727,438,4.333,439,3.328,440,4.333]],["title/injectables/ArticleService.html",[182,1.062,315,2.234]],["body/injectables/ArticleService.html",[3,0.064,4,0.064,5,0.043,9,0.087,10,0.559,11,2.777,14,0.019,22,0.519,24,1.456,27,2.755,28,0.288,29,0.31,34,0.499,35,0.453,40,0.064,41,0.051,42,1.002,46,1.396,47,1.202,50,1.437,52,0.005,53,0.005,85,0.583,134,0.435,140,0.902,153,0.583,161,1.316,163,2.046,182,0.644,183,0.616,187,2.713,189,1.707,190,1.185,191,1.554,195,2.718,202,2.276,205,2.929,207,0.559,217,2.115,221,2.782,223,2.56,224,1.946,225,2.56,226,2.56,229,2.56,231,1.946,232,2.56,234,1.096,235,4.608,245,1.977,246,1.133,247,2.964,255,2.296,258,0.737,261,3.723,267,3.737,277,1.133,278,2.276,280,3.422,283,0.849,285,1.946,286,2.276,300,2.56,301,1.133,314,0.475,315,1.355,317,1.133,318,1.133,319,1.133,320,1.133,321,1.738,322,1.133,323,1.133,326,3.401,331,2.784,332,2.618,362,0.921,363,0.921,376,1.586,378,2.602,381,1.952,391,2.431,393,1.946,397,0.692,402,2.286,416,0.525,417,1.011,430,2.443,433,0.737,434,1.133,437,1.133,439,1.011,441,1.133,442,2.975,443,2.263,444,2.263,445,2.975,446,2.263,447,2.263,448,2.263,449,1.317,450,4.038,451,2.286,452,2.56,453,2.975,454,2.263,455,2.263,456,1.317,457,4.75,458,1.317,459,2.263,460,1.317,461,2.263,462,1.317,463,1.317,464,1.317,465,1.317,466,2.263,467,1.317,468,1.317,469,1.317,470,1.317,471,1.317,472,2.263,473,1.317,474,1.317,475,1.317,476,2.263,477,1.317,478,1.317,479,2.263,480,1.317,481,1.317,482,1.317,483,1.011,484,2.263,485,1.946,486,1.133,487,0.921,488,1.946,489,1.317,490,1.011,491,1.133,492,1.317,493,1.317,494,1.317,495,1.317,496,1.317,497,1.133,498,1.317,499,2.263,500,2.263,501,2.263,502,2.263,503,2.263,504,1.317,505,1.583,506,2.263,507,3.337,508,2.263,509,1.317,510,2.263,511,3.422,512,3.422,513,3.978,514,1.317,515,1.317,516,1.317,517,1.317,518,2.263,519,2.263,520,3.978,521,2.263,522,2.263,523,2.263,524,2.263,525,2.263,526,2.263,527,1.317,528,1.317,529,1.317,530,2.263,531,2.263,532,1.317,533,1.946,534,1.317,535,1.317,536,1.133,537,1.317,538,1.011,539,1.317,540,2.263,541,1.317,542,1.317,543,1.317,544,1.946,545,2.263,546,1.317,547,1.317,548,1.133,549,1.011,550,1.011,551,2.263,552,1.317,553,3.978,554,1.317,555,1.317,556,4.649,557,2.782,558,2.263,559,1.738,560,2.56,561,2.263,562,2.263,563,2.263,564,1.317,565,1.317,566,1.317,567,2.263,568,2.263,569,2.263,570,2.263,571,2.263,572,3.252,573,1.317,574,2.263,575,2.56,576,1.133,577,1.317,578,1.133,579,1.317,580,2.263,581,1.317,582,1.317,583,1.317,584,2.263,585,1.317,586,1.317,587,1.317,588,1.317,589,1.317,590,1.317,591,2.263,592,1.317]],["title/classes/ArticlesQueryParams.html",[41,0.146,278,2.405]],["body/classes/ArticlesQueryParams.html",[3,0.21,4,0.21,5,0.139,9,0.284,13,1.538,14,0.018,22,0.582,28,0.274,32,1.219,40,0.21,41,0.218,47,1.234,52,0.013,53,0.013,134,0.496,203,1.219,207,1.381,211,2.798,215,1.624,255,2.268,278,3.602,366,5.255,370,4.201,371,4.906,372,4.409,373,3.199,378,3.482,422,4.779,423,5.352,424,5.884,505,4.351,533,5.352,593,6.035,594,3.684,595,4.283,596,4.283,597,4.283,598,4.283,599,4.283]],["title/modules/AuthModule.html",[54,1.283,67,2.234]],["body/modules/AuthModule.html",[2,1.473,3,0.181,4,0.181,5,0.12,10,0.913,11,1.473,14,0.019,22,0.314,24,0.913,28,0.352,29,0.871,40,0.181,41,0.144,50,1.193,52,0.012,53,0.012,54,2.239,56,1.727,57,1.635,58,1.94,59,1.94,60,1.635,61,3.278,62,3.034,67,4.442,72,2.659,73,1.94,74,1.828,76,3.031,77,4.968,78,4.345,79,2.38,82,3.888,83,2.212,85,1.635,126,2.583,127,3.177,234,0.871,255,1.27,314,1.333,332,1.401,600,3.177,601,3.177,602,3.177,603,4.065,604,4.35,605,3.143,606,2.837,607,5.775,608,3.693,609,2.837,610,3.693,611,2.837,612,3.693,613,2.583,614,2.659,615,3.693,616,2.583,617,3.177,618,3.693,619,3.693,620,2.837,621,3.693,622,3.693,623,2.38,624,3.693,625,3.693,626,3.177,627,3.693,628,5.062,629,3.693]],["title/injectables/AuthService.html",[182,1.062,603,2.088]],["body/injectables/AuthService.html",[3,0.184,4,0.184,5,0.122,7,1.265,9,0.249,10,1.265,14,0.019,22,0.495,24,1.265,27,1.755,28,0.306,29,0.885,40,0.184,41,0.146,42,2.769,43,2.925,44,3.919,46,1.862,47,0.9,50,0.885,52,0.012,53,0.012,78,4.835,79,2.419,134,0.453,140,2.041,161,1.265,182,1.456,183,1.755,189,1.456,190,0.995,191,1.326,195,3.24,207,1.265,208,2.393,234,1.543,247,2.689,253,2.1,255,2.003,314,1.355,381,2.149,603,2.864,605,2.393,611,2.883,623,4.031,630,3.229,631,3.931,632,5.823,633,5.823,634,3.753,635,7.036,636,5.118,637,3.753,638,3.753,639,4.402,640,3.931,641,4.455,642,4.402,643,4.402,644,4.402,645,4.402,646,2.625,647,3.753,648,3.753,649,3.229,650,3.298,651,2.266,652,3.753]],["title/injectables/CaslFactory.html",[182,1.062,429,1.847]],["body/injectables/CaslFactory.html",[3,0.194,4,0.194,5,0.129,9,0.264,10,1.314,14,0.019,22,0.338,24,0.981,28,0.327,29,0.936,34,1.506,35,1.828,40,0.26,41,0.155,50,0.936,52,0.013,53,0.013,134,0.464,161,1.649,163,1.584,182,1.513,183,1.857,189,1.13,190,0.772,191,1.029,203,1.13,234,1.573,314,1.433,332,1.506,376,2.39,378,2.975,381,1.667,429,2.631,549,3.05,653,3.05,654,5.316,655,5.316,656,3.97,657,3.149,658,5.316,659,5.316,660,5.316,661,4.573,662,3.415,663,2.378,664,3.415,665,2.222,666,5.316,667,4.573,668,3.97,669,4.084,670,3.97,671,3.97,672,3.97,673,5.316,674,2.086,675,3.97,676,3.415,677,5.316,678,3.97,679,3.426,680,3.05,681,3.97,682,5.155,683,3.97,684,4.573,685,4.573,686,3.97,687,3.97,688,3.97,689,5.316,690,3.415,691,3.97,692,3.97,693,3.97,694,3.415,695,3.97,696,3.97,697,3.97]],["title/modules/CaslModule.html",[54,1.283,68,2.405]],["body/modules/CaslModule.html",[3,0.249,4,0.249,5,0.166,14,0.018,28,0.305,29,1.202,40,0.249,41,0.199,52,0.015,53,0.015,54,2.319,56,2.383,57,2.256,58,2.677,59,2.677,60,2.256,61,3.153,62,3.542,68,4.787,72,3.278,73,2.677,74,2.522,429,3.797,698,4.384,699,5.096,700,4.384,701,5.096,702,2.852]],["title/entities/CommentEntity.html",[375,1.488,391,2.088]],["body/entities/CommentEntity.html",[3,0.189,4,0.189,5,0.125,9,0.256,13,1.531,14,0.019,22,0.579,28,0.289,40,0.189,41,0.15,47,0.916,52,0.012,53,0.012,134,0.513,146,2.025,161,1.288,163,1.537,190,0.749,205,3.089,207,1.288,208,2.761,234,1.491,255,1.792,283,2.484,314,1.392,373,2.957,375,2.078,376,2.522,378,3.304,379,5.079,381,2.479,382,5.079,383,4.003,386,5.44,388,4.003,391,2.916,395,5.683,396,5.44,397,3.323,398,5.44,404,3.535,406,3.956,413,4.483,414,4.535,416,1.537,418,3.316,419,3.316,439,2.961,576,4.483,703,3.316,704,3.855,705,5.211,706,3.855,707,3.855,708,3.855,709,3.855,710,3.855]],["title/classes/CreateArticleCommentDto.html",[41,0.146,216,2.405]],["body/classes/CreateArticleCommentDto.html",[3,0.247,4,0.247,5,0.164,9,0.335,13,1.133,14,0.018,22,0.429,28,0.328,32,1.434,40,0.303,41,0.273,47,0.886,52,0.015,53,0.015,134,0.486,202,4.511,203,1.434,204,3.994,205,2.898,206,3.872,207,1.532,208,2.357,211,2.676,212,2.01,213,3.468,214,2.898,215,1.912,216,3.994,217,4.018,711,3.249,712,5.04]],["title/classes/CreateArticleDto.html",[41,0.146,248,2.405]],["body/classes/CreateArticleDto.html",[3,0.237,4,0.237,5,0.157,7,1.197,9,0.322,13,1.089,14,0.018,22,0.412,28,0.323,32,1.378,40,0.296,41,0.269,47,1.214,52,0.014,53,0.014,134,0.478,153,2.144,203,1.378,204,3.896,205,3.082,207,1.494,208,2.264,211,2.889,212,1.931,214,2.827,215,1.837,248,3.896,331,4.133,361,3.72,362,3.387,363,3.387,370,3.62,371,4.228,372,3.121,373,2.264,374,4.166,711,3.121,713,4.843]],["title/classes/CreateTagDto.html",[41,0.146,714,2.61]],["body/classes/CreateTagDto.html",[3,0.258,4,0.258,5,0.171,9,0.35,13,1.185,14,0.018,22,0.448,28,0.312,32,1.5,40,0.258,41,0.248,46,1.947,47,1.12,52,0.015,53,0.015,134,0.382,190,1.33,203,1.5,207,1.574,211,2.539,213,3.563,215,1.999,714,4.453,715,5.477,716,4.533,717,5.27,718,5.27,719,6.367]],["title/classes/DeleteArticlePolicyHandler.html",[41,0.146,307,1.96]],["body/classes/DeleteArticlePolicyHandler.html",[3,0.208,4,0.208,5,0.138,9,0.282,10,1.375,14,0.019,22,0.362,24,1.051,28,0.322,34,1.613,35,1.463,40,0.334,41,0.257,50,1.551,52,0.013,53,0.013,134,0.449,189,1.21,190,0.827,191,1.102,203,1.21,234,1.462,307,2.923,308,2.235,309,2.105,311,1.989,314,1.536,376,2.473,657,2.923,663,2.547,665,2.38,674,3.844,702,2.38,720,3.114,721,2.38,722,3.82,723,3.748,724,3.586,725,4.513,726,4.253,727,2.235,728,3.713,729,3.331,730,2.235,731,2.547,732,3.586,733,2.235,734,3.586]],["title/classes/DeleteUserPolicyHandler.html",[41,0.146,733,1.96]],["body/classes/DeleteUserPolicyHandler.html",[3,0.208,4,0.208,5,0.138,9,0.282,10,1.375,14,0.019,22,0.362,24,1.051,28,0.322,34,1.613,35,1.463,40,0.334,41,0.257,50,1.551,52,0.013,53,0.013,134,0.449,189,1.21,190,0.827,191,1.102,203,1.21,234,1.462,307,2.235,308,2.235,309,2.105,311,1.989,314,1.536,376,2.473,657,2.923,663,2.547,665,2.38,674,3.844,702,2.38,720,3.114,721,2.38,722,3.82,723,3.748,724,3.586,725,4.513,727,2.235,728,3.713,729,3.331,730,2.235,731,2.547,732,3.586,733,2.923,734,3.586,735,4.253]],["title/entities/FollowEntity.html",[375,1.488,433,2.088]],["body/entities/FollowEntity.html",[3,0.245,4,0.245,5,0.163,9,0.333,13,1.505,14,0.018,22,0.569,28,0.245,40,0.245,41,0.196,52,0.015,53,0.015,134,0.485,146,2.634,190,0.975,207,1.527,255,2.513,375,2.463,381,2.811,404,4.008,406,4.296,416,1.999,433,3.456,536,4.312,538,5.142,736,4.312,737,5.758,738,5.013,739,5.013,740,5.013]],["title/interfaces/IPolicyHandler.html",[723,1.96,727,1.96]],["body/interfaces/IPolicyHandler.html",[3,0.209,4,0.209,5,0.139,9,0.283,10,1.377,14,0.019,22,0.363,24,1.054,28,0.322,34,1.617,35,1.466,40,0.334,41,0.257,50,1.552,52,0.013,53,0.013,134,0.45,189,1.213,190,0.829,191,1.104,234,1.464,307,2.24,308,2.24,309,2.11,311,1.993,314,1.539,376,2.476,657,2.928,663,2.553,665,2.386,674,3.846,702,2.386,720,3.118,721,2.386,722,3.684,723,3.75,724,3.591,725,4.516,727,2.24,728,3.942,729,3.337,730,2.24,731,2.553,732,3.591,733,2.24,734,3.591,741,4.263,742,4.263]],["title/injectables/JwtAuthGuard.html",[182,1.062,743,2.61]],["body/injectables/JwtAuthGuard.html",[3,0.222,4,0.222,5,0.147,7,1.121,9,0.301,10,1.433,14,0.019,22,0.493,24,1.121,28,0.33,29,1.069,40,0.222,41,0.177,42,2.007,45,2.538,50,1.367,52,0.014,53,0.014,134,0.42,153,2.007,182,1.65,183,2.12,189,1.65,190,1.127,191,1.502,332,1.72,613,3.171,623,3.737,631,4.454,743,4.056,744,5.499,745,3.901,746,4.056,747,4.988,748,3.901,749,6.127,750,4.534,751,4.988,752,5.176,753,4.534,754,3.901,755,3.171,756,4.534,757,3.483,758,4.534,759,3.901,760,4.534,761,3.901,762,4.988,763,4.534,764,3.901,765,4.534,766,4.534]],["title/injectables/JwtStrategy.html",[182,1.062,604,2.234]],["body/injectables/JwtStrategy.html",[3,0.187,4,0.187,5,0.124,7,1.279,9,0.253,10,1.279,11,2.342,14,0.019,18,3.309,22,0.44,24,1.279,27,1.784,28,0.322,29,0.899,40,0.187,41,0.229,42,2.788,43,2.746,46,1.472,52,0.012,53,0.012,78,4.94,79,2.459,134,0.375,153,1.689,182,1.472,183,1.784,189,1.472,190,1.006,191,1.341,195,2.561,245,2.135,332,1.963,373,1.784,381,1.602,604,3.099,605,3.348,613,2.668,617,3.282,623,4.243,626,3.282,640,3.975,641,4.375,759,3.282,761,3.282,767,3.282,768,5.873,769,4.452,770,3.815,771,3.815,772,5.175,773,6.583,774,6.297,775,3.815,776,5.175,777,5.175,778,4.452,779,5.175,780,5.175,781,3.975,782,3.282,783,3.815,784,3.815,785,3.282,786,3.815,787,3.815,788,3.815,789,3.815,790,3.815,791,3.815,792,5.175,793,5.175,794,5.175]],["title/classes/LoginDto.html",[41,0.146,795,2.234]],["body/classes/LoginDto.html",[3,0.231,4,0.231,5,0.153,9,0.313,13,1.061,14,0.019,22,0.401,28,0.319,32,1.343,40,0.291,41,0.275,46,2.006,47,1.046,52,0.014,53,0.014,134,0.472,142,2.633,161,1.61,203,1.343,207,1.47,211,2.727,212,1.882,213,3.645,214,2.781,215,1.79,253,2.641,651,2.633,711,3.042,795,3.562,796,3.625,797,4.407,798,4.719,799,3.562,800,2.826,801,3.301,802,3.562,803,2.826]],["title/classes/PasswordTransformer.html",[41,0.146,804,2.61]],["body/classes/PasswordTransformer.html",[3,0.219,4,0.219,5,0.145,7,1.569,9,0.297,10,1.42,14,0.018,22,0.489,24,1.42,28,0.281,40,0.219,41,0.248,43,2.686,47,1.342,50,1.354,52,0.014,53,0.014,134,0.416,142,2.543,189,1.635,190,1.117,191,1.488,203,1.272,212,2.291,416,1.782,483,5.544,722,3.215,804,4.018,805,3.844,806,6.349,807,5.745,808,4.469,809,5.745,810,5.765,811,5.745,812,4.469,813,5.745,814,4.942,815,3.844,816,4.469]],["title/classes/PatchArticlePolicyHandler.html",[41,0.146,308,1.96]],["body/classes/PatchArticlePolicyHandler.html",[3,0.208,4,0.208,5,0.138,9,0.282,10,1.375,14,0.019,22,0.362,24,1.051,28,0.322,34,1.613,35,1.463,40,0.334,41,0.257,50,1.551,52,0.013,53,0.013,134,0.449,189,1.21,190,0.827,191,1.102,203,1.21,234,1.462,307,2.235,308,2.923,309,2.105,311,1.989,314,1.536,376,2.473,657,2.923,663,2.547,665,2.38,674,3.844,702,2.38,720,3.114,721,2.38,722,3.82,723,3.748,724,3.586,725,4.513,727,2.235,728,3.713,729,3.331,730,2.235,731,2.547,732,3.586,733,2.235,734,3.586,817,4.253]],["title/classes/PatchUserDto.html",[41,0.146,818,2.405]],["body/classes/PatchUserDto.html",[3,0.205,4,0.205,5,0.136,7,1.035,9,0.278,13,0.941,14,0.019,22,0.356,28,0.301,32,1.191,40,0.269,41,0.272,46,2.052,47,1.194,52,0.013,53,0.013,134,0.446,140,2.196,142,2.437,161,1.678,203,1.191,207,1.361,211,2.834,212,1.669,214,2.574,215,1.588,247,2.893,370,4.174,651,2.437,711,2.698,799,3.297,800,2.507,802,4.066,803,2.507,818,3.548,819,4.229,820,3.215,821,4.736,822,4.213,823,4.186,824,4.736,825,2.928,826,3.601,827,2.928,828,2.928,829,2.928,830,3.601,831,3.851,832,3.601,833,3.548,834,3.215,835,3.601]],["title/classes/PatchUserPolicyHandler.html",[41,0.146,309,1.847]],["body/classes/PatchUserPolicyHandler.html",[3,0.208,4,0.208,5,0.138,9,0.282,10,1.373,14,0.019,22,0.361,24,1.049,28,0.322,34,1.609,35,1.459,40,0.334,41,0.256,50,1.549,52,0.013,53,0.013,134,0.449,189,1.207,190,0.825,191,1.099,203,1.207,234,1.46,307,2.23,308,2.23,309,2.75,311,1.984,314,1.532,376,2.47,657,2.919,663,2.541,665,2.375,674,3.843,702,2.375,720,3.109,721,2.375,722,3.817,723,3.746,724,3.58,725,4.51,727,2.23,728,3.935,729,3.326,730,2.23,731,2.541,732,3.58,733,2.23,734,3.58,836,4.243]],["title/guards/PoliciesGuard.html",[305,2.088,746,2.61]],["body/guards/PoliciesGuard.html",[3,0.196,4,0.196,5,0.13,9,0.266,10,1.322,11,2.401,14,0.019,22,0.512,24,1.322,27,2.5,28,0.328,29,0.944,40,0.196,41,0.156,42,1.773,45,2.241,50,1.419,52,0.013,53,0.013,134,0.436,161,0.99,182,1.521,189,1.713,190,1.17,191,1.559,195,3.179,304,2.801,305,2.992,311,1.873,332,2.283,429,3.479,609,3.076,657,3.516,674,3.375,702,2.241,722,2.241,730,3.375,731,2.398,747,5.525,748,3.445,749,5.922,751,4.599,752,4.934,754,3.445,755,2.801,764,3.445,837,4.005,838,3.445,839,5.347,840,4.005,841,4.005,842,5.347,843,4.005,844,5.347,845,4.107,846,3.445,847,4.005,848,4.005,849,4.005,850,4.005,851,4.005,852,4.005,853,3.076,854,4.005,855,4.005]],["title/controllers/ProfileController.html",[0,1.488,856,2.61]],["body/controllers/ProfileController.html",[0,1.157,2,1.157,3,0.142,4,0.142,5,0.094,7,1.809,9,0.193,10,1.054,11,2.679,13,1.137,14,0.018,16,3.119,18,3.53,19,3.536,20,3.717,22,0.43,24,1.249,28,0.314,29,0.684,30,2.553,31,4.09,32,0.825,40,0.142,41,0.113,43,1.356,45,1.623,46,0.825,47,1.181,48,3.76,49,3.258,50,1.192,52,0.01,53,0.01,134,0.366,140,2.222,189,1.438,190,0.983,191,1.31,220,1.869,237,3.667,238,3.275,240,4.768,241,3.883,242,4.768,243,4.768,245,2.829,255,2.311,258,1.623,261,4.699,296,2.228,298,2.228,299,1.869,302,1.869,303,2.228,304,2.029,305,1.623,306,2.029,309,2.502,310,2.228,311,1.356,312,1.869,313,2.495,326,2.502,329,3.883,332,1.917,340,3.275,341,3.275,856,2.982,857,2.495,858,2.495,859,4.348,860,4.348,861,4.348,862,2.495,863,6.027,864,2.901,865,4.28,866,5.524,867,2.901,868,2.495,869,2.495,870,2.901,871,2.495,872,2.901,873,5.572,874,2.901,875,3.027,876,2.495,877,2.901,878,2.901,879,2.495,880,4.348,881,2.901,882,5.055,883,2.901,884,2.901,885,2.901,886,2.901]],["title/modules/ProfileModule.html",[54,1.283,69,2.405]],["body/modules/ProfileModule.html",[2,2.372,3,0.231,4,0.231,5,0.153,14,0.018,28,0.358,29,1.113,40,0.231,41,0.184,52,0.014,53,0.014,54,2.24,56,2.207,57,2.089,58,2.48,59,2.48,60,2.089,61,3.045,62,2.48,69,4.763,72,3.125,73,2.48,74,2.336,76,2.826,83,2.826,85,2.089,234,1.113,314,1.704,429,3.562,432,3.625,433,3.329,620,3.625,856,4.555,875,4.309,876,4.06,887,4.06,888,4.06,889,4.719,890,4.06,891,4.719]],["title/injectables/ProfileService.html",[182,1.062,875,2.234]],["body/injectables/ProfileService.html",[3,0.139,4,0.139,5,0.092,9,0.188,10,1.036,11,2.663,14,0.019,22,0.5,24,1.362,28,0.288,29,0.668,35,0.975,40,0.139,41,0.111,42,1.855,46,1.193,47,1.174,50,1.299,52,0.01,53,0.01,85,1.255,132,1.982,134,0.426,140,1.989,153,1.255,161,1.651,163,2.455,182,1.193,183,1.325,189,1.673,190,1.143,191,1.523,195,2.074,198,1.982,234,0.988,245,2.791,255,2.297,258,1.586,261,4.751,314,1.023,326,3.153,332,2.335,373,1.325,416,1.13,433,2.345,450,4.455,451,3.219,452,4.29,485,4.29,486,2.438,487,1.982,490,2.177,491,2.438,507,3.831,538,3.831,557,4.113,559,3.831,560,4.29,685,2.438,690,5.479,728,1.697,737,4.29,859,3.605,860,3.605,861,3.605,862,3.605,863,5.999,865,4.233,866,3.831,868,3.605,871,3.605,875,2.51,890,2.438,892,2.438,893,4.191,894,2.438,895,2.834,896,4.191,897,2.834,898,2.834,899,2.834,900,2.834,901,2.834,902,2.834,903,2.438,904,4.987,905,4.191,906,2.834,907,5.296,908,2.834,909,4.191,910,4.191,911,4.191,912,4.191,913,2.834,914,2.834,915,2.834,916,2.834,917,2.834,918,2.834]],["title/classes/RegisterDto.html",[41,0.146,919,2.405]],["body/classes/RegisterDto.html",[3,0.222,4,0.222,5,0.148,9,0.302,13,1.022,14,0.019,22,0.387,28,0.313,32,1.293,40,0.284,41,0.272,46,2.028,47,1.125,52,0.014,53,0.014,134,0.464,140,2.316,142,2.571,161,1.582,203,1.293,207,1.436,211,2.78,212,1.813,213,3.775,214,2.716,215,1.724,253,2.544,651,2.571,711,2.93,799,3.478,800,2.722,802,3.833,803,2.722,825,3.179,827,3.179,828,3.179,829,3.179,919,3.743,920,3.492,921,4.347,922,4.545,923,3.492,924,3.91]],["title/controllers/TagController.html",[0,1.488,925,2.61]],["body/controllers/TagController.html",[0,1.795,2,1.795,3,0.22,4,0.22,5,0.146,7,1.661,9,0.299,10,1.427,11,2.541,13,1.012,14,0.018,15,3.458,16,3.23,18,3.531,20,3.456,21,3.72,22,0.383,24,1.113,28,0.329,29,1.061,30,3.456,31,3.815,32,1.281,38,3.456,39,3.148,40,0.22,41,0.176,45,2.519,46,1.281,48,3.23,50,1.061,52,0.014,53,0.014,220,2.901,245,2.519,299,2.901,326,2.228,332,1.707,430,3.347,550,5.553,925,4.037,926,3.872,927,5.781,928,5.781,929,3.458,930,4.501,931,3.872,932,4.501,933,4.501,934,3.458,935,4.501,936,4.501,937,3.872]],["title/entities/TagEntity.html",[375,1.488,435,2.234]],["body/entities/TagEntity.html",[3,0.245,4,0.245,5,0.163,7,1.236,9,0.332,13,1.386,14,0.018,22,0.525,28,0.245,40,0.245,41,0.261,47,1.084,52,0.015,53,0.015,134,0.447,146,2.627,153,2.73,190,1.357,207,1.524,255,2.121,375,2.784,381,2.807,404,4.003,406,3.692,416,1.994,435,3.692,505,4.312,550,3.841,938,4.301,939,5,940,4.301,941,5,942,4.301]],["title/modules/TagModule.html",[54,1.283,70,2.405]],["body/modules/TagModule.html",[2,2.447,3,0.243,4,0.243,5,0.161,14,0.018,28,0.35,29,1.169,40,0.243,41,0.194,52,0.015,53,0.015,54,2.291,56,2.319,57,2.196,58,2.606,59,2.606,60,2.196,61,3.115,62,2.606,70,4.696,72,3.223,73,2.606,74,2.455,76,2.97,83,2.97,85,2.196,430,3.828,435,2.97,925,4.659,931,4.266,943,4.959,944,4.959,945,4.959,946,4.959,947,4.266,948,4.959]],["title/injectables/TagService.html",[182,1.062,430,1.96]],["body/injectables/TagService.html",[3,0.198,4,0.198,5,0.131,9,0.268,10,1.329,11,2.753,14,0.019,22,0.514,24,1.329,27,3.014,28,0.345,29,0.952,40,0.198,41,0.158,42,2.381,46,1.53,50,1.268,52,0.013,53,0.013,85,1.788,88,2.604,89,3.466,126,2.825,134,0.39,163,1.611,169,4.626,182,1.53,183,1.889,187,5.411,189,1.53,190,1.045,191,1.393,193,3.475,194,3.475,195,2.662,205,1.889,321,3.103,326,2.662,332,1.532,416,1.611,430,2.826,435,3.22,450,4.508,487,2.825,505,4.228,544,3.475,549,3.103,714,4.508,927,5.544,937,3.475,947,3.475,949,3.475,950,5.378,951,4.04,952,4.04,953,5.378,954,5.378,955,4.04,956,4.04,957,4.04,958,4.04,959,4.04,960,3.475,961,4.04,962,4.04,963,4.04,964,5.378,965,4.04,966,4.04,967,4.04,968,3.475]],["title/controllers/UserController.html",[0,1.488,969,2.61]],["body/controllers/UserController.html",[0,1.422,2,1.422,3,0.174,4,0.174,5,0.116,7,1.513,9,0.237,10,1.221,11,2.261,13,1.111,14,0.019,16,2.765,18,3.377,20,2.958,21,3.184,22,0.42,24,1.513,27,2.651,28,0.334,29,0.841,30,2.958,31,3.395,32,1.014,34,1.352,35,1.226,40,0.174,41,0.139,43,1.667,45,1.995,46,1.014,47,0.997,48,2.765,50,1.165,52,0.012,53,0.012,134,0.258,161,1.824,189,1.406,190,0.96,191,1.28,208,2.31,220,2.298,234,0.841,247,3.216,255,1.95,294,3.795,297,5.72,299,2.298,312,2.298,326,1.765,329,2.739,457,3.795,605,2.651,641,3.945,676,3.067,818,3.945,929,2.739,934,2.739,969,3.455,970,3.067,971,5.669,972,4.94,973,3.565,974,3.565,975,3.565,976,4.25,977,4.701,978,3.565,979,3.565,980,4.25,981,4.25,982,4.94,983,4.25,984,6.427,985,3.795,986,3.067,987,3.067,988,3.565,989,2.298,990,2.739,991,3.565,992,3.565,993,3.565,994,3.067,995,3.565,996,3.565,997,3.565]],["title/classes/UserDto.html",[41,0.146,822,2.405]],["body/classes/UserDto.html",[3,0.18,4,0.18,5,0.12,9,0.245,13,1.462,14,0.019,22,0.553,28,0.282,32,1.049,40,0.247,41,0.254,46,2.131,47,1.265,52,0.012,53,0.012,134,0.499,140,2.594,142,2.879,161,1.249,203,1.049,207,1.249,211,2.744,212,1.47,214,2.364,215,1.398,247,1.937,370,4.023,651,2.879,799,3.027,800,2.207,802,4.306,803,2.207,818,2.376,819,5.161,820,2.831,821,3.171,822,4.001,824,4.348,825,2.578,826,3.171,827,2.578,828,3.535,829,3.535,830,3.171,831,4.549,832,3.171,833,4.192,834,2.831,835,3.171,998,3.686,999,3.686,1000,3.686,1001,3.686,1002,3.686,1003,3.686,1004,3.686,1005,3.686,1006,3.686,1007,3.686,1008,3.686]],["title/entities/UserEntity.html",[234,0.88,375,1.488]],["body/entities/UserEntity.html",[3,0.144,4,0.144,5,0.096,7,0.728,9,0.196,13,1.541,14,0.019,22,0.583,28,0.306,40,0.144,41,0.219,47,1.206,52,0.01,53,0.01,134,0.497,140,2.383,142,2.645,144,2.78,146,1.548,153,1.909,161,1.261,163,1.175,190,0.838,205,2.017,207,1.066,212,2.035,217,2.583,221,3.568,234,1.017,255,1.483,283,3.288,373,1.378,375,2.49,376,2.572,381,2.142,391,3.142,392,4.388,397,1.548,400,2.535,404,3.055,406,4.464,415,4.83,416,1.175,512,4.388,548,3.71,578,3.71,614,2.95,616,2.061,646,2.061,650,3.851,651,2.645,665,1.649,679,2.78,804,3.927,810,3.71,831,4.179,833,3.288,940,2.535,942,2.535,1009,2.535,1010,2.947,1011,2.947,1012,2.947,1013,2.947,1014,2.947,1015,2.947,1016,2.947,1017,3.313,1018,2.947,1019,4.313,1020,3.71,1021,2.947,1022,4.313,1023,4.313,1024,2.535,1025,4.313,1026,2.947,1027,2.947,1028,4.313,1029,4.313,1030,4.313,1031,4.313,1032,4.313,1033,2.947,1034,3.71,1035,3.313,1036,3.71,1037,3.71,1038,2.947,1039,4.313,1040,4.313,1041,4.313,1042,2.947,1043,2.947]],["title/classes/UserLoginDto.html",[41,0.146,797,2.405]],["body/classes/UserLoginDto.html",[3,0.22,4,0.22,5,0.146,7,1.11,9,0.298,13,1.296,14,0.018,22,0.49,28,0.311,32,1.278,40,0.282,41,0.277,46,2.056,47,1.181,52,0.014,53,0.014,134,0.487,142,3.074,161,1.11,203,1.278,207,1.424,211,2.678,212,1.791,213,3.561,214,2.695,215,1.703,253,3.225,651,3.074,795,2.689,796,3.449,797,4.327,799,3.451,800,2.689,801,4.031,802,4.02,803,2.689,1044,3.863,1045,4.49,1046,3.863,1047,4.49]],["title/classes/UserRegistrationDto.html",[41,0.146,921,2.405]],["body/classes/UserRegistrationDto.html",[3,0.204,4,0.204,5,0.136,7,1.03,9,0.277,13,1.38,14,0.018,22,0.522,28,0.3,32,1.186,40,0.269,41,0.272,46,2.093,47,1.224,52,0.013,53,0.013,134,0.492,140,2.704,142,3.002,161,1.03,203,1.186,207,1.357,211,2.704,212,1.662,213,3.651,214,2.567,215,1.58,253,3.072,651,3.002,799,3.287,800,2.495,802,4.169,803,2.495,825,2.914,827,2.914,828,3.839,829,3.839,919,2.686,920,3.201,921,4.205,923,4.217,924,4.722,1044,3.585,1046,3.585,1048,4.167,1049,4.167,1050,4.167,1051,4.167]],["title/entities/UserRoles.html",[375,1.488,614,1.96]],["body/entities/UserRoles.html",[3,0.191,4,0.191,5,0.127,7,0.965,8,4.037,9,0.259,13,1.336,14,0.018,22,0.505,28,0.291,34,1.481,35,1.343,40,0.191,41,0.232,52,0.012,53,0.012,134,0.461,146,2.051,161,1.726,207,1.299,234,1.499,255,1.808,258,2.941,375,2.726,381,2.495,383,2.999,388,2.999,397,3.34,404,3.558,406,4.252,414,4.037,416,1.557,614,2.761,642,4.521,650,3.387,664,5.707,679,4.501,680,2.999,684,4.521,858,4.521,866,4.883,989,2.516,1017,4.037,1024,3.358,1034,4.521,1035,4.037,1036,4.521,1037,4.521,1052,5.468,1053,3.358,1054,3.903,1055,6.357,1056,3.903,1057,5.256,1058,5.256,1059,4.037,1060,5.256,1061,5.256,1062,5.256,1063,3.903]],["title/controllers/UsersController.html",[0,1.488,1064,2.61]],["body/controllers/UsersController.html",[0,1.703,2,0.879,3,0.108,4,0.108,5,0.072,7,1.797,9,0.146,10,0.855,11,2.627,13,1.088,14,0.019,16,2.707,18,3.34,19,2.419,20,3.617,21,3.118,22,0.412,24,1.379,27,2.972,28,0.322,29,0.52,30,2.071,31,3.88,32,0.627,34,0.836,35,0.758,38,2.557,39,1.541,40,0.108,41,0.086,42,1.531,43,2.728,44,1.319,46,0.984,47,1.026,48,3.558,49,2.229,50,1.14,52,0.008,53,0.008,134,0.351,140,2.664,144,2.229,161,1.804,163,0.879,189,1.376,190,0.94,191,1.253,195,1.712,208,1.997,220,1.42,234,0.52,238,3.716,240,3.716,241,2.657,242,3.716,243,3.716,247,2.931,250,2.419,252,4.161,253,2.707,258,2.942,296,2.657,298,1.693,299,1.42,302,1.42,303,1.693,304,1.541,305,1.233,306,1.541,310,1.693,311,1.03,326,2.114,332,1.62,340,1.693,341,1.693,557,1.541,603,2.942,605,2.262,631,3.28,641,2.229,646,3.676,651,1.531,733,1.817,769,2.976,795,3.147,801,4.345,831,2.419,833,2.229,869,1.895,879,1.895,880,2.976,919,3.388,923,4.038,928,4.798,929,2.657,934,2.657,977,2.657,980,2.976,985,2.657,989,1.42,990,1.693,1064,2.419,1065,1.895,1066,4.27,1067,4.27,1068,2.203,1069,2.203,1070,2.203,1071,2.203,1072,3.459,1073,3.459,1074,2.976,1075,2.976,1076,2.203,1077,2.203,1078,3.459,1079,2.657,1080,2.203,1081,2.203,1082,2.203,1083,2.976,1084,2.203,1085,2.203,1086,4.837,1087,2.203,1088,2.976,1089,1.895,1090,2.203,1091,2.203,1092,1.895,1093,1.895,1094,2.203,1095,2.203,1096,2.203,1097,3.459,1098,3.459,1099,3.459,1100,3.459,1101,3.459,1102,2.203,1103,2.203,1104,2.203,1105,1.895,1106,2.203,1107,2.203]],["title/modules/UsersModule.html",[54,1.283,71,2.405]],["body/modules/UsersModule.html",[2,2.202,3,0.206,4,0.206,5,0.137,14,0.019,28,0.366,29,0.991,40,0.206,41,0.164,52,0.013,53,0.013,54,2.121,56,1.966,57,1.862,58,2.209,59,2.209,60,1.862,61,2.883,62,2.209,67,4.18,71,4.749,72,2.901,73,2.209,74,2.081,76,3.307,83,2.518,85,1.862,97,3.617,161,1.039,234,0.991,305,3.09,306,2.941,429,3.455,432,3.23,605,3.264,614,2.901,616,2.941,620,3.23,743,3.862,755,2.941,969,4.313,989,2.71,990,3.23,1064,4.313,1108,4.205,1109,4.205,1110,4.205,1111,4.205,1112,5.522,1113,4.205,1114,4.205,1115,4.205,1116,4.205,1117,4.205,1118,4.205]],["title/injectables/UsersService.html",[182,1.062,605,1.745]],["body/injectables/UsersService.html",[3,0.095,4,0.095,5,0.063,7,0.773,9,0.129,10,0.773,11,2.541,14,0.019,16,1.086,21,1.25,22,0.491,24,1.623,26,1.49,27,3.27,28,0.306,29,0.457,34,0.736,35,0.667,40,0.095,41,0.076,42,1.993,43,2.924,44,1.872,46,0.89,47,1.182,49,2.015,50,1.308,52,0.007,53,0.007,85,0.859,134,0.418,140,2.706,142,2.768,144,3.4,161,1.836,163,1.969,182,0.89,183,0.907,189,1.642,190,1.158,191,1.495,195,1.547,234,0.457,247,3.214,250,3.149,255,1.908,258,3.105,294,3.458,326,2.443,332,1.872,381,1.648,397,1.019,416,0.774,450,4.168,451,3.016,457,1.49,487,1.357,490,1.49,507,1.49,511,1.669,557,3.149,559,1.49,572,1.357,575,1.669,605,1.462,614,2.063,616,1.357,646,2.186,650,2.53,651,2.185,669,1.49,679,1.25,782,2.689,795,1.872,797,2.902,801,1.357,814,2.689,815,2.689,822,1.25,833,1.25,894,1.669,921,3.182,960,2.689,968,3.377,976,2.689,977,4.894,985,4.053,986,1.669,987,1.669,989,1.25,994,2.689,1017,2.401,1019,1.49,1020,1.669,1035,1.49,1059,2.401,1074,3.873,1075,2.689,1079,2.401,1088,3.377,1089,1.669,1092,1.669,1093,1.669,1119,1.669,1120,3.126,1121,3.126,1122,3.926,1123,3.926,1124,1.94,1125,3.126,1126,1.94,1127,3.126,1128,3.126,1129,1.94,1130,3.126,1131,3.126,1132,4.502,1133,1.94,1134,3.126,1135,1.94,1136,5.276,1137,3.126,1138,1.94,1139,3.126,1140,1.94,1141,3.126,1142,1.94,1143,1.94,1144,3.126,1145,3.126,1146,3.126,1147,1.94,1148,1.94,1149,1.94,1150,1.94,1151,1.94,1152,1.94,1153,1.94,1154,1.94,1155,1.94,1156,1.94,1157,1.94,1158,1.94,1159,1.94,1160,1.94,1161,1.94,1162,3.377,1163,1.94,1164,2.689,1165,1.669,1166,1.94,1167,1.94,1168,1.94,1169,1.94,1170,1.94,1171,1.94,1172,1.669,1173,1.94,1174,1.94,1175,1.94,1176,1.94,1177,1.94,1178,2.689,1179,1.94,1180,1.94,1181,1.94,1182,1.94,1183,3.126,1184,1.94,1185,1.94,1186,1.94,1187,1.94,1188,1.94]],["title/coverage.html",[1189,4.385]],["body/coverage.html",[0,2.424,1,1.915,5,0.089,6,2.355,14,0.018,36,1.639,38,1.639,41,0.283,52,0.01,53,0.01,60,1.212,61,1.28,134,0.198,161,0.677,163,1.092,182,1.883,184,2.355,201,2.103,202,1.764,204,3.492,205,1.91,206,3.138,216,1.764,218,1.915,219,2.355,234,0.645,248,1.764,278,1.764,286,1.764,302,1.764,305,1.532,307,1.438,308,1.438,309,1.355,312,1.764,315,1.639,331,1.639,361,3.138,375,2.424,376,1.092,377,2.355,391,1.532,402,5.861,420,2.355,421,2.355,429,1.355,430,1.438,433,1.532,435,1.639,441,2.355,593,2.355,594,2.355,603,1.532,604,1.639,605,1.28,606,2.103,614,1.438,630,2.355,653,2.103,703,2.355,714,1.915,715,2.355,716,2.355,720,3.244,721,3.244,723,1.438,727,1.438,733,1.438,736,2.355,743,1.915,744,2.355,745,2.355,746,1.915,757,2.103,767,2.355,795,1.639,796,3.138,797,1.764,804,1.915,805,2.355,818,1.764,819,3.138,820,3.138,822,1.764,838,2.355,845,2.103,853,2.103,856,1.915,857,2.355,875,1.639,892,2.355,919,1.764,920,3.138,921,1.764,925,1.915,926,2.355,938,2.355,949,2.355,969,1.915,970,2.355,1009,2.355,1052,2.355,1053,2.355,1064,1.915,1065,2.355,1119,2.355,1189,2.355,1190,2.738,1191,2.738,1192,2.355,1193,6.126,1194,2.355,1195,7.121,1196,7.173,1197,2.738,1198,5.417,1199,2.738,1200,2.738,1201,2.738,1202,2.738,1203,4.085,1204,6.998,1205,2.738,1206,3.514,1207,2.355,1208,4.085,1209,2.738,1210,2.738,1211,3.514,1212,3.514,1213,3.514,1214,4.886,1215,2.355,1216,3.138,1217,2.355,1218,4.452,1219,2.355,1220,6.298,1221,2.355,1222,2.355,1223,2.355,1224,2.738,1225,2.738,1226,2.738,1227,2.738,1228,2.738,1229,2.738,1230,2.355,1231,2.738,1232,2.738,1233,2.738,1234,2.355]],["title/dependencies.html",[57,1.987,1235,2.678]],["body/dependencies.html",[5,0.114,14,0.019,29,0.829,32,1.001,41,0.191,52,0.012,53,0.012,57,1.557,60,1.557,79,2.267,81,3.026,82,2.702,85,1.557,86,3.026,88,2.267,89,3.628,93,3.026,94,3.026,212,1.403,215,1.334,416,1.403,422,2.702,488,3.026,611,2.702,613,2.46,623,2.267,662,3.026,755,2.46,785,4.21,1019,2.702,1236,3.518,1237,4.894,1238,4.894,1239,3.518,1240,3.026,1241,3.518,1242,3.518,1243,3.518,1244,3.518,1245,7.125,1246,3.518,1247,3.518,1248,3.518,1249,3.518,1250,3.518,1251,3.518,1252,5.629,1253,4.21,1254,3.518,1255,3.026,1256,3.518,1257,3.518,1258,3.518,1259,3.518,1260,3.518,1261,3.518,1262,3.518,1263,3.518,1264,3.518,1265,3.518,1266,3.518,1267,4.894,1268,3.518,1269,4.894,1270,3.518,1271,3.026,1272,3.518,1273,3.518,1274,3.518,1275,3.518,1276,3.518,1277,3.518,1278,3.518,1279,5.629,1280,4.894,1281,3.518,1282,3.518,1283,3.518,1284,3.518,1285,3.518,1286,3.518,1287,3.518,1288,3.518,1289,3.518,1290,3.026,1291,3.518,1292,3.518,1293,3.518,1294,3.518,1295,3.518,1296,3.518,1297,4.894,1298,4.894,1299,3.518,1300,3.518,1301,3.518,1302,3.518,1303,3.518,1304,3.518,1305,3.518,1306,3.518,1307,3.518,1308,3.518,1309,3.518,1310,3.518,1311,4.894,1312,3.518,1313,3.518,1314,4.894,1315,3.518,1316,3.518,1317,3.518,1318,3.518,1319,3.518,1320,3.518,1321,3.518,1322,3.518,1323,3.518,1324,3.518,1325,3.518,1326,3.518,1327,3.518,1328,3.518,1329,3.518,1330,3.518,1331,3.518,1332,3.518,1333,3.518,1334,3.518,1335,3.518,1336,3.518,1337,3.518,1338,3.518]],["title/miscellaneous/functions.html",[1339,1.864,1340,3.862]],["body/miscellaneous/functions.html",[9,0.392,14,0.016,52,0.016,53,0.016,60,3.178,1218,4.539,1339,3.538,1340,5.083,1341,5.083]],["title/index.html",[9,0.207,1342,3.114,1343,2.678]],["body/index.html",[5,0.127,7,0.771,8,4.047,14,0.018,35,1.347,47,0.34,48,1.082,52,0.007,53,0.007,54,1.695,57,1.734,74,2.44,88,3.177,89,2.01,105,1.664,107,3.009,109,1.664,111,1.664,113,1.664,115,1.664,117,1.664,119,1.664,121,1.664,123,1.664,128,1.664,132,3.685,134,0.226,140,0.771,142,1.38,144,4.103,151,3.37,154,3.009,163,0.771,185,3.37,190,0.376,191,0.501,198,4.525,201,2.395,250,2.181,372,2.896,378,1.082,397,2.59,416,2.374,639,1.664,640,2.395,641,1.247,643,1.664,644,2.682,645,1.664,649,2.682,669,3.786,682,1.664,694,1.664,778,2.682,781,1.486,834,1.486,846,1.664,865,1.486,903,3.866,907,2.682,983,1.664,1059,3.009,1083,1.664,1105,3.866,1162,4.24,1164,1.664,1165,1.664,1172,1.664,1178,1.664,1193,2.682,1216,3.786,1234,1.664,1240,3.37,1255,2.682,1271,2.682,1290,2.682,1343,1.664,1344,1.934,1345,1.934,1346,3.118,1347,3.918,1348,1.934,1349,1.934,1350,1.934,1351,1.934,1352,3.118,1353,1.934,1354,1.934,1355,1.934,1356,3.118,1357,4.929,1358,5.268,1359,4.494,1360,5.541,1361,3.118,1362,3.918,1363,3.118,1364,3.118,1365,3.918,1366,1.934,1367,5.541,1368,1.934,1369,3.118,1370,1.934,1371,1.934,1372,5.268,1373,1.934,1374,1.934,1375,1.934,1376,1.934,1377,4.494,1378,3.118,1379,6.643,1380,4.494,1381,4.494,1382,1.934,1383,3.118,1384,1.934,1385,1.934,1386,1.934,1387,5.541,1388,3.118,1389,3.118,1390,3.118,1391,3.918,1392,3.118,1393,1.934,1394,1.934,1395,1.934,1396,1.934,1397,1.934,1398,6.111,1399,4.494,1400,1.934,1401,1.934,1402,1.934,1403,1.934,1404,3.118,1405,1.934,1406,1.934,1407,1.934,1408,1.934,1409,1.934,1410,3.118,1411,1.934,1412,1.934,1413,4.494,1414,3.918,1415,6.111,1416,1.934,1417,4.494,1418,1.934,1419,1.934,1420,3.918,1421,1.934,1422,1.934,1423,1.934,1424,1.934,1425,3.118,1426,1.934,1427,6.111,1428,1.934,1429,1.934,1430,1.934,1431,1.934,1432,1.934,1433,3.118,1434,1.934,1435,1.934,1436,1.934,1437,1.934,1438,1.934,1439,1.934,1440,1.934,1441,1.934,1442,4.494,1443,1.934,1444,1.934,1445,3.118,1446,1.934,1447,1.934,1448,1.934,1449,1.934,1450,1.934,1451,1.934,1452,1.934,1453,1.934,1454,1.934,1455,1.934,1456,3.118,1457,1.934,1458,1.934,1459,1.934,1460,1.934,1461,3.118,1462,1.934,1463,1.934,1464,1.934,1465,1.934,1466,3.118,1467,4.494,1468,1.934,1469,1.934,1470,1.934,1471,1.934,1472,1.664,1473,1.934,1474,1.934,1475,3.118,1476,1.934,1477,1.934,1478,1.934,1479,3.118,1480,1.934,1481,1.934,1482,1.934,1483,3.918,1484,3.918,1485,1.934,1486,1.934,1487,1.934,1488,3.118,1489,3.118,1490,1.934,1491,1.934,1492,1.934,1493,1.934,1494,3.118,1495,1.934,1496,1.934,1497,1.934,1498,1.934,1499,1.934,1500,3.118,1501,1.934,1502,1.934,1503,1.934,1504,1.934,1505,1.934,1506,3.118,1507,1.934,1508,3.118,1509,1.934,1510,1.934,1511,1.934,1512,1.934,1513,1.934,1514,1.934,1515,1.934,1516,3.118,1517,4.494,1518,1.934,1519,1.934,1520,1.934,1521,3.918,1522,3.918,1523,3.118,1524,1.934,1525,1.934,1526,1.934,1527,1.934,1528,1.934,1529,1.934,1530,1.934,1531,1.934,1532,1.934,1533,1.934,1534,1.934,1535,1.934,1536,1.934,1537,1.934,1538,1.934,1539,3.118,1540,4.929,1541,3.118,1542,3.118,1543,3.118,1544,3.118,1545,1.934,1546,3.918,1547,3.118,1548,3.118,1549,3.118,1550,3.118,1551,1.934,1552,3.118,1553,3.118,1554,3.118,1555,1.934,1556,1.934,1557,1.934,1558,2.682,1559,3.118,1560,1.934,1561,1.934,1562,1.934,1563,1.934,1564,1.934,1565,1.934,1566,1.934,1567,1.934,1568,1.934,1569,1.934,1570,1.934,1571,1.934,1572,1.934,1573,1.934,1574,1.934,1575,1.934,1576,1.934,1577,1.934,1578,1.934,1579,1.934,1580,1.934,1581,1.934,1582,1.934,1583,1.934,1584,1.934,1585,1.934,1586,1.934,1587,1.934,1588,1.664,1589,1.934,1590,1.934,1591,1.934,1592,1.934,1593,1.934,1594,1.934,1595,1.934,1596,1.664,1597,1.934,1598,1.664,1599,1.934]],["title/modules.html",[56,2.383]],["body/modules.html",[14,0.015,52,0.015,53,0.015,55,3.794,56,2.536,66,3.496,67,3.248,68,3.496,69,3.496,70,3.496,71,3.496,1253,6.471,1588,6.471,1600,7.523,1601,7.523]],["title/overview.html",[1602,4.385]],["body/overview.html",[2,1.567,14,0.018,36,3.569,52,0.013,53,0.013,54,1.351,55,5.279,56,1.837,57,1.739,58,2.064,59,2.064,60,1.739,61,1.837,62,2.064,63,3.379,64,3.379,65,3.379,66,4.642,67,4.429,68,4.413,69,4.508,70,4.285,71,4.642,72,2.773,73,2.064,74,1.944,146,2.064,183,1.837,203,1.118,315,3.569,427,3.379,428,3.379,429,3.603,430,3.348,497,4.54,572,3.692,600,3.379,601,3.379,602,3.379,603,3.915,604,4.189,605,2.98,698,3.379,700,3.379,727,2.064,746,2.748,875,3.569,887,3.379,888,3.379,1602,3.379,1603,3.928,1604,3.928,1605,3.928]],["title/properties.html",[207,1.11,1235,2.678]],["body/properties.html",[14,0.018,52,0.016,53,0.016,207,1.447,378,3.276,1596,5.035,1598,5.035,1606,5.035,1607,5.853,1608,5.853,1609,5.853]],["title/miscellaneous/typealiases.html",[1339,1.864,1610,4.489]],["body/miscellaneous/typealiases.html",[9,0.369,14,0.017,52,0.016,53,0.016,134,0.403,653,4.267,657,2.918,661,4.778,667,5.652,674,3.452,720,3.109,721,3.916,723,2.918,729,4.19,730,3.452,853,4.267,1339,3.326,1611,5.554,1612,6.57,1613,6.57]],["title/miscellaneous/variables.html",[1339,1.864,1614,3.862]],["body/miscellaneous/variables.html",[7,1.191,9,0.228,14,0.019,18,1.807,38,2.885,47,1.156,50,1.136,52,0.011,53,0.011,61,2.253,107,3.701,132,2.406,134,0.52,153,2.133,161,1.489,163,1.372,190,0.669,198,4.599,234,0.811,245,1.925,302,3.105,311,2.253,312,3.105,332,1.305,373,1.608,381,2.335,397,3.879,483,5.671,572,4.214,603,1.925,604,2.06,606,2.642,609,2.642,614,2.531,650,2.217,651,1.523,679,3.105,680,3.701,730,1.807,752,2.642,757,3.701,762,2.959,781,3.701,845,3.701,981,2.959,1079,2.642,1192,2.959,1194,4.145,1206,2.959,1207,4.145,1211,2.959,1212,2.959,1213,4.784,1215,2.959,1216,4.629,1217,2.959,1218,2.642,1219,4.145,1221,4.145,1222,4.145,1223,4.145,1230,2.959,1339,2.06,1341,5.183,1472,2.959,1558,2.959,1606,2.959,1614,2.959,1615,4.818,1616,3.439,1617,3.439,1618,4.818,1619,3.439,1620,3.439,1621,4.818,1622,3.439,1623,3.439,1624,3.439,1625,3.439,1626,3.439,1627,3.439,1628,3.439,1629,3.439,1630,3.439,1631,3.439,1632,3.439,1633,3.439,1634,4.818,1635,3.439,1636,3.439,1637,3.439,1638,3.439,1639,3.439,1640,3.439,1641,4.818]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":402,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":498,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":1607,"title":{},"body":{"properties.html":{}}}],["0.0.2",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1338,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1334,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1316,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1204,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1205,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":572,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.29.0",{"_index":1322,"title":{},"body":{"dependencies.html":{}}}],["1.3.7",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["1.5.5",{"_index":1320,"title":{},"body":{"dependencies.html":{}}}],["1.6.5",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1306,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1295,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["10.0.4",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["14d",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["15.1.0",{"_index":1313,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":1382,"title":{},"body":{"index.html":{}}}],["16.0.0",{"_index":1310,"title":{},"body":{"dependencies.html":{}}}],["16.0.1",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["16.1.0",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["16.1.3",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["16.4.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["17.6.0",{"_index":1296,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1605,"title":{},"body":{"overview.html":{}}}],["2.0.4",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1303,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1333,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1305,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["20m",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["22.0.0",{"_index":1315,"title":{},"body":{"dependencies.html":{}}}],["2400",{"_index":1462,"title":{},"body":{"index.html":{}}}],["25",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":1023,"title":{},"body":{"entities/UserEntity.html":{}}}],["3.0.0",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1335,"title":{},"body":{"dependencies.html":{}}}],["3/12",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1531,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":1317,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1292,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1298,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1336,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1463,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["5.0.2",{"_index":1301,"title":{},"body":{"dependencies.html":{}}}],["5.3.0",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":497,"title":{},"body":{"injectables/ArticleService.html":{},"overview.html":{}}}],["6.0.0",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["6.6.2",{"_index":1294,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1603,"title":{},"body":{"overview.html":{}}}],["7.0.12",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":1331,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1604,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["9._]{4,20}$)(?!.*[_.]{2})[^_.].*[^_",{"_index":924,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{}}}],["9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_",{"_index":830,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)@isoptional",{"_index":1007,"title":{},"body":{"classes/UserDto.html":{}}}],["9/9",{"_index":1232,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":657,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":734,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["ability.can(useractionsenum.update",{"_index":732,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["abilitybuilder",{"_index":658,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":659,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1572,"title":{},"body":{"index.html":{}}}],["access",{"_index":684,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":1435,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1487,"title":{},"body":{"index.html":{}}}],["account",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1571,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1477,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1485,"title":{},"body":{"index.html":{}}}],["addarticletofavorites",{"_index":442,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addarticletofavorites(slug",{"_index":456,"title":{},"body":{"injectables/ArticleService.html":{}}}],["again",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":1467,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":1460,"title":{},"body":{"index.html":{}}}],["analogjs/content",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["analogjs/router",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["angular",{"_index":1240,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1609,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1496,"title":{},"body":{"index.html":{}}}],["api",{"_index":198,"title":{},"body":{"injectables/AppService.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/docs",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":200,"title":{},"body":{"injectables/AppService.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":211,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isemail()@isoptional",{"_index":1000,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isfqdn()@isoptional",{"_index":1002,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":209,"title":{},"body":{"classes/ArticleCommentDto.html":{}}}],["apiproperty()@isnotempty()@isalpha",{"_index":717,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":1044,"title":{},"body":{"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@matches(/^(?=[a",{"_index":1050,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":1046,"title":{},"body":{"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@matches(/^(?=[a",{"_index":1006,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@maxlength(255)@isoptional",{"_index":998,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@minlength(8)@isoptional",{"_index":1004,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@type(undefined)@validatenested",{"_index":711,"title":{},"body":{"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({required",{"_index":366,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1564,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":299,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apitags('articles",{"_index":324,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apitags('profiles",{"_index":877,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('tags",{"_index":932,"title":{},"body":{"controllers/TagController.html":{}}}],["apitags('user",{"_index":991,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1587,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":1112,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":674,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1352,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1590,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":1341,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1613,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../user.decorator.ts",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/article/article.controller.ts",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["apps/api/src/article/article.controller.ts:100",{"_index":276,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:114",{"_index":295,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:140",{"_index":259,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:154",{"_index":284,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:170",{"_index":244,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:195",{"_index":269,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:216",{"_index":273,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:239",{"_index":265,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:46",{"_index":279,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:60",{"_index":289,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:78",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.entity.ts",{"_index":377,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/article.entity.ts:16",{"_index":405,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:19",{"_index":407,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:22",{"_index":411,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:25",{"_index":401,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:28",{"_index":390,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:31",{"_index":399,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:34",{"_index":412,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:37",{"_index":410,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:40",{"_index":403,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:51",{"_index":387,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:54",{"_index":394,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.module.ts",{"_index":431,"title":{},"body":{"modules/ArticleModule.html":{}}}],["apps/api/src/article/article.service.ts",{"_index":441,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["apps/api/src/article/article.service.ts:117",{"_index":473,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:121",{"_index":478,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:153",{"_index":463,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:173",{"_index":482,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:193",{"_index":467,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:207",{"_index":458,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:23",{"_index":454,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:234",{"_index":477,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:239",{"_index":465,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:254",{"_index":471,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:285",{"_index":469,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:313",{"_index":462,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:317",{"_index":460,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:37",{"_index":480,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:45",{"_index":474,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/comment.entity.ts",{"_index":703,"title":{},"body":{"entities/CommentEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/comment.entity.ts:15",{"_index":709,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:18",{"_index":707,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:23",{"_index":704,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:26",{"_index":706,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:29",{"_index":708,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:32",{"_index":710,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/dto/article",{"_index":420,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/articles",{"_index":593,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/create",{"_index":204,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.module.ts:43",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":1206,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:16",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:35",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":796,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:20",{"_index":1045,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:28",{"_index":1047,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:35",{"_index":798,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":920,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:21",{"_index":1048,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:29",{"_index":1051,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:37",{"_index":1049,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:44",{"_index":922,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:12",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":653,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:22",{"_index":656,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":701,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":838,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":841,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":843,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":840,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":720,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/profile/follow.entity.ts",{"_index":736,"title":{},"body":{"entities/FollowEntity.html":{},"coverage.html":{}}}],["apps/api/src/profile/follow.entity.ts:12",{"_index":739,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:6",{"_index":740,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:9",{"_index":738,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/profile.controller.ts",{"_index":857,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.controller.ts:33",{"_index":870,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:56",{"_index":867,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:79",{"_index":874,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.module.ts",{"_index":889,"title":{},"body":{"modules/ProfileModule.html":{}}}],["apps/api/src/profile/profile.service.ts",{"_index":892,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.service.ts:11",{"_index":895,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:19",{"_index":899,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:41",{"_index":898,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:71",{"_index":900,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:97",{"_index":897,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/tag/dto/create",{"_index":715,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts",{"_index":926,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts:17",{"_index":930,"title":{},"body":{"controllers/TagController.html":{}}}],["apps/api/src/tag/tag.entity.ts",{"_index":938,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.entity.ts:12",{"_index":941,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.entity.ts:9",{"_index":939,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.module.ts",{"_index":945,"title":{},"body":{"modules/TagModule.html":{}}}],["apps/api/src/tag/tag.service.ts",{"_index":949,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.service.ts:11",{"_index":952,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:18",{"_index":956,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:22",{"_index":955,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/users/dto/patch",{"_index":819,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":805,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":812,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":808,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":1052,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts",{"_index":970,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts:21",{"_index":979,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.controller.ts:33",{"_index":975,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.decorator.ts",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":1009,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:27",{"_index":1016,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:33",{"_index":1038,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:39",{"_index":1013,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:45",{"_index":1011,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:51",{"_index":1018,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:57",{"_index":1033,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:69",{"_index":1027,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:72",{"_index":1010,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:75",{"_index":1012,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:79",{"_index":1015,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:101",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:123",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:54",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:78",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":1111,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:109",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:131",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:147",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:42",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:51",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:61",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:78",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":1390,"title":{},"body":{"index.html":{}}}],["array",{"_index":409,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":205,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["article.author",{"_index":548,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["article.author.id",{"_index":561,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.comments",{"_index":576,"title":{},"body":{"injectables/ArticleService.html":{},"entities/CommentEntity.html":{}}}],["article.comments.findindex",{"_index":581,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.comments.splice(articlecommentindex",{"_index":588,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.controller",{"_index":438,"title":{},"body":{"modules/ArticleModule.html":{}}}],["article.dto",{"_index":323,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["article.dto.ts",{"_index":361,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["article.dto.ts:10",{"_index":365,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:13",{"_index":364,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:20",{"_index":368,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:27",{"_index":713,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["article.dto.ts:7",{"_index":369,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.entity",{"_index":439,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{}}}],["article.favoritescount",{"_index":574,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":571,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.service",{"_index":316,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["article.slug",{"_index":546,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":545,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist.map((name",{"_index":554,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article/article.entity",{"_index":665,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{}}}],["article/article.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["article/comment.entity",{"_index":1042,"title":{},"body":{"entities/UserEntity.html":{}}}],["articlecomment",{"_index":582,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecomment.id",{"_index":583,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecommentdto",{"_index":202,"title":{"classes/ArticleCommentDto.html":{}},"body":{"classes/ArticleCommentDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["articlecommentindex",{"_index":580,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontroller",{"_index":218,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articledto",{"_index":331,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["articleentity",{"_index":376,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["articlefeedqueryparams",{"_index":286,"title":{"classes/ArticleFeedQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articleindex",{"_index":591,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":569,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":570,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":66,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":455,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articles",{"_index":221,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["articles.map((article",{"_index":532,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":520,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleservice",{"_index":315,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesqueryparams",{"_index":278,"title":{"classes/ArticlesQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["articleswithfavorited",{"_index":531,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":1114,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":753,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":618,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/dto/login.dto",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/dto/register.dto",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":1113,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["authenticated",{"_index":982,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticating",{"_index":1466,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authentication/authorization",{"_index":1373,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":756,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":760,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":67,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":378,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"index.html":{},"properties.html":{}}}],["author.favorites.map((el",{"_index":514,"title":{},"body":{"injectables/ArticleService.html":{}}}],["author.id",{"_index":509,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authservice",{"_index":603,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1440,"title":{},"body":{"index.html":{}}}],["await",{"_index":326,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1371,"title":{},"body":{"index.html":{}}}],["bad",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":1030,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":413,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["behind",{"_index":1451,"title":{},"body":{"index.html":{}}}],["below",{"_index":1407,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1482,"title":{},"body":{"index.html":{}}}],["beta.19",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":1057,"title":{},"body":{"entities/UserRoles.html":{}}}],["bio",{"_index":831,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["body",{"_index":208,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":1367,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":728,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{}}}],["boolean(follow",{"_index":908,"title":{},"body":{"injectables/ProfileService.html":{}}}],["bootstrap",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["box",{"_index":1377,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1488,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1580,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1388,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1601,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1253,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":677,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["buildarticlecommentresponse",{"_index":443,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticlecommentresponse(comment",{"_index":459,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse",{"_index":444,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":461,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":1348,"title":{},"body":{"index.html":{}}}],["buildprofileresponse",{"_index":893,"title":{},"body":{"injectables/ProfileService.html":{}}}],["buildprofileresponse(profile",{"_index":896,"title":{},"body":{"injectables/ProfileService.html":{}}}],["built",{"_index":1434,"title":{},"body":{"index.html":{}}}],["can't",{"_index":910,"title":{},"body":{"injectables/ProfileService.html":{}}}],["can(useractionsenum.delete",{"_index":691,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.manage",{"_index":681,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":686,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":689,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":747,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":751,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1518,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":1062,"title":{},"body":{"entities/UserRoles.html":{}}}],["case",{"_index":963,"title":{},"body":{"injectables/TagService.html":{}}}],["casl",{"_index":666,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":702,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":662,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":432,"title":{},"body":{"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":303,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":310,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["caslfactory",{"_index":429,"title":{"injectables/CaslFactory.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":68,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":962,"title":{},"body":{"injectables/TagService.html":{}}}],["cert.pem",{"_index":1529,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1517,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1520,"title":{},"body":{"index.html":{}}}],["change",{"_index":1497,"title":{},"body":{"index.html":{}}}],["check",{"_index":846,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":845,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":302,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":341,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["checks",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":1389,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1490,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":1359,"title":{},"body":{"index.html":{}}}],["chroma",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["class",{"_index":41,"title":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":203,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"overview.html":{}}}],["clipboard",{"_index":1312,"title":{},"body":{"dependencies.html":{}}}],["clone",{"_index":1410,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":427,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":428,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":698,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":700,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":699,"title":{},"body":{"modules/CaslModule.html":{}}}],["cluster_profilemodule",{"_index":887,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":888,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":943,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_tagmodule_providers",{"_index":944,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":1108,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1109,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1110,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1557,"title":{},"body":{"index.html":{}}}],["collection",{"_index":1542,"title":{},"body":{"index.html":{}}}],["column",{"_index":406,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["column('simple",{"_index":408,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":400,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":1021,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":388,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["column({unique",{"_index":940,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["comes",{"_index":1372,"title":{},"body":{"index.html":{}}}],["coming",{"_index":675,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":1420,"title":{},"body":{"index.html":{}}}],["comment",{"_index":217,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleCommentDto.html":{},"entities/UserEntity.html":{}}}],["comment.article",{"_index":393,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["comment.author",{"_index":578,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["comment.dto",{"_index":322,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["comment.dto.ts",{"_index":206,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:15",{"_index":712,"title":{},"body":{"classes/CreateArticleCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":210,"title":{},"body":{"classes/ArticleCommentDto.html":{}}}],["comment.entity",{"_index":417,"title":{},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["commententity",{"_index":391,"title":{"entities/CommentEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["commentid",{"_index":267,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["commenting",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentonarticle",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentonarticle(user",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentrepository",{"_index":453,"title":{},"body":{"injectables/ArticleService.html":{}}}],["comments",{"_index":283,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["compose",{"_index":1404,"title":{},"body":{"index.html":{}}}],["config",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":626,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":628,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":1358,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1578,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1430,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1465,"title":{},"body":{"index.html":{}}}],["connections",{"_index":1476,"title":{},"body":{"index.html":{}}}],["console.log('follow",{"_index":906,"title":{},"body":{"injectables/ProfileService.html":{}}}],["const",{"_index":332,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(articlerepository",{"_index":449,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(configservice",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":186,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":748,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(tagrepository",{"_index":951,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":894,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["container",{"_index":1445,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1355,"title":{},"body":{"index.html":{}}}],["context",{"_index":754,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":765,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":764,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":849,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":1395,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":325,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('profiles",{"_index":878,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('tags",{"_index":933,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('user",{"_index":992,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('users",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":1498,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1189,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1418,"title":{},"body":{"index.html":{}}}],["create",{"_index":250,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["createarticle",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(user",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticlecommentdto",{"_index":216,"title":{"classes/CreateArticleCommentDto.html":{}},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["createarticlecommentdto.comment",{"_index":352,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createarticledto",{"_index":248,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["createcommentonarticle",{"_index":445,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createcommentonarticle(slug",{"_index":464,"title":{},"body":{"injectables/ArticleService.html":{}}}],["created",{"_index":1059,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createdarticle",{"_index":551,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createdat",{"_index":379,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["createforuser",{"_index":654,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":655,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createparamdecorator",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('articles",{"_index":501,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createquerybuilder('users",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtag",{"_index":950,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(tag",{"_index":954,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto",{"_index":714,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["createtoken",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":549,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{}}}],["crud",{"_index":1374,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":814,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":815,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":981,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":398,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["currently",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuser",{"_index":527,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuser.favorites.map((favorite",{"_index":528,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":261,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":1448,"title":{},"body":{"index.html":{}}}],["daily",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":977,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1574,"title":{},"body":{"index.html":{}}}],["date",{"_index":395,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["date%.log",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1530,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1566,"title":{},"body":{"index.html":{}}}],["default",{"_index":397,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":622,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":258,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':slug",{"_index":345,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":256,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/comments/:id",{"_index":354,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/comments/:id')@useguards(policiesguard)@checkpolicies(new",{"_index":268,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite",{"_index":359,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":263,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username/follow",{"_index":885,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":872,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletearticle",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticle(currentuserid",{"_index":254,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":466,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":262,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":468,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlepolicyhandler",{"_index":307,"title":{"classes/DeleteArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["deletearticlepolicyhandler())@apiresponse({status",{"_index":257,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletecommentfromarticle",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletecommentfromarticle(currentuserid",{"_index":266,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletecommentfromarticle(slug",{"_index":470,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deleted",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":1187,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":733,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1547,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1450,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1392,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1357,"title":{},"body":{"index.html":{}}}],["desc",{"_index":519,"title":{},"body":{"injectables/ArticleService.html":{}}}],["describe",{"_index":1562,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":1402,"title":{},"body":{"index.html":{}}}],["detached",{"_index":1446,"title":{},"body":{"index.html":{}}}],["details",{"_index":694,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":693,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":695,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":1455,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1595,"title":{},"body":{"index.html":{}}}],["development",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["different",{"_index":1475,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1443,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1379,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1546,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1551,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1556,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":1414,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1400,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":1384,"title":{},"body":{"index.html":{}}}],["dto",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["dto/article",{"_index":317,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/articles",{"_index":319,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/create",{"_index":321,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["dto/patch",{"_index":986,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":964,"title":{},"body":{"injectables/TagService.html":{}}}],["dynamic",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":374,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{}}}],["eager",{"_index":385,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["edit",{"_index":294,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["edit(userid",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser",{"_index":971,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":973,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1349,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":515,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1584,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1534,"title":{},"body":{"index.html":{}}}],["employs",{"_index":1028,"title":{},"body":{"entities/UserEntity.html":{}}}],["empty",{"_index":1469,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1510,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":1458,"title":{},"body":{"index.html":{}}}],["end",{"_index":1552,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1472,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":375,"title":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":1055,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":1417,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1419,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1216,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":911,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagService.html":{}}}],["es",{"_index":1299,"title":{},"body":{"dependencies.html":{}}}],["everything",{"_index":685,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["example",{"_index":834,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["exclude",{"_index":1039,"title":{},"body":{"entities/UserEntity.html":{}}}],["exec",{"_index":1539,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":839,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":842,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":1442,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":752,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":559,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1422,"title":{},"body":{"index.html":{}}}],["exists",{"_index":968,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":793,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":629,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1474,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exportable",{"_index":902,"title":{},"body":{"injectables/ProfileService.html":{}}}],["exports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exposed",{"_index":1428,"title":{},"body":{"index.html":{}}}],["express",{"_index":1484,"title":{},"body":{"index.html":{}}}],["extends",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1577,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderwithscheme('bearer",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":660,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":373,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":1026,"title":{},"body":{"entities/UserEntity.html":{}}}],["false})@isoptional()@isstring",{"_index":424,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring({each",{"_index":367,"title":{},"body":{"classes/ArticleDto.html":{}}}],["fastify",{"_index":1271,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["favorite.id",{"_index":529,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":533,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{}}}],["favoriteids",{"_index":526,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":534,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":512,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["favoritescount",{"_index":380,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["favourite",{"_index":272,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle(currentuserid",{"_index":270,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feat",{"_index":1582,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1515,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1504,"title":{},"body":{"index.html":{}}}],["features",{"_index":1375,"title":{},"body":{"index.html":{}}}],["feed",{"_index":288,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feed.dto",{"_index":318,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["feed.dto.ts",{"_index":421,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["feed.dto.ts:10",{"_index":425,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["feed.dto.ts:17",{"_index":426,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["fetch",{"_index":928,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":802,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["fields",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1553,"title":{},"body":{"index.html":{}}}],["findbyslug",{"_index":446,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":472,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fine",{"_index":965,"title":{},"body":{"injectables/TagService.html":{}}}],["folder",{"_index":1521,"title":{},"body":{"index.html":{}}}],["follow",{"_index":865,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["follow.entity",{"_index":890,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["follow.followingid",{"_index":542,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followentity",{"_index":433,"title":{"entities/FollowEntity.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["follower",{"_index":909,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followerid",{"_index":538,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["following",{"_index":907,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["followingid",{"_index":737,"title":{},"body":{"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["followinguserids",{"_index":540,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followprofile",{"_index":859,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followprofile(currentuserid",{"_index":862,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followrepository",{"_index":452,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["follows",{"_index":536,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{}}}],["follows.length",{"_index":539,"title":{},"body":{"injectables/ArticleService.html":{}}}],["follows.map((follow",{"_index":541,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followtocreate",{"_index":913,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followerid",{"_index":914,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followingid",{"_index":915,"title":{},"body":{"injectables/ProfileService.html":{}}}],["format",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["forroot",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":1347,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":807,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1290,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fully",{"_index":1591,"title":{},"body":{"index.html":{}}}],["function",{"_index":853,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1340,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1576,"title":{},"body":{"index.html":{}}}],["fuse.js",{"_index":1293,"title":{},"body":{"dependencies.html":{}}}],["generate",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1522,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":336,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug')@apiresponse({status",{"_index":275,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug/comments",{"_index":347,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug/comments')@apiresponse({status",{"_index":282,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":879,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":869,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get('feed",{"_index":328,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('feed')@apiresponse({status",{"_index":287,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(id",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarticle",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(@param('slug",{"_index":337,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(slug",{"_index":274,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticles(query",{"_index":277,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getbyusername",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcommentsforarticle",{"_index":230,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsforarticle(@param('slug",{"_index":348,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsforarticle(slug",{"_index":281,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsonarticle",{"_index":447,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getcommentsonarticle(slug",{"_index":476,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getfeed",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getfeed(currentuserid",{"_index":285,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getone",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofile",{"_index":860,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(currentuserid",{"_index":868,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getrootmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getslug",{"_index":448,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":479,"title":{},"body":{"injectables/ArticleService.html":{}}}],["gettags",{"_index":927,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getting",{"_index":1342,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":972,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@request",{"_index":993,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(req",{"_index":978,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemailandpass",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemailandpass(email",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1411,"title":{},"body":{"index.html":{}}}],["github",{"_index":1544,"title":{},"body":{"index.html":{}}}],["given",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":809,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":1019,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":746,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":837,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1511,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1513,"title":{},"body":{"index.html":{}}}],["handle",{"_index":724,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handle(ability",{"_index":725,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handler",{"_index":844,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":854,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":855,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":311,"title":{},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":721,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:18",{"_index":836,"title":{},"body":{"classes/PatchUserPolicyHandler.html":{}}}],["handlers.ts:24",{"_index":735,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:30",{"_index":817,"title":{},"body":{"classes/PatchArticlePolicyHandler.html":{}}}],["handlers.ts:35",{"_index":726,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{}}}],["handlers.ts:8",{"_index":742,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":810,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{}}}],["hashed",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":1353,"title":{},"body":{"index.html":{}}}],["host",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1554,"title":{},"body":{"index.html":{}}}],["http/2",{"_index":1508,"title":{},"body":{"index.html":{}}}],["http2",{"_index":1361,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":1429,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1436,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":1449,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":485,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpexception('article",{"_index":558,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('profile",{"_index":904,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpexception('you",{"_index":562,"title":{},"body":{"injectables/ArticleService.html":{}}}],["https",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":692,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":1412,"title":{},"body":{"index.html":{}}}],["https://gravatar.com/avatar/123",{"_index":835,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["https://typeorm.io",{"_index":1502,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":486,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.bad_request",{"_index":912,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpstatus.forbidden",{"_index":563,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":560,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["iarticleresponsebody",{"_index":300,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iarticlesresponsebody",{"_index":301,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iat",{"_index":792,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":381,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"injectables/JwtStrategy.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":513,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":516,"title":{},"body":{"injectables/ArticleService.html":{}}}],["igenericmessagebody",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignored",{"_index":966,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":833,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":722,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":661,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/TagService.html":{}}}],["inject(winston_module_provider",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["injectable",{"_index":182,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":487,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(articleentity",{"_index":489,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(commententity",{"_index":492,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(followentity",{"_index":491,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(tagentity",{"_index":958,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":490,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":1354,"title":{},"body":{"index.html":{}}}],["interface",{"_index":727,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":741,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":723,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":757,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":719,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isemail",{"_index":799,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isfqdn",{"_index":824,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":213,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isnotfavorited",{"_index":567,"title":{},"body":{"injectables/ArticleService.html":{}}}],["isoptional",{"_index":370,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["ispublic",{"_index":762,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":371,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["it's",{"_index":1461,"title":{},"body":{"index.html":{}}}],["item",{"_index":696,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":697,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["iuser",{"_index":984,"title":{},"body":{"controllers/UserController.html":{}}}],["iuserresponsebody",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["javascript",{"_index":1385,"title":{},"body":{"index.html":{}}}],["joi",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":1040,"title":{},"body":{"entities/UserEntity.html":{}}}],["js",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["json.stringify(article",{"_index":566,"title":{},"body":{"injectables/ArticleService.html":{}}}],["jwt",{"_index":623,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":619,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":743,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":624,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":604,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["keepconnectionalive",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1528,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyout",{"_index":1527,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":671,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1573,"title":{},"body":{"index.html":{}}}],["left",{"_index":1468,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('articles.author",{"_index":502,"title":{},"body":{"injectables/ArticleService.html":{}}}],["legend",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1022,"title":{},"body":{"entities/UserEntity.html":{}}}],["level",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":1500,"title":{},"body":{"index.html":{}}}],["license",{"_index":1596,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1599,"title":{},"body":{"index.html":{}}}],["limit",{"_index":422,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"dependencies.html":{}}}],["loads",{"_index":1444,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1399,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1383,"title":{},"body":{"index.html":{}}}],["localstorage",{"_index":1309,"title":{},"body":{"dependencies.html":{}}}],["located",{"_index":1519,"title":{},"body":{"index.html":{}}}],["location",{"_index":1568,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":1297,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["logger(articleservice.name",{"_index":484,"title":{},"body":{"injectables/ArticleService.html":{}}}],["logging",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":801,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(payload",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["logindto",{"_index":795,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logs",{"_index":1364,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["lower",{"_index":494,"title":{},"body":{"injectables/ArticleService.html":{}}}],["luckily",{"_index":1509,"title":{},"body":{"index.html":{}}}],["made",{"_index":1368,"title":{},"body":{"index.html":{}}}],["main",{"_index":1581,"title":{},"body":{"index.html":{}}}],["make",{"_index":1380,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1514,"title":{},"body":{"index.html":{}}}],["manage",{"_index":668,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":1408,"title":{},"body":{"index.html":{}}}],["many",{"_index":1036,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["manytomany",{"_index":1041,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":1014,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytoone",{"_index":414,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":383,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1570,"title":{},"body":{"index.html":{}}}],["marked",{"_index":1300,"title":{},"body":{"dependencies.html":{}}}],["matches",{"_index":825,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["matches(/^(?=[a",{"_index":827,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":496,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":495,"title":{},"body":{"injectables/ArticleService.html":{}}}],["matter",{"_index":1291,"title":{},"body":{"dependencies.html":{}}}],["maxfiles",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlength",{"_index":826,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxlength(255",{"_index":832,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxsize",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["mediumtext",{"_index":389,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metismenu/angular",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["minlength",{"_index":800,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["minlength(8",{"_index":803,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["mins",{"_index":1464,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1339,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1598,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":1425,"title":{},"body":{"index.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["modulemocker",{"_index":1194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1302,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":1494,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1506,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":1495,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":976,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":1391,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1489,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1304,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":199,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1470,"title":{},"body":{"index.html":{}}}],["nest",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":755,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1525,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":1452,"title":{},"body":{"index.html":{}}}],["ngneat/transloco",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["ngrx",{"_index":1307,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["ngx",{"_index":1311,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":1346,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1532,"title":{},"body":{"index.html":{}}}],["non",{"_index":1378,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1415,"title":{},"body":{"index.html":{}}}],["null",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nullable",{"_index":386,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["number",{"_index":255,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":1366,"title":{},"body":{"index.html":{}}}],["nx/angular",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(article",{"_index":544,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["object.assign(comment",{"_index":577,"title":{},"body":{"injectables/ArticleService.html":{}}}],["object.keys(payload).foreach((key",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":1480,"title":{},"body":{"index.html":{}}}],["offset",{"_index":423,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["ondelete",{"_index":1061,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":1035,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":415,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":392,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["open",{"_index":1558,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":1219,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1523,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":1403,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1479,"title":{},"body":{"index.html":{}}}],["optional",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":1456,"title":{},"body":{"index.html":{}}}],["os",{"_index":1594,"title":{},"body":{"index.html":{}}}],["out",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":1406,"title":{},"body":{"index.html":{}}}],["over",{"_index":1483,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1602,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1235,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1545,"title":{},"body":{"index.html":{}}}],["panel",{"_index":1396,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":355,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('slug",{"_index":342,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":880,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["particular",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1593,"title":{},"body":{"index.html":{}}}],["passport",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":621,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":1043,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwords",{"_index":1029,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwordtransformer",{"_index":804,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["patch",{"_index":821,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["patcharticlepolicyhandler",{"_index":308,"title":{"classes/PatchArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patcharticlepolicyhandler())@apiresponse({status",{"_index":293,"title":{},"body":{"controllers/ArticleController.html":{}}}],["patchuserdto",{"_index":818,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["patchuserpolicyhandler",{"_index":309,"title":{"classes/PatchUserPolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["patchuserpolicyhandler())@apiresponse({status",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["path",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.article",{"_index":334,"title":{},"body":{"controllers/ArticleController.html":{}}}],["payload.user",{"_index":997,"title":{},"body":{"controllers/UserController.html":{}}}],["payload[key",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["perfect",{"_index":1318,"title":{},"body":{"dependencies.html":{}}}],["perform",{"_index":1478,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1481,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":688,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["permit",{"_index":1058,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":1376,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":1423,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1512,"title":{},"body":{"index.html":{}}}],["plaintoclass(userentity",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":304,"title":{},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":305,"title":{"guards/PoliciesGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":731,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":730,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":729,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":847,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":851,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":1433,"title":{},"body":{"index.html":{}}}],["post",{"_index":296,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["post(':slug/comments",{"_index":350,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/comments')@useguards(policiesguard)@checkpolicies(new",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite",{"_index":357,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":271,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':username/follow",{"_index":883,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":864,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('login",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apiresponse({status",{"_index":249,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":1493,"title":{},"body":{"index.html":{}}}],["postman",{"_index":1541,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":1356,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":404,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["prismjs",{"_index":1321,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":195,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":1405,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1550,"title":{},"body":{"index.html":{}}}],["production",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":866,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{}}}],["profile.controller",{"_index":891,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.email",{"_index":918,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.service",{"_index":876,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/follow.entity",{"_index":434,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["profile/profile.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":856,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":69,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":858,"title":{},"body":{"controllers/ProfileController.html":{},"entities/UserRoles.html":{}}}],["profileservice",{"_index":875,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileusername",{"_index":863,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["progress",{"_index":1579,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1345,"title":{},"body":{"index.html":{}}}],["project",{"_index":1439,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":552,"title":{},"body":{"injectables/ArticleService.html":{}}}],["properties",{"_index":207,"title":{"properties.html":{}},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":1370,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1117,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":1565,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":1454,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1589,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get()@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@post()@apiresponse({status",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["public.decorator",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":297,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":339,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":292,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put()@apiresponse({status",{"_index":974,"title":{},"body":{"controllers/UserController.html":{}}}],["queried",{"_index":985,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":280,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":506,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.dto",{"_index":320,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.dto.ts",{"_index":594,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":599,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:17",{"_index":595,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:24",{"_index":596,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:31",{"_index":597,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:38",{"_index":598,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.favorited",{"_index":510,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.limit",{"_index":522,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.offset",{"_index":524,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":503,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":499,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1=0",{"_index":517,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":508,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":504,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":521,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":530,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.limit(query.limit",{"_index":523,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.offset(query.offset",{"_index":525,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.orderby('articles.createdat",{"_index":518,"title":{},"body":{"injectables/ArticleService.html":{}}}],["quickly",{"_index":1369,"title":{},"body":{"index.html":{}}}],["quill",{"_index":1314,"title":{},"body":{"dependencies.html":{}}}],["r",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1533,"title":{},"body":{"index.html":{}}}],["random",{"_index":1459,"title":{},"body":{"index.html":{}}}],["react",{"_index":1431,"title":{},"body":{"index.html":{}}}],["read",{"_index":682,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1585,"title":{},"body":{"index.html":{}}}],["realworld",{"_index":1344,"title":{},"body":{"index.html":{}}}],["received",{"_index":934,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":929,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["recordkey",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":1188,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":923,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["register(payload",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerdto",{"_index":919,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["registered",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpayload",{"_index":994,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["relational",{"_index":1569,"title":{},"body":{"index.html":{}}}],["relations",{"_index":511,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":1037,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1592,"title":{},"body":{"index.html":{}}}],["remark",{"_index":669,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":1421,"title":{},"body":{"index.html":{}}}],["repo",{"_index":1365,"title":{},"body":{"index.html":{}}}],["repository",{"_index":450,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":1034,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":672,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":983,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":676,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UserController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user[recordkey",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":372,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"index.html":{}}}],["reset",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":1424,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1413,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1563,"title":{},"body":{"index.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":980,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":1453,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1505,"title":{},"body":{"index.html":{}}}],["role",{"_index":679,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":1053,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":1054,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":1056,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":1063,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":1032,"title":{},"body":{"entities/UserEntity.html":{}}}],["roles",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":252,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["rsa:4096",{"_index":1526,"title":{},"body":{"index.html":{}}}],["run",{"_index":1427,"title":{},"body":{"index.html":{}}}],["running",{"_index":1536,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":1386,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1327,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1471,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1608,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":1350,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":687,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["scrollbar",{"_index":1319,"title":{},"body":{"dependencies.html":{}}}],["seconds",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":625,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":1025,"title":{},"body":{"entities/UserEntity.html":{}}}],["self",{"_index":1516,"title":{},"body":{"index.html":{}}}],["served",{"_index":1441,"title":{},"body":{"index.html":{}}}],["server",{"_index":1255,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["servestaticmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('email",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1351,"title":{},"body":{"index.html":{}}}],["signed",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":627,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":260,"title":{},"body":{"controllers/ArticleController.html":{}}}],["sits",{"_index":1473,"title":{},"body":{"index.html":{}}}],["slider",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["slider/ngx",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["slug",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["slugify",{"_index":488,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":493,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1535,"title":{},"body":{"index.html":{}}}],["special",{"_index":670,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1560,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1492,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1501,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1393,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":1401,"title":{},"body":{"index.html":{}}}],["start",{"_index":1398,"title":{},"body":{"index.html":{}}}],["started",{"_index":1343,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":1597,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["statements",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1486,"title":{},"body":{"index.html":{}}}],["store",{"_index":1308,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":673,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":667,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":761,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":766,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1588,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1503,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1491,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1381,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1600,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1559,"title":{},"body":{"index.html":{}}}],["swiper",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":1234,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":505,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tag.controller",{"_index":946,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":957,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.dto.ts",{"_index":716,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:8",{"_index":718,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":947,"title":{},"body":{"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["tag.name",{"_index":937,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tag.service",{"_index":931,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.entity",{"_index":436,"title":{},"body":{"modules/ArticleModule.html":{}}}],["tag/tag.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":437,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["tagcontroller",{"_index":925,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":435,"title":{"entities/TagEntity.html":{}},"body":{"modules/ArticleModule.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":362,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["tagmodule",{"_index":70,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":953,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":550,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":936,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":430,"title":{"injectables/TagService.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1583,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1437,"title":{},"body":{"index.html":{}}}],["test",{"_index":1540,"title":{},"body":{"index.html":{}}}],["test:postman",{"_index":1543,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":1362,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1538,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1507,"title":{},"body":{"index.html":{}}}],["this.appservice.getrootmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":500,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.delete",{"_index":564,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":535,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":553,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":358,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticlecommentresponse(comment",{"_index":353,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":335,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":333,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createcommentonarticle",{"_index":351,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticle(slug",{"_index":346,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":360,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletecommentfromarticle",{"_index":356,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":338,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticles(query",{"_index":327,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getcommentsonarticle(slug",{"_index":349,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getfeed(currentuserid",{"_index":330,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":343,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.authservice.createtoken(user",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.caslfactory.createforuser(user.user",{"_index":850,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.commentrepository.delete",{"_index":590,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.commentrepository.save(comment",{"_index":579,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":852,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyslug(slug",{"_index":556,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.delete",{"_index":917,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.find",{"_index":537,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.findone",{"_index":905,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.save(followtocreate",{"_index":916,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.get(userid",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(payload.username",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getslug(payload.title",{"_index":547,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.getuserbyemailandpass(email",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`tag",{"_index":967,"title":{},"body":{"injectables/TagService.html":{}}}],["this.logger.info('calling",{"_index":196,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log('article",{"_index":565,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.profileservice.buildprofileresponse(profile",{"_index":882,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.followprofile",{"_index":884,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":881,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowprofile",{"_index":886,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.reflector.get",{"_index":848,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":763,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tagrepository.find",{"_index":959,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(article",{"_index":961,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.createtag",{"_index":555,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagservice.gettags",{"_index":935,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":419,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["this.userrepository",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":507,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":575,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload.user",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(username",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(userid",{"_index":996,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validateuser(payload.user",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":557,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":794,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timestamp",{"_index":396,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["title",{"_index":363,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["to(value",{"_index":811,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["todo",{"_index":901,"title":{},"body":{"injectables/ProfileService.html":{}}}],["token",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tokens",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["transform",{"_index":813,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":212,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["transports",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1397,"title":{},"body":{"index.html":{}}}],["true",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":960,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":1332,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1610,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":1363,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1549,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1555,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":416,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":440,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":948,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":620,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1548,"title":{},"body":{"index.html":{}}}],["ui",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":1024,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["unfavourite",{"_index":264,"title":{},"body":{"controllers/ArticleController.html":{}}}],["unfollow",{"_index":873,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowprofile",{"_index":861,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowprofile(currentuserid",{"_index":871,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unique",{"_index":942,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1537,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1447,"title":{},"body":{"index.html":{}}}],["updatearticle",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":290,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":481,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":291,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticledto.article",{"_index":344,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatedat",{"_index":382,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["updatetimestamp",{"_index":418,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["url",{"_index":1020,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":903,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["useclass",{"_index":1118,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1561,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":298,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":340,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.articles",{"_index":384,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.bio",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.comments",{"_index":705,"title":{},"body":{"entities/CommentEntity.html":{}}}],["user.comments.findindex",{"_index":585,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.comments.splice(usercommentindex",{"_index":589,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.controller",{"_index":1115,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.decorator",{"_index":988,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":987,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":820,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":1001,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:28",{"_index":1008,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:36",{"_index":999,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:45",{"_index":1003,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:53",{"_index":1005,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:63",{"_index":823,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.email",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":989,"title":{},"body":{"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.favorites.findindex",{"_index":568,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":573,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":592,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.id",{"_index":690,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["user.image",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.roles",{"_index":1060,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":678,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{}}}],["user[key",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":663,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["usercomment",{"_index":586,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercomment.id",{"_index":587,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercommentindex",{"_index":584,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercontroller",{"_index":969,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdto",{"_index":822,"title":{"classes/UserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":234,"title":{"entities/UserEntity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":457,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["userlogindto",{"_index":797,"title":{"classes/UserLoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userparam",{"_index":312,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userparam('id",{"_index":329,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["userparam('token",{"_index":995,"title":{},"body":{"controllers/UserController.html":{}}}],["userregistrationdto",{"_index":921,"title":{"classes/UserRegistrationDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":451,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":614,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":664,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":680,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1116,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":990,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.decorator",{"_index":313,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["users/user.entity",{"_index":314,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["users/users.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":617,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":1064,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":71,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":605,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1426,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1457,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":1017,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(request",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":214,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["validates",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(undefined",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["validation",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":215,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["value",{"_index":483,"title":{},"body":{"injectables/ArticleService.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":816,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":806,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":1193,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1614,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1606,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":1387,"title":{},"body":{"index.html":{}}}],["view",{"_index":1575,"title":{},"body":{"index.html":{}}}],["vue",{"_index":1432,"title":{},"body":{"index.html":{}}}],["web",{"_index":1360,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["where('articles.authorid",{"_index":543,"title":{},"body":{"injectables/ArticleService.html":{}}}],["where('users.email",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":1438,"title":{},"body":{"index.html":{}}}],["winston",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["winstonfilerotator",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":1409,"title":{},"body":{"index.html":{}}}],["work",{"_index":1567,"title":{},"body":{"index.html":{}}}],["world",{"_index":1586,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1499,"title":{},"body":{"index.html":{}}}],["write",{"_index":683,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":1031,"title":{},"body":{"entities/UserEntity.html":{}}}],["x509",{"_index":1524,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":1394,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1416,"title":{},"body":{"index.html":{}}}],["yes",{"_index":475,"title":{},"body":{"injectables/ArticleService.html":{}}}],["yyyy",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":829,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["za",{"_index":828,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["zippedarchive",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":1337,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getRootMessage(): Promise {\n    return this.appService.getRootMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArticleModule } from './article/article.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { TagModule } from './tag/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule.forRoot(),\n    UsersModule,\n    CaslModule,\n    TagModule,\n    ArticleModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \ngetRootMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  getRootMessage(): IMessage {\n    this.logger.info('Calling getRootMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleCommentDto.html":{"url":"classes/ArticleCommentDto.html","title":"class - ArticleCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                body\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, ValidateNested } from 'class-validator';\n\nexport class ArticleCommentDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n}\n\nexport class CreateArticleCommentDto {\n  @ApiProperty()\n  @Type(() => ArticleCommentDto)\n  @ValidateNested()\n  comment: ArticleCommentDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                commentOnArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteCommentFromArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                favouriteArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getArticles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getCommentsForArticle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getFeed\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        commentOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentOnArticle(user: UserEntity, slug: string, createArticleCommentDto: CreateArticleCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/comments')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Commenting on Article Request Completed'})@ApiResponse({status: 400, description: 'Commenting on Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createArticleCommentDto\n                                    \n                                                CreateArticleCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: 201, description: 'Create Articles Request Completed'})@ApiResponse({status: 400, description: 'Create Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:78\n                \n            \n\n\n            \n                \n                    Route to create an article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    payload\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteArticlePolicyHandler())@ApiResponse({status: 201, description: 'Delete Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:140\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfavourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Unfavourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        deleteCommentFromArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentFromArticle(currentUserId: number, commentId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/comments/:id')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Delete Comment from Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Comment from Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        favouriteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    favouriteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Favourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Favourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        getArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiResponse({status: 200, description: 'Get Article Request Completed'})@ApiResponse({status: 400, description: 'Get Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:100\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 201, description: 'Get Articles Request Completed'})@ApiResponse({status: 400, description: 'Get Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        getCommentsForArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsForArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug/comments')@ApiResponse({status: 200, description: 'Get Article Comments Request Completed'})@ApiResponse({status: 400, description: 'Get Article Comments Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')@ApiResponse({status: 201, description: 'Get Article Feed Request Completed'})@ApiResponse({status: 400, description: 'Get Article Feed Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchArticlePolicyHandler())@ApiResponse({status: 201, description: 'Edit Article Request Completed'})@ApiResponse({status: 400, description: 'Edit Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport {\n  DeleteArticlePolicyHandler,\n  PatchArticlePolicyHandler,\n  PatchUserPolicyHandler,\n} from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleService } from './article.service';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { CreateArticleCommentDto } from './dto/create-article-comment.dto';\nimport { CreateArticleDto } from './dto/create-article.dto';\n\n@ApiBearerAuth()\n@ApiTags('articles')\n@Controller('articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 201, description: 'Get Articles Request Completed' })\n  @ApiResponse({ status: 400, description: 'Get Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticles(\n    @Query()\n    query: ArticlesQueryParams,\n  ): Promise {\n    return await this.articleService.getArticles(query);\n  }\n\n  @Get('feed')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Feed Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Feed Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getFeed(\n    @UserParam('id') currentUserId: number,\n    @Query() query: ArticleFeedQueryParams,\n  ) {\n    return await this.articleService.getFeed(currentUserId, query);\n  }\n\n  /**\n   * Route to create an article\n   * @param {ArticleDto} payload the article dto\n   */\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Create Articles Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Create Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async createArticle(\n    @UserParam() user: UserEntity,\n    @Body() payload: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      user,\n      payload.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Get(':slug')\n  @ApiResponse({\n    status: 200,\n    description: 'Get Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticle(@Param('slug') slug: string): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Put(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Edit Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Edit Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body() updateArticleDto: CreateArticleDto,\n  ) {\n    const article = await this.articleService.updateArticle(\n      slug,\n      currentUserId,\n      updateArticleDto.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Delete(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Delete Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteArticle(slug, currentUserId);\n  }\n\n  @Get(':slug/comments')\n  @ApiResponse({\n    status: 200,\n    description: 'Get Article Comments Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Comments Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getCommentsForArticle(@Param('slug') slug: string) {\n    return await this.articleService.getCommentsOnArticle(slug);\n  }\n\n  @Post(':slug/comments')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Commenting on Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Commenting on Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async commentOnArticle(\n    @UserParam() user: UserEntity,\n    @Param('slug') slug: string,\n    @Body() createArticleCommentDto: CreateArticleCommentDto,\n  ) {\n    const comment = await this.articleService.createCommentOnArticle(\n      slug,\n      user,\n      createArticleCommentDto.comment,\n    );\n    return this.articleService.buildArticleCommentResponse(comment);\n  }\n\n  @Delete(':slug/comments/:id')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Comment from Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Delete Comment from Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteCommentFromArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('id') commentId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteCommentFromArticle(\n      slug,\n      commentId,\n      currentUserId,\n    );\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Favourite an Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Favourite an Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async favouriteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfavourite an Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfavourite an Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticleFromFavorites(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                tagList\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsString, ValidateNested } from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  description: string;\n\n  @ApiProperty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty()\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                favoritesCount\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                tagList\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'mediumtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.article, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Default description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { CommentEntity } from './comment.entity';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: 'Default description' })\n  description: string;\n\n  @Column({ type: 'mediumtext' })\n  body: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEntity, (user) => user.articles, {\n    eager: true,\n    nullable: false,\n  })\n  author: UserEntity;\n\n  @OneToMany(() => CommentEntity, (comment) => comment.article, { eager: true })\n  comments: CommentEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleFeedQueryParams.html":{"url":"classes/ArticleFeedQueryParams.html","title":"class - ArticleFeedQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleFeedQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/article-feed.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticleFeedQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                        \n                            CaslFactory\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagEntity } from '../tag/tag.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleController } from './article.controller';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleService } from './article.service';\nimport { CommentEntity } from './comment.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ArticleEntity,\n      UserEntity,\n      TagEntity,\n      FollowEntity,\n      CommentEntity,\n    ]),\n  ],\n  controllers: [ArticleController],\n  providers: [ArticleService, CaslFactory, TagService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleCommentResponse\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                createCommentOnArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                deleteCommentFromArticle\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getCommentsOnArticle\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, followRepository: Repository, commentRepository: Repository, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/article/article.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleCommentResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleCommentResponse(comment: CommentEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:317\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CommentEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { comment: CommentEntity; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IArticleResponseBody\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCommentOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCommentOnArticle(slug: string, user: UserEntity, payload: ArticleCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCommentFromArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentFromArticle(slug: string, commentId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:254\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommentsOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsOnArticle(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, currentUserId: number, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ArticleService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport slugify from 'slugify';\nimport { Repository } from 'typeorm';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\nimport { CommentEntity } from './comment.entity';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { ArticleCommentDto } from './dto/create-article-comment.dto';\nimport { ArticleDto } from './dto/create-article.dto';\n\n@Injectable()\nexport class ArticleService {\n  private readonly logger = new Logger(ArticleService.name);\n\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n    @InjectRepository(CommentEntity)\n    private readonly commentRepository: Repository,\n    private readonly tagService: TagService,\n  ) {}\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n\n  async getArticles(\n    query: ArticlesQueryParams,\n    userId?: number,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author');\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      if (author) {\n        queryBuilder.andWhere('articles.authorId = :id', {\n          id: author.id,\n        });\n      }\n    }\n\n    if (query.favorited) {\n      const author = await this.userRepository.findOne({\n        where: {\n          username: query.favorited,\n        },\n        relations: ['favorites'],\n      });\n      const ids = author.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.authorId IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1=0');\n      }\n    }\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    let favoriteIds: number[] = [];\n\n    if (userId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: userId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articles = await queryBuilder.getMany();\n    const articlesWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articlesWithFavorited, articlesCount };\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({ where: { slug } });\n  }\n\n  async getFeed(currentUserId: number, query: ArticleFeedQueryParams) {\n    const follows = await this.followRepository.find({\n      where: { followerId: currentUserId },\n    });\n\n    if (follows.length === 0) {\n      return { articles: [], articlesCount: 0 };\n    }\n\n    const followingUserIds = follows.map((follow) => follow.followingId);\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author')\n      .where('articles.authorId IN (:...ids)', { ids: followingUserIds });\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    const articles = await queryBuilder.getMany();\n\n    return { articles, articlesCount };\n  }\n\n  async createArticle(\n    user: UserEntity,\n    payload: ArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, payload);\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n    article.slug = this.getSlug(payload.title);\n    article.author = user;\n\n    // Creating tags from tagList\n    const [createdArticle] = await Promise.all([\n      this.articleRepository.save(article),\n      ...article.tagList.map((name) => this.tagService.createTag({ name })),\n    ]);\n    return createdArticle;\n  }\n\n  async updateArticle(\n    slug: string,\n    currentUserId: number,\n    payload: ArticleDto,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, payload);\n\n    return await this.articleRepository.save(article);\n  }\n\n  async deleteArticle(slug: string, currentUserId: number) {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    return await this.articleRepository.delete({ slug });\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    this.logger.log('ARTICLE ' + JSON.stringify(article));\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async getCommentsOnArticle(slug: string): Promise {\n    const article = await this.findBySlug(slug);\n    return article.comments;\n  }\n\n  async createCommentOnArticle(\n    slug: string,\n    user: UserEntity,\n    payload: ArticleCommentDto,\n  ) {\n    const article = await this.findBySlug(slug);\n\n    const comment = new CommentEntity();\n    Object.assign(comment, payload);\n    comment.author = user;\n    comment.article = article;\n\n    return await this.commentRepository.save(comment);\n  }\n\n  async deleteCommentFromArticle(\n    slug: string,\n    commentId: number,\n    userId: number,\n  ) {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['comments'],\n    });\n\n    const articleCommentIndex = article.comments.findIndex(\n      (articleComment) => articleComment.id === commentId,\n    );\n    const userCommentIndex = user.comments.findIndex(\n      (userComment) => userComment.id === commentId,\n    );\n\n    if (articleCommentIndex > -1) {\n      article.comments.splice(articleCommentIndex, 1);\n      await this.articleRepository.save(article);\n    }\n\n    if (userCommentIndex > -1) {\n      user.comments.splice(userCommentIndex, 1);\n      await this.userRepository.save(user);\n    }\n\n    return await this.commentRepository.delete({ id: commentId });\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex > -1) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    } else {\n      throw new HttpException(\n        'Article is not in favorites',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return article;\n  }\n\n  buildArticleResponse(article: ArticleEntity): IArticleResponseBody {\n    return { article };\n  }\n\n  buildArticleCommentResponse(comment: CommentEntity) {\n    delete comment.article;\n    return { comment };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesQueryParams.html":{"url":"classes/ArticlesQueryParams.html","title":"class - ArticlesQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/articles-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                favorited\n                            \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticlesQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  tag: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  author: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  favorited: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { module: typeof AuthModule; providers: {}; }\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\nconst providers = [AuthService, JwtStrategy];\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [...providers, UsersService],\n  controllers: [],\n  exports: providers,\n})\nexport class AuthModule {\n  static forRoot() {\n    return {\n      module: AuthModule,\n      providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserEntity } from '../users/user.entity';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {UserEntity} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  createToken({ id, username, roles, email }: UserEntity): string {\n    return this.jwtService.sign({\n      id,\n      username,\n      roles,\n      email,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: UserEntity) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    // User scoped permissions\n    can(UserActionsEnum.Update, UserEntity, { id: user.id });\n    can(UserActionsEnum.Update, ArticleEntity, { author: user });\n    can(UserActionsEnum.Delete, ArticleEntity, { author: user });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CommentEntity.html":{"url":"entities/CommentEntity.html","title":"entity - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                article\n                            \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.comments, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\n\n@Entity({ name: 'comments' })\nexport class CommentEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  body: string;\n\n  @ManyToOne(() => ArticleEntity, (article) => article.comments, {\n    nullable: false,\n  })\n  article: ArticleEntity;\n\n  @ManyToOne(() => UserEntity, (user) => user.comments, { nullable: false })\n  author: UserEntity;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleCommentDto.html":{"url":"classes/CreateArticleCommentDto.html","title":"class - CreateArticleCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleCommentDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article-comment.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, ValidateNested } from 'class-validator';\n\nexport class ArticleCommentDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n}\n\nexport class CreateArticleCommentDto {\n  @ApiProperty()\n  @Type(() => ArticleCommentDto)\n  @ValidateNested()\n  comment: ArticleCommentDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                article\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsString, ValidateNested } from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  description: string;\n\n  @ApiProperty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty()\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/dto/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlpha, IsNotEmpty } from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlpha()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteArticlePolicyHandler.html":{"url":"classes/DeleteArticlePolicyHandler.html","title":"class - DeleteArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowEntity.html":{"url":"entities/FollowEntity.html","title":"entity - FollowEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                followerId\n                            \n                            \n                                    \n                                followingId\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followingId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'follows' })\nexport class FollowEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  followerId: number;\n\n  @Column()\n  followingId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, jwtPayload: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    jwtPayload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        validation method for jwt token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {UsersService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('Bearer'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate(request: Request, jwtPayload: Record) {\n    const { iat, exp, id } = jwtPayload;\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserLoginDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchArticlePolicyHandler.html":{"url":"classes/PatchArticlePolicyHandler.html","title":"class - PatchArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsFQDN,\n  IsOptional,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsOptional()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  @IsOptional()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @MaxLength(255)\n  @IsOptional()\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsFQDN()\n  @IsOptional()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @MinLength(8)\n  @IsOptional()\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPolicyHandler.html":{"url":"classes/PatchUserPolicyHandler.html","title":"class - PatchUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user.user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                followProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 200, description: 'Follow Profile Request Completed'})@ApiResponse({status: 400, description: 'Follow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 201, description: 'Get Profile by Username Request Completed'})@ApiResponse({status: 400, description: 'Get Profile by Username Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 200, description: 'Unfollow Profile Request Completed'})@ApiResponse({status: 400, description: 'Unfollow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { PatchUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { ProfileService } from './profile.service';\n\n@ApiBearerAuth()\n@ApiTags('profiles')\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Get(':username')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Profile by Username Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Get Profile by Username Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.getProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Post(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 200,\n    description: 'Follow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Follow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async followProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.followProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Delete(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 200,\n    description: 'Unfollow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfollow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async unfollowProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.unfollowProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, FollowEntity])],\n  controllers: [ProfileController],\n  providers: [ProfileService, CaslFactory],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildProfileResponse\n                            \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildProfileResponse\n                        \n                    \n                \n            \n            \n                \nbuildProfileResponse(profile)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { profile: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\n\n// TODO: type everything (exportable in api-types for UI to use)\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async getProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: {\n        followerId: currentUserId,\n        followingId: user.id,\n      },\n    });\n    console.log('follow', follow, currentUserId, user.id);\n\n    return { ...user, following: Boolean(follow) };\n  }\n\n  async followProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    if (!follow) {\n      const followToCreate = new FollowEntity();\n      followToCreate.followerId = currentUserId;\n      followToCreate.followingId = user.id;\n      await this.followRepository.save(followToCreate);\n    }\n\n    return { ...user, following: true };\n  }\n\n  async unfollowProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    await this.followRepository.delete({\n      followerId: currentUserId,\n      followingId: user.id,\n    });\n\n    return { ...user, following: false };\n  }\n\n  buildProfileResponse(profile: UserEntity & { following: boolean }) {\n    delete profile.email;\n    return { profile };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRegistrationDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @Matches(/^(?=[a-zA-Z0-9._]{4,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Fetch Tags Request Received'})@ApiResponse({status: 400, description: 'Fetch Tags Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/tag/tag.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { Public } from '../auth/public.decorator';\nimport { TagService } from './tag.service';\n\n@ApiBearerAuth()\n@ApiTags('tags')\n@Controller('tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Fetch Tags Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Tags Request Failed' })\n  async getTags() {\n    const tags = await this.tagService.getTags();\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Tag Entity Class\n */\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TagController } from './tag.controller';\nimport { TagEntity } from './tag.entity';\nimport { TagService } from './tag.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/tag/tag.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(tag: CreateTagDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                CreateTagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Repository } from 'typeorm';\nimport { Logger } from 'winston';\n\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { TagEntity } from './tag.entity';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  async getTags(): Promise {\n    return await this.tagRepository.find();\n  }\n\n  async createTag(tag: CreateTagDto): Promise {\n    try {\n      const article = new TagEntity();\n      Object.assign(article, tag);\n      return await this.tagRepository.save(article);\n    } catch (error) {\n      // Error case is likely a duplicate tag which is fine to be ignored\n      this.logger.debug(`Tag ${tag.name} exists, so not creating duplicate`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                editUser\n                            \n                            \n                                    \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, token: string, payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponse({status: 200, description: 'Put User Request Received'})@ApiResponse({status: 400, description: 'Put User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:21\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IUser\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Request } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IUser } from '@starter/api-types';\n\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserParam } from './user.decorator';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly usersService: UsersService) {}\n  /**\n   * Retrieves current authenticated user\n   * @returns {IUser} queried user data\n   */\n  @Get()\n  getUser(@Request() req): IUser {\n    return req.user as IUser;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Put()\n  @ApiResponse({ status: 200, description: 'Put User Request Received' })\n  @ApiResponse({ status: 400, description: 'Put User Request Failed' })\n  async editUser(\n    @UserParam('id') userId: number,\n    @UserParam('token') token: string,\n    @Body() payload: PatchUserDto,\n  ): Promise {\n    return {\n      user: { ...(await this.usersService.edit(userId, payload.user)), token },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                bio\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(255)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    Bio field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    Image field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsFQDN,\n  IsOptional,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsOptional()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  @IsOptional()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @MaxLength(255)\n  @IsOptional()\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsFQDN()\n  @IsOptional()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @MinLength(8)\n  @IsOptional()\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                articles\n                            \n                            \n                                    \n                                bio\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                favorites\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:45\n                        \n                    \n\n            \n                \n                    Bio column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:27\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:51\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:57\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { CommentEntity } from '../article/comment.entity';\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Bio column\n   */\n  @Column({ default: '' })\n  bio: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  image: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @OneToMany(() => CommentEntity, (comment) => comment.author)\n  comments: CommentEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:28\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRegistrationDto.html":{"url":"classes/UserRegistrationDto.html","title":"class - UserRegistrationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRegistrationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:21\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:37\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Matches(/^(?=[a-zA-Z0-9._]{4,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:29\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @Matches(/^(?=[a-zA-Z0-9._]{4,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { UserEntity } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => UserEntity, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:123\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:101\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:78\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody, IUserResponseBody } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param usersService\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Registration Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(\n    @Body() payload: RegisterDto,\n  ): Promise> {\n    const user = await this.usersService.create(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() payload: LoginDto,\n  ): Promise> {\n    const user = await this.usersService.validateUser(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { UserController } from './user.controller';\nimport { UserEntity } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRoles]), AuthModule],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController, UserController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getUserByEmailAndPass\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: UserRegistrationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                UserRegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:147\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(userId: number, payload: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:109\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailAndPass\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailAndPass(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: UserLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { LoginDto, UserLoginDto } from '../auth/dto/login.dto';\nimport { UserRegistrationDto } from '../auth/dto/register.dto';\nimport { UserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { UserEntity } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getUserByEmailAndPass(email: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.email = :email and users.password = :password')\n      .setParameter('email', email)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {UserRegistrationDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: UserRegistrationDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        image: url(payload.email, {\n          protocol: 'https',\n          s: '200',\n          r: 'pg',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {Partial} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(userId: number, payload: Partial): Promise {\n    const user = await this.get(userId);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ email, password }: UserLoginDto): Promise {\n    const user = await this.getUserByEmailAndPass(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                25 %\n                (3/12)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                apps/api/src/article/comment.entity.ts\n            \n            entity\n            CommentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/article-feed.dto.ts\n            \n            class\n            ArticleFeedQueryParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/articles-query.dto.ts\n            \n            class\n            ArticlesQueryParams\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article-comment.dto.ts\n            \n            class\n            ArticleCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article-comment.dto.ts\n            \n            class\n            CreateArticleCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            ArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            UserLoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            UserRegistrationDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/follow.entity.ts\n            \n            entity\n            FollowEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            UserDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.decorator.ts\n            \n            variable\n            UserParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @analogjs/content : 0.2.0-beta.19\n        \n            @analogjs/router : 0.2.0-beta.19\n        \n            @angular-slider/ngx-slider : ^2.0.4\n        \n            @angular/animations : 16.1.3\n        \n            @angular/cdk : 16.1.3\n        \n            @angular/common : 16.1.3\n        \n            @angular/compiler : 16.1.3\n        \n            @angular/core : 16.1.3\n        \n            @angular/forms : 16.1.3\n        \n            @angular/material : 16.1.3\n        \n            @angular/platform-browser : 16.1.3\n        \n            @angular/platform-browser-dynamic : 16.1.3\n        \n            @angular/platform-server : ~16.1.0\n        \n            @angular/router : 16.1.3\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @metismenu/angular : ^0.0.2\n        \n            @nestjs/common : 10.0.4\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : 10.0.4\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : 7.0.12\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @ngneat/transloco : ^4.1.1\n        \n            @ngrx/effects : ^16.0.1\n        \n            @ngrx/store : ^16.0.1\n        \n            @ngrx/store-devtools : ^16.0.1\n        \n            @nx/angular : 16.4.0\n        \n            bootstrap : ^5.3.0\n        \n            chroma-js : ^2.4.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            front-matter : ^4.0.2\n        \n            fuse.js : ^6.6.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            lodash : ^4.17.21\n        \n            lodash-es : ^4.17.21\n        \n            marked : ^5.0.2\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            ngrx-store-localstorage : ^16.0.0\n        \n            ngx-clipboard : ^15.1.0\n        \n            ngx-quill : ^22.0.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            perfect-scrollbar : ^1.5.5\n        \n            prismjs : ^1.29.0\n        \n            quill : ^1.3.7\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : 7.8.1\n        \n            slugify : ^1.6.5\n        \n            swiper : ^8.4.5\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : 0.13.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRealworld App\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\n\n# test api against postman collection\n$ docker exec -it nest-rest-typeorm-api npm run test:postman\nNon-Docker\n# execute test\n$ npm run test\n\n# test api against postman collection\n$ npm run test:postman\n\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            providers   (apps/.../auth.module.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            UserParam   (apps/.../user.decorator.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthService, JwtStrategy]\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserEntity, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserParam\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (recordKey: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    if (!request.user) {\n      null;\n    }\n\n    if (recordKey) {\n      return request.user.user[recordKey as keyof typeof request.user.user];\n    }\n\n    return request.user.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
