var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.465,1,2.427]],["body/controllers/AppController.html",[0,2.555,1,3.565,2,1.636,3,0.252,4,0.252,5,0.167,6,3.383,7,1.407,8,4.407,9,0.314,10,1.209,11,2.405,12,6.197,13,1.155,14,0.022,15,3.967,16,3.262,17,6.197,18,3.575,19,2.997,20,3.262,21,3.262,22,0.412,23,3.967,24,1.436,25,5.283,26,4.682,27,2.289,28,0.41,29,0.919,30,3.262,31,3.646,32,1.37,33,3.383,34,1.37,35,1.294,36,3.714,37,3.383,38,3.565,39,3.383,40,0.252,41,0.112,42,1.636,43,1.854,44,2.289,45,2.48,46,1.222,47,0.867,48,3.011,49,2.71,50,0.867,51,3.967,52,0.016,53,0.016]],["title/modules/AppModule.html",[54,1.3,55,2.427]],["body/modules/AppModule.html",[1,3.195,2,1.617,3,0.298,4,0.168,5,0.165,14,0.023,28,0.434,29,0.612,36,3.345,37,2.25,40,0.168,41,0.075,44,2.988,47,0.577,50,0.857,52,0.012,53,0.012,54,1.435,55,4.658,56,1.233,57,1.719,58,2.25,59,2.25,60,2.25,61,3.625,62,3.192,63,3.625,64,3.625,65,3.625,66,2.1,67,1.413,68,1.318,69,2.639,70,1.959,71,3.459,72,4.415,73,4.304,74,1.65,75,2.639,76,2.25,77,1.994,78,1.65,79,3.921,80,1.233,81,3.989,82,2.639,83,1.65,84,3.237,85,2.639,86,2.639,87,3.921,88,2.25,89,2.25,90,2.639,91,2.639,92,2.25,93,2.639,94,2.639,95,2.639,96,2.639,97,2.639,98,2.639,99,2.25,100,2.639,101,2.962,102,2.639,103,2.25,104,2.639,105,2.25,106,2.639,107,2.25,108,2.639,109,2.25,110,2.639,111,2.25,112,2.639,113,2.25,114,2.639,115,2.25,116,2.639,117,2.25,118,2.639,119,2.639,120,3.195,121,3.989,122,2.25,123,2.639,124,2.639,125,2.639,126,1.994,127,2.639,128,0.23,129,2.639,130,2.639,131,2.639,132,2.639,133,2.639,134,1.157,135,2.639,136,1.233,137,2.639,138,1.65,139,2.639,140,1.522,141,2.639,142,2.639,143,2.639,144,3.921,145,3.343,146,2.639,147,2.421,148,1.994,149,2.639,150,2.639,151,4.678,152,5.179,153,3.921,154,3.921,155,1.142,156,3.921,157,2.135,158,3.921,159,3.921,160,2.639,161,3.921,162,2.639,163,2.25,164,2.639,165,2.639,166,2.639,167,2.639,168,2.639,169,2.639,170,2.639,171,2.639,172,2.639,173,2.639,174,2.639,175,2.639]],["title/injectables/AppService.html",[36,2.05,176,0.977]],["body/injectables/AppService.html",[3,0.257,4,0.257,5,0.169,7,1.154,9,0.319,10,1.223,14,0.022,22,0.548,24,1.445,25,5.519,26,4.89,28,0.397,29,0.935,33,5.014,34,1.394,35,1.316,36,3.044,40,0.257,41,0.114,42,2.572,43,1.886,44,3.598,46,1.243,47,0.882,50,0.882,52,0.016,53,0.016,83,2.522,84,3.299,120,2.756,128,0.351,148,3.987,176,1.452,177,1.886,178,3.44,179,4.499,180,6.237,181,4.035,182,5.85,183,4.035,184,1.11,185,0.783,186,0.991,187,4.035,188,3.44,189,3.44,190,1.886,191,4.035,192,4.035,193,4.035,194,3.049,195,4.035,196,3.44,197,3.049]],["title/controllers/ArticleController.html",[0,1.465,198,2.427]],["body/controllers/ArticleController.html",[0,0.662,2,0.662,3,0.102,4,0.102,5,0.067,7,1.539,9,0.127,10,0.615,11,2.667,13,1.445,14,0.022,18,3.732,19,3.751,20,3.759,22,0.515,24,1.151,27,2.276,28,0.362,29,0.372,30,1.658,31,4.072,32,0.554,34,0.554,35,0.524,40,0.102,41,0.045,43,1.839,45,1.003,46,0.495,47,1.366,48,3.732,49,3.391,50,1.085,52,0.008,53,0.008,128,0.432,155,0.987,184,1.366,185,0.963,186,1.219,198,1.811,199,1.369,200,1.096,201,1.605,202,2.889,203,3.389,204,2.889,205,3.389,206,2.652,207,2.889,208,2.889,209,1.369,210,0.86,211,1.966,212,2.864,213,1.605,214,5.127,215,3.205,216,3.546,217,5.127,218,4.233,219,5.127,220,5.127,221,1.605,222,4,223,4.004,224,1.658,225,1.605,226,1.605,227,1.605,228,2.976,229,1.605,230,3.935,231,4.922,232,1.605,233,2.395,234,1.605,235,2.652,236,3.935,237,1.605,238,4.589,239,2.56,240,1.605,241,1.605,242,3.935,243,1.605,244,1.605,245,1.605,246,1.605,247,1.369,248,4,249,2.46,250,1.369,251,1.605,252,1.811,253,1.605,254,3.355,255,1.605,256,1.605,257,2.973,258,1.605,259,1.42,260,2.261,261,1.369,262,1.369,263,1.096,264,1.369,265,1.369,266,1.096,267,1.369,268,1.213,269,0.926,270,1.213,271,1.325,272,1.325,273,1.693,274,1.369,275,0.75,276,1.811,277,1.605,278,0.588,279,1.955,280,1.369,281,1.369,282,1.369,283,1.213,284,1.369,285,1.605,286,1.605,287,3.355,288,2.864,289,1.605,290,0.926,291,1.822,292,1.605,293,1.605,294,4.692,295,1.605,296,1.605,297,2.652,298,1.605,299,3.355,300,3.355,301,3.935,302,1.605,303,1.605,304,1.605,305,1.605,306,1.605,307,1.605,308,1.605]],["title/classes/ArticleDto.html",[41,0.1,290,2.05]],["body/classes/ArticleDto.html",[3,0.257,4,0.257,5,0.17,7,1.287,9,0.32,13,1.818,14,0.022,22,0.648,28,0.375,32,1.397,40,0.336,41,0.176,47,1.501,52,0.016,53,0.016,128,0.578,147,2.752,186,1.298,212,2.334,223,2.334,259,3.154,290,3.602,309,1.319,310,4.894,311,3.056,312,1.724,313,4.021,314,4.021,315,5.888,316,4.045,317,4.045,318,3.056,319,4.045,320,4.045,321,4.045,322,3.319,323,2.166,324,3.344,325,3.993,326,3.993,327,3.61,328,1.891,329,3.61,330,2.334,331,3.449]],["title/entities/ArticleEntity.html",[332,1.661,333,1.379]],["body/entities/ArticleEntity.html",[3,0.206,4,0.206,5,0.136,7,1.311,9,0.255,13,1.954,14,0.022,22,0.697,28,0.289,40,0.206,41,0.091,47,1.467,52,0.014,53,0.014,128,0.601,140,1.864,147,2.122,155,1.322,157,1.332,185,0.627,210,1.244,216,2.207,231,3.964,233,2.346,259,2.81,278,1.183,312,1.48,313,3.584,314,3.584,332,2.122,333,1.762,334,2.755,335,3.027,336,5.247,337,5.247,338,2.452,339,5.247,340,2.755,341,4.539,342,4.539,343,3.232,344,4.474,345,4.539,346,3.232,347,5.995,348,5.691,349,3.76,350,5.691,351,3.232,352,3.87,353,3.232,354,3.429,355,3.232,356,3.584,357,3.232,358,4.584,359,3.232,360,4.539,361,4.539,362,3.232,363,3.232,364,3.232,365,4.539,366,3.87,367,1.417,368,3.232,369,3.232]],["title/modules/ArticleModule.html",[54,1.3,61,2.221]],["body/modules/ArticleModule.html",[2,2.251,3,0.271,4,0.271,5,0.179,14,0.022,28,0.446,29,0.986,40,0.271,41,0.12,52,0.016,53,0.016,54,1.998,56,1.988,57,2.394,61,4.416,66,2.924,67,2.278,68,2.124,70,2.727,71,2.658,78,2.658,80,1.988,198,4.119,210,1.194,278,1.557,279,3.885,280,3.626,333,1.651,370,3.626,371,3.626,372,3.364,373,3.364,374,4.253,375,3.626,376,3.15,377,4.253,378,3.626,379,4.253,380,3.626,381,4.253]],["title/injectables/ArticleService.html",[176,0.977,279,2.05]],["body/injectables/ArticleService.html",[3,0.112,4,0.112,5,0.074,9,0.139,10,0.662,11,2.651,14,0.023,22,0.577,24,1.246,27,2.616,28,0.364,29,0.407,34,0.607,35,0.573,40,0.112,41,0.05,42,1.177,46,1.112,47,1.393,50,1.216,52,0.009,53,0.009,80,0.821,128,0.484,134,1.252,147,0.821,155,1.331,157,1.487,176,0.786,177,0.821,184,1.53,185,1.109,186,1.365,190,2.289,202,3.076,204,3.076,207,3.076,208,3.076,209,1.498,210,0.908,211,2.075,212,2.397,216,1.95,223,3.297,231,4.064,233,2.501,238,3.543,247,1.498,248,3.076,249,2.597,252,4.074,254,3.543,264,3.076,265,1.498,278,0.643,279,1.647,281,1.498,282,1.498,283,1.327,284,1.498,288,3.676,290,2.397,291,2.497,313,1.2,314,1.2,333,1.775,335,2.397,338,2.137,354,2.157,367,0.77,373,2.578,378,1.498,380,1.498,382,1.498,383,3.608,384,2.856,385,2.856,386,2.856,387,1.757,388,3.9,389,3.076,390,1.757,391,2.856,392,1.757,393,1.757,394,2.856,395,1.757,396,1.757,397,1.757,398,1.757,399,2.856,400,1.757,401,1.757,402,2.856,403,1.757,404,1.757,405,1.757,406,1.757,407,1.757,408,1.327,409,2.435,410,1.757,411,1.498,412,1.757,413,1.757,414,1.757,415,1.757,416,1.498,417,1.757,418,1.757,419,1.757,420,1.757,421,1.757,422,2.856,423,1.757,424,1.95,425,2.856,426,3.897,427,2.856,428,1.757,429,2.856,430,3.543,431,3.543,432,3.608,433,1.757,434,1.757,435,1.757,436,1.757,437,1.757,438,1.757,439,2.856,440,1.757,441,1.757,442,1.757,443,1.757,444,1.757,445,2.856,446,1.757,447,1.757,448,1.757,449,1.757,450,2.856,451,1.757,452,2.435,453,1.757,454,1.757,455,2.435,456,2.856,457,1.757,458,1.757,459,1.498,460,1.327,461,1.327,462,2.856,463,1.757,464,4.155,465,1.757,466,1.757,467,3.608,468,2.157,469,1.757,470,1.498,471,1.757,472,1.757,473,1.757,474,1.757,475,2.856,476,2.856,477,2.856,478,2.856,479,2.856,480,1.95,481,1.757,482,2.856,483,2.435,484,2.856,485,1.757]],["title/classes/ArticlesQueryParams.html",[41,0.1,249,2.221]],["body/classes/ArticlesQueryParams.html",[3,0.25,4,0.25,5,0.165,9,0.311,13,1.868,14,0.022,22,0.666,28,0.33,32,1.357,40,0.25,41,0.146,47,1.441,52,0.016,53,0.016,128,0.559,233,2.545,249,3.242,309,1.282,312,1.692,318,4.849,322,3.293,325,4.98,326,4.664,328,1.837,329,4.383,330,3.702,335,3.349,424,3.965,452,4.949,486,5.62,487,3.35,488,4.949,489,5.805,490,5.805,491,3.93,492,3.93,493,3.93,494,3.93,495,3.93,496,3.93,497,3.93,498,5.805,499,3.93,500,3.93,501,5.186,502,3.93]],["title/modules/AuthModule.html",[54,1.3,62,2.05]],["body/modules/AuthModule.html",[2,1.424,3,0.22,4,0.22,5,0.145,10,0.8,11,1.424,14,0.023,22,0.358,24,0.8,28,0.433,29,0.8,40,0.22,41,0.098,50,1.039,52,0.014,53,0.014,54,2.144,56,1.614,57,2.085,62,4.049,66,2.546,67,1.85,68,1.725,70,3.248,71,2.972,72,4.635,73,4,74,2.159,77,3.592,78,2.159,80,1.614,120,2.359,121,2.945,210,0.755,233,1.424,278,1.264,291,1.341,503,2.945,504,2.945,505,2.945,506,3.432,507,3.964,508,2.783,509,2.61,510,4.054,511,5.437,512,3.454,513,2.61,514,3.454,515,2.61,516,3.454,517,2.359,518,2.375,519,3.454,520,2.359,521,2.945,522,3.454,523,3.454,524,2.945,525,3.454,526,3.454,527,2.159,528,3.454,529,3.454,530,2.945,531,3.454,532,4.754,533,3.454]],["title/injectables/AuthService.html",[176,0.977,506,1.775]],["body/injectables/AuthService.html",[3,0.221,4,0.221,5,0.146,7,1.044,9,0.275,10,1.107,14,0.022,22,0.566,24,1.107,27,1.524,28,0.374,29,0.805,40,0.221,41,0.098,42,2.421,43,2.745,44,3.551,46,1.897,47,1.044,50,0.76,52,0.014,53,0.014,73,4.449,74,2.173,128,0.511,134,2.094,155,1.39,176,1.314,177,1.625,184,1.314,185,0.927,186,1.172,190,2.877,210,1.346,211,2.385,224,2.173,233,2.249,259,2.558,278,1.272,312,1.557,338,2.232,506,2.385,508,2.094,515,2.626,527,3.671,534,2.963,535,3.608,536,5.454,537,5.454,538,3.476,539,6.635,540,4.775,541,3.476,542,3.476,543,4.071,544,3.608,545,4.449,546,4.071,547,4.071,548,4.071,549,4.071,550,2.374,551,3.476,552,3.476,553,2.963,554,2.985,555,2.232,556,3.476]],["title/injectables/CaslFactory.html",[176,0.977,372,1.775]],["body/injectables/CaslFactory.html",[3,0.238,4,0.238,5,0.157,9,0.295,10,1.162,14,0.022,22,0.388,24,0.865,28,0.402,29,0.865,34,1.29,35,1.635,40,0.319,41,0.105,50,0.816,52,0.015,53,0.015,128,0.527,155,1.837,157,1.54,176,1.379,177,1.746,184,1.027,185,0.725,186,0.917,210,1.323,278,1.367,291,1.45,309,1.218,333,2.197,335,2.892,372,2.504,460,2.822,557,2.822,558,5.014,559,5.014,560,3.735,561,2.827,562,5.014,563,5.014,564,5.014,565,4.275,566,3.184,567,2.155,568,3.184,569,2,570,5.014,571,4.275,572,3.735,573,3.788,574,3.735,575,3.735,576,3.735,577,5.014,578,1.865,579,3.735,580,3.184,581,5.014,582,3.735,583,3.134,584,2.822,585,3.735,586,4.825,587,3.735,588,4.275,589,5.014,590,3.735,591,3.735,592,3.735,593,3.735,594,3.735,595,3.735,596,3.735,597,3.184,598,3.735,599,3.735,600,3.735]],["title/modules/CaslModule.html",[54,1.3,63,2.221]],["body/modules/CaslModule.html",[3,0.309,4,0.309,5,0.204,14,0.022,28,0.377,29,1.124,40,0.309,41,0.137,52,0.018,53,0.018,54,2.17,56,2.267,57,2.6,63,4.406,66,3.176,67,2.598,68,2.423,70,2.962,372,3.635,510,5.056,601,4.136,602,4.851,603,4.136,604,4.851,605,2.598]],["title/classes/CreateArticleDto.html",[41,0.1,212,2.05]],["body/classes/CreateArticleDto.html",[3,0.282,4,0.282,5,0.186,7,0.97,9,0.35,13,1.291,14,0.022,22,0.46,28,0.391,32,1.532,40,0.357,41,0.182,47,1.413,52,0.017,53,0.017,128,0.535,147,2.621,212,3.235,223,3.548,259,2.375,290,3.728,309,1.447,310,4.237,311,3.351,312,1.829,313,3.029,314,3.029,318,3.351,322,3.401,323,2.375,324,3.461,325,4.237,326,4.237,327,3.83,328,2.073,329,3.83,330,2.559,331,3.781,606,4.435,607,4.435]],["title/classes/CreateTagDto.html",[41,0.1,608,2.427]],["body/classes/CreateTagDto.html",[3,0.315,4,0.315,5,0.208,9,0.391,13,1.442,14,0.022,22,0.514,28,0.382,32,1.711,40,0.315,41,0.17,46,1.991,47,1.313,52,0.018,53,0.018,128,0.431,185,1.254,309,1.615,312,1.958,322,2.999,324,3.216,328,2.315,608,4.101,609,5.12,610,4.223,611,4.953,612,4.953,613,6.005]],["title/classes/DeleteArticlePolicyHandler.html",[41,0.1,271,1.775]],["body/classes/DeleteArticlePolicyHandler.html",[3,0.252,4,0.252,5,0.166,9,0.313,10,1.208,14,0.022,22,0.411,24,0.917,28,0.394,34,1.367,35,1.291,40,0.409,41,0.175,50,1.353,52,0.016,53,0.016,128,0.507,184,1.089,185,0.768,186,0.972,210,1.274,271,2.603,272,1.977,273,1.977,275,1.85,278,1.449,309,1.291,333,2.262,561,2.603,567,2.283,569,2.12,578,3.453,605,2.12,614,2.791,615,2.12,616,3.445,617,3.363,618,3.257,619,4.129,620,3.958,621,1.977,622,3.642,623,3.006,624,1.977,625,2.283,626,3.257,627,1.977,628,3.257]],["title/classes/DeleteUserPolicyHandler.html",[41,0.1,627,1.775]],["body/classes/DeleteUserPolicyHandler.html",[3,0.252,4,0.252,5,0.166,9,0.313,10,1.208,14,0.022,22,0.411,24,0.917,28,0.394,34,1.367,35,1.291,40,0.409,41,0.175,50,1.353,52,0.016,53,0.016,128,0.507,184,1.089,185,0.768,186,0.972,210,1.274,271,1.977,272,1.977,273,1.977,275,1.85,278,1.449,309,1.291,333,2.262,561,2.603,567,2.283,569,2.12,578,3.453,605,2.12,614,2.791,615,2.12,616,3.445,617,3.363,618,3.257,619,4.129,621,1.977,622,3.642,623,3.006,624,1.977,625,2.283,626,3.257,627,2.603,628,3.257,629,3.958]],["title/interfaces/IPolicyHandler.html",[617,1.775,621,1.775]],["body/interfaces/IPolicyHandler.html",[3,0.252,4,0.252,5,0.167,9,0.314,10,1.209,14,0.022,22,0.412,24,0.919,28,0.394,34,1.37,35,1.294,40,0.41,41,0.175,50,1.355,52,0.016,53,0.016,128,0.508,184,1.091,185,0.77,186,0.974,210,1.275,271,1.982,272,1.982,273,1.982,275,1.854,278,1.452,333,2.264,561,2.607,567,2.289,569,2.125,578,3.455,605,2.125,614,2.795,615,2.125,616,3.319,617,3.365,618,3.262,619,4.131,621,1.982,622,3.873,623,3.011,624,1.982,625,2.289,626,3.262,627,1.982,628,3.262,630,3.967,631,3.967]],["title/injectables/JwtAuthGuard.html",[176,0.977,632,2.427]],["body/injectables/JwtAuthGuard.html",[3,0.269,4,0.269,5,0.178,7,0.925,9,0.334,10,1.261,14,0.022,22,0.565,24,0.98,28,0.404,29,0.98,40,0.269,41,0.119,42,1.744,45,2.645,50,1.19,52,0.016,53,0.016,128,0.474,147,1.978,176,1.497,177,1.978,184,1.497,185,1.056,186,1.336,291,1.643,517,2.89,527,3.402,535,4.112,632,3.717,633,5.129,634,3.607,635,3.717,636,4.64,637,3.607,638,5.734,639,4.231,640,4.64,641,4.798,642,4.231,643,3.607,644,2.89,645,4.231,646,3.197,647,4.231,648,3.607,649,4.231,650,3.607,651,4.64,652,4.231,653,3.607,654,4.231,655,4.231]],["title/injectables/JwtStrategy.html",[176,0.977,507,2.05]],["body/injectables/JwtStrategy.html",[3,0.231,4,0.231,5,0.152,7,0.793,9,0.287,10,1.139,11,2.299,14,0.022,22,0.51,24,1.139,27,2.446,28,0.41,29,0.841,40,0.231,41,0.157,42,2.465,43,2.607,46,1.515,52,0.015,53,0.015,73,4.577,74,2.268,128,0.428,176,1.353,177,1.696,184,1.353,185,0.954,186,1.207,190,2.298,210,0.793,278,1.328,291,1.409,330,2.093,338,1.696,507,2.836,508,2.979,517,2.478,521,3.093,527,3.737,530,3.093,544,3.715,545,4.268,648,3.093,650,3.093,656,3.093,657,5.577,658,4.755,659,3.628,660,3.628,661,3.628,662,5.978,663,3.628,664,4.917,665,4.917,666,4.192,667,3.715,668,3.093,669,3.628,670,3.628,671,3.093,672,3.628,673,3.628,674,3.628,675,3.628,676,3.628,677,3.628,678,3.628,679,3.628,680,4.917,681,4.917,682,4.917]],["title/classes/LoginDto.html",[41,0.1,683,2.221]],["body/classes/LoginDto.html",[3,0.281,4,0.281,5,0.185,7,0.964,9,0.349,13,1.627,14,0.022,22,0.58,28,0.356,32,1.524,40,0.281,41,0.182,46,2.095,47,1.41,52,0.017,53,0.017,128,0.486,136,3.111,224,3.494,309,1.439,312,1.823,322,3.064,324,3.286,328,2.062,555,3.111,683,3.494,684,3.761,685,4.223,686,3.761,687,4.411,688,4.405,689,3.333,690,4.411,691,3.817,692,3.013,693,3.013]],["title/classes/PasswordTransformer.html",[41,0.1,694,2.427]],["body/classes/PasswordTransformer.html",[3,0.265,4,0.265,5,0.175,7,1.306,9,0.329,10,1.249,14,0.022,22,0.559,24,1.249,28,0.343,40,0.265,41,0.169,43,2.519,47,1.58,50,1.178,52,0.016,53,0.016,128,0.469,136,2.519,184,1.483,185,1.046,186,1.323,309,1.359,323,2.886,367,1.827,616,2.886,694,3.681,695,3.553,696,5.973,697,5.389,698,4.167,699,5.389,700,5.384,701,5.812,702,5.389,703,4.167,704,5.389,705,4.595,706,3.553,707,4.167]],["title/classes/PatchArticlePolicyHandler.html",[41,0.1,272,1.775]],["body/classes/PatchArticlePolicyHandler.html",[3,0.252,4,0.252,5,0.166,9,0.313,10,1.208,14,0.022,22,0.411,24,0.917,28,0.394,34,1.367,35,1.291,40,0.409,41,0.175,50,1.353,52,0.016,53,0.016,128,0.507,184,1.089,185,0.768,186,0.972,210,1.274,271,1.977,272,2.603,273,1.977,275,1.85,278,1.449,309,1.291,333,2.262,561,2.603,567,2.283,569,2.12,578,3.453,605,2.12,614,2.791,615,2.12,616,3.445,617,3.363,618,3.257,619,4.129,621,1.977,622,3.642,623,3.006,624,1.977,625,2.283,626,3.257,627,1.977,628,3.257,708,3.958]],["title/classes/PatchUserDto.html",[41,0.1,709,2.221]],["body/classes/PatchUserDto.html",[3,0.249,4,0.249,5,0.165,7,0.857,9,0.31,13,1.141,14,0.022,22,0.407,28,0.369,32,1.354,40,0.33,41,0.186,46,2.101,47,1.402,52,0.016,53,0.016,128,0.505,134,2.271,136,2.42,155,1.867,211,2.587,309,1.279,312,1.689,322,3.356,323,2.1,324,3.528,327,3.537,328,1.832,555,2.42,688,4.38,691,3.537,692,2.678,693,2.678,709,3.237,710,3.912,711,2.962,712,4.415,713,3.855,714,3.92,715,3.92,716,3.912,717,4.415,718,3.343,719,3.537,720,3.343,721,3.237,722,2.962,723,3.343]],["title/classes/PatchUserPolicyHandler.html",[41,0.1,273,1.775]],["body/classes/PatchUserPolicyHandler.html",[3,0.251,4,0.251,5,0.166,9,0.312,10,1.206,14,0.022,22,0.41,24,0.915,28,0.394,34,1.364,35,1.288,40,0.409,41,0.175,50,1.352,52,0.016,53,0.016,128,0.506,184,1.086,185,0.766,186,0.969,210,1.272,271,1.972,272,1.972,273,2.599,275,1.846,278,1.445,309,1.288,333,2.259,561,2.599,567,2.278,569,2.115,578,3.451,605,2.115,614,2.787,615,2.115,616,3.443,617,3.361,618,3.252,619,4.126,621,1.972,622,3.866,623,3.001,624,1.972,625,2.278,626,3.252,627,1.972,628,3.252,724,3.948]],["title/guards/PoliciesGuard.html",[269,2.05,635,2.427]],["body/guards/PoliciesGuard.html",[3,0.237,4,0.237,5,0.156,9,0.294,10,1.158,11,2.328,14,0.022,22,0.586,24,1.158,27,2.192,28,0.401,29,0.862,40,0.237,41,0.105,42,1.533,45,2.324,50,1.234,52,0.015,53,0.015,128,0.492,155,1.082,176,1.375,184,1.553,185,1.096,186,1.386,190,2.822,268,2.809,269,2.884,275,1.738,291,2.192,372,3.311,513,2.809,561,3.147,578,3.016,605,1.991,616,1.991,624,3.016,625,2.145,636,5.148,637,3.17,638,5.532,640,4.262,641,4.562,643,3.17,644,2.539,653,3.17,725,3.718,726,3.17,727,4.998,728,3.718,729,3.718,730,4.998,731,3.718,732,4.998,733,3.776,734,3.17,735,3.718,736,3.718,737,3.718,738,3.718,739,3.718,740,3.718,741,2.809,742,3.718,743,3.718]],["title/classes/RegisterDto.html",[41,0.1,744,2.221]],["body/classes/RegisterDto.html",[3,0.263,4,0.263,5,0.173,7,0.902,9,0.326,13,1.731,14,0.022,22,0.617,28,0.341,32,1.425,40,0.263,41,0.178,46,2.147,47,1.46,52,0.016,53,0.016,128,0.517,134,2.859,136,3.047,224,3.347,309,1.346,312,1.746,322,3.142,324,3.369,328,1.928,555,3.047,686,3.517,688,4.563,689,3.117,691,3.657,692,2.818,693,2.818,716,4.045,744,3.347,745,3.517,746,4.565,747,4.126,748,4.126,749,4.126,750,4.126]],["title/controllers/TagController.html",[0,1.465,751,2.427]],["body/controllers/TagController.html",[0,1.758,2,1.758,3,0.271,4,0.271,5,0.179,7,1.392,9,0.337,10,1.267,11,2.489,13,1.241,14,0.022,16,3.419,18,3.675,20,3.419,21,3.419,22,0.442,24,0.988,28,0.384,29,0.988,30,3.419,31,3.774,32,1.473,40,0.271,41,0.12,45,2.665,46,1.314,48,3.155,50,0.932,52,0.017,53,0.017,200,2.912,239,3.221,250,3.635,263,2.912,288,2.46,291,1.655,373,3.016,461,5.092,751,3.735,752,3.635,753,4.264,754,5.431,755,5.431,756,3.221,757,4.264,758,3.635,759,4.264,760,4.264,761,3.221,762,4.264,763,4.264,764,3.635]],["title/entities/TagEntity.html",[332,1.661,376,2.05]],["body/entities/TagEntity.html",[3,0.298,4,0.298,5,0.197,7,1.024,9,0.37,13,1.69,14,0.022,22,0.602,28,0.298,40,0.298,41,0.178,47,1.269,52,0.018,53,0.018,128,0.505,140,2.703,147,2.713,185,1.279,233,2.393,312,1.893,332,3.081,338,2.948,356,4.307,358,3.965,367,2.055,376,3.349,424,3.965,461,3.54,765,3.995,766,4.686,767,3.995,768,4.686,769,3.995]],["title/modules/TagModule.html",[54,1.3,64,2.221]],["body/modules/TagModule.html",[2,2.402,3,0.3,4,0.3,5,0.198,14,0.022,28,0.432,29,1.092,40,0.3,41,0.133,52,0.018,53,0.018,54,2.132,56,2.203,57,2.554,64,4.321,66,3.12,67,2.524,68,2.354,70,2.91,71,2.946,78,2.946,80,2.203,373,3.453,376,2.719,751,4.318,758,4.018,770,4.713,771,4.713,772,4.713,773,4.713,774,4.018,775,4.713]],["title/injectables/TagService.html",[176,0.977,373,1.775]],["body/injectables/TagService.html",[3,0.239,4,0.239,5,0.158,9,0.296,10,1.165,11,2.682,14,0.022,22,0.589,24,1.165,27,2.658,28,0.423,29,0.869,40,0.239,41,0.106,42,2.073,46,1.549,50,1.099,52,0.015,53,0.015,80,1.753,83,2.345,84,3.144,120,2.562,128,0.438,157,1.547,163,4.288,176,1.383,177,1.753,182,5.665,184,1.383,185,0.976,186,1.234,188,3.199,189,3.199,190,2.35,223,2.164,283,2.834,288,2.901,291,1.456,367,1.645,373,2.512,376,2.901,388,4.579,408,2.834,424,3.874,455,3.199,460,2.834,608,4.139,754,5.167,764,3.199,774,3.199,776,3.199,777,5.029,778,3.752,779,3.752,780,5.029,781,5.029,782,3.752,783,3.752,784,3.752,785,3.752,786,3.752,787,3.199,788,3.752,789,3.752,790,3.752,791,5.029,792,3.752,793,3.752,794,3.752,795,3.199]],["title/controllers/UserController.html",[0,1.465,796,2.427]],["body/controllers/UserController.html",[0,1.367,2,1.367,3,0.211,4,0.211,5,0.139,7,1.258,9,0.262,10,1.071,11,2.193,13,1.346,14,0.022,16,2.889,18,3.491,20,2.889,21,2.889,22,0.48,24,1.334,27,2.333,28,0.417,29,0.768,30,2.889,31,3.326,32,1.145,34,1.145,35,1.081,40,0.211,41,0.094,42,1.367,43,1.55,46,1.424,48,2.666,50,1.01,52,0.014,53,0.014,128,0.289,155,2.003,184,1.271,185,0.897,186,1.135,190,2.16,200,2.265,210,0.725,211,2.875,233,2.193,252,3.157,257,3.492,259,2.475,261,5.343,263,2.265,276,2.265,287,2.827,506,2.657,508,2.333,580,2.827,709,3.597,756,2.505,761,2.505,796,3.157,797,2.827,798,3.316,799,5.32,800,4.622,801,3.316,802,3.316,803,3.316,804,3.94,805,4.348,806,3.316,807,3.316,808,3.94,809,3.94,810,4.622,811,3.94,812,6.052,813,3.492,814,2.827,815,2.827,816,2.827,817,3.316,818,2.073,819,2.505,820,3.316,821,3.316,822,3.316,823,2.827,824,3.316,825,3.316]],["title/classes/UserDto.html",[41,0.1,713,2.221]],["body/classes/UserDto.html",[3,0.22,4,0.22,5,0.145,9,0.273,13,1.788,14,0.022,22,0.637,28,0.346,32,1.193,40,0.303,41,0.173,46,2.184,47,1.487,52,0.014,53,0.014,128,0.566,134,2.693,136,2.871,155,1.384,211,1.725,309,1.127,312,1.551,322,3.248,323,1.85,324,3.4,327,3.247,328,1.614,555,2.871,688,4.647,689,2.61,691,3.247,692,2.359,693,2.359,709,2.159,710,4.796,711,2.61,712,2.945,713,3.661,716,3.592,717,4.054,718,2.945,719,4.195,720,2.945,721,3.839,722,2.61,723,2.945,826,3.454,827,3.454,828,3.454,829,3.454,830,3.454,831,3.454,832,3.454,833,3.454,834,3.454]],["title/entities/UserEntity.html",[210,0.777,332,1.661]],["body/entities/UserEntity.html",[3,0.18,4,0.18,5,0.119,7,0.618,9,0.224,13,1.868,14,0.022,22,0.666,28,0.362,40,0.18,41,0.151,47,1.425,52,0.012,53,0.012,128,0.558,134,2.497,136,2.661,138,2.579,140,1.632,147,1.929,155,1.418,157,1.166,185,0.801,210,0.902,216,3.327,223,2.38,233,1.701,312,1.346,323,2.609,330,1.632,332,2.779,333,2.383,338,2.277,349,1.632,352,2.412,356,3.327,358,4.835,367,1.24,431,4.153,459,3.518,518,2.675,520,1.932,550,1.932,554,3.559,555,2.661,569,1.515,583,2.579,694,3.657,700,3.518,719,3.889,721,3.045,767,2.412,769,2.412,835,2.412,836,4.126,837,2.828,838,2.828,839,2.828,840,2.828,841,2.828,842,2.828,843,3.117,844,2.828,845,4.046,846,3.518,847,2.828,848,4.126,849,4.126,850,2.412,851,4.126,852,2.828,853,2.828,854,4.126,855,4.126,856,4.126,857,4.126,858,4.126,859,2.828,860,3.518,861,3.117,862,3.518,863,3.518,864,2.828,865,4.126,866,4.126,867,4.126,868,4.871,869,2.828]],["title/entities/UserRoles.html",[332,1.661,518,1.775]],["body/entities/UserRoles.html",[3,0.23,4,0.23,5,0.152,7,0.791,8,3.709,9,0.286,13,1.622,14,0.022,22,0.578,28,0.354,34,1.25,35,1.181,40,0.23,41,0.157,52,0.015,53,0.015,128,0.52,140,2.089,155,1.917,210,1.306,228,3.353,233,2.024,312,1.601,332,3.009,338,2.604,340,3.087,344,3.087,349,3.446,356,3.805,358,4.575,366,4.186,367,1.588,518,2.452,546,4.186,554,3.069,568,5.323,583,4.116,584,2.735,588,4.186,818,2.263,843,3.709,850,3.087,860,4.186,861,3.709,862,4.186,863,4.186,870,5.093,871,3.087,872,3.62,873,5.973,874,3.62,875,4.909,876,4.909,877,3.709,878,5.973,879,4.909,880,4.909,881,4.909,882,4.909,883,3.62]],["title/controllers/UsersController.html",[0,1.465,884,2.427]],["body/controllers/UsersController.html",[0,1.628,2,0.829,3,0.128,4,0.128,5,0.084,7,1.499,9,0.159,10,0.737,11,2.55,13,1.307,14,0.022,16,2.807,18,3.439,19,2.404,20,3.533,21,2.807,22,0.466,24,1.206,27,2.614,28,0.394,29,0.466,30,1.989,31,3.801,32,0.694,34,0.694,35,0.656,38,2.697,39,1.714,40,0.128,41,0.057,42,1.312,43,2.548,44,1.16,46,0.98,47,1.192,48,3.439,49,2.173,50,0.982,52,0.01,53,0.01,128,0.391,134,2.752,138,1.989,155,2.005,157,0.829,184,1.235,185,0.871,186,1.102,190,1.487,200,1.373,210,0.44,211,2.599,214,3.828,215,2.173,217,3.828,218,2.713,219,3.828,220,3.828,222,3.828,224,2.807,228,3.342,259,2.115,260,2.713,262,1.714,263,1.373,266,1.373,267,1.714,268,1.519,269,1.16,270,1.519,274,1.714,275,0.94,288,2.278,291,1.533,299,1.714,300,1.714,468,1.519,506,2.444,508,1.969,535,2.984,545,2.173,550,3.067,555,1.487,627,1.59,658,2.713,683,3.058,685,4.397,719,2.173,721,1.989,744,3.058,746,4.171,755,4.436,756,2.404,761,2.404,805,2.404,808,2.713,813,2.404,814,1.714,818,1.257,819,1.519,884,2.173,885,1.714,886,2.011,887,3.949,888,3.949,889,2.011,890,2.011,891,2.011,892,2.011,893,3.182,894,3.182,895,2.713,896,2.713,897,2.011,898,2.011,899,2.011,900,3.182,901,2.404,902,2.011,903,2.011,904,2.011,905,2.713,906,2.011,907,2.011,908,4.49,909,2.011,910,2.713,911,1.714,912,2.011,913,1.714,914,1.714,915,2.011,916,2.011,917,2.011,918,3.182,919,3.182,920,3.182,921,3.182,922,3.182,923,2.011,924,2.011,925,2.011,926,3.182,927,2.011,928,1.714,929,2.011,930,2.011]],["title/modules/UsersModule.html",[54,1.3,65,2.221]],["body/modules/UsersModule.html",[2,2.148,3,0.252,4,0.252,5,0.166,14,0.022,28,0.45,29,0.917,40,0.252,41,0.112,52,0.016,53,0.016,54,1.907,56,1.85,57,2.285,62,3.81,65,4.362,66,2.791,67,2.12,68,1.977,70,2.603,71,3.257,78,2.474,80,1.85,92,3.374,155,1.152,210,0.865,269,3.006,270,2.99,372,3.299,375,3.374,508,2.896,518,2.603,520,2.703,524,3.374,632,3.559,644,2.703,796,3.979,818,2.474,819,2.99,884,3.979,931,3.958,932,3.958,933,3.958,934,3.958,935,5.211,936,3.958,937,3.958,938,3.958,939,3.958,940,3.958,941,3.958]],["title/injectables/UsersService.html",[176,0.977,508,1.558]],["body/injectables/UsersService.html",[3,0.112,4,0.112,5,0.074,7,0.626,9,0.139,10,0.664,11,2.462,14,0.023,16,1.103,21,1.103,22,0.559,24,1.428,26,1.333,27,2.887,28,0.373,29,0.409,34,0.609,35,0.575,40,0.112,41,0.05,42,1.717,43,2.737,44,1.653,46,0.883,47,1.38,49,1.957,50,1.13,52,0.009,53,0.009,80,0.825,128,0.469,134,2.797,136,2.737,138,3.068,155,2.041,157,1.889,176,0.788,177,0.825,184,1.482,185,1.081,186,1.323,190,1.339,210,0.386,211,2.859,215,2.845,228,3.532,233,2.132,252,1.205,257,3.147,288,2.643,291,1.778,338,1.691,349,1.018,367,0.774,388,4.208,389,3.085,408,1.333,411,1.504,426,1.504,430,1.504,468,3.147,470,1.504,480,1.205,483,1.504,508,1.257,518,1.807,520,1.205,550,1.957,554,2.262,555,2.141,573,1.333,583,1.103,668,2.443,683,2.864,685,1.333,705,2.443,706,2.443,713,1.103,721,1.103,744,2.864,787,2.443,795,3.085,804,2.443,805,4.512,813,3.708,815,1.504,816,1.504,818,1.103,823,2.443,843,2.165,845,1.333,846,1.504,861,1.333,877,2.165,895,3.551,896,2.443,901,2.165,910,3.085,911,1.504,913,1.504,914,1.504,942,1.504,943,2.865,944,2.865,945,3.618,946,1.764,947,3.618,948,1.764,949,2.865,950,1.764,951,2.865,952,2.865,953,1.764,954,2.865,955,2.865,956,4.165,957,1.764,958,2.865,959,1.764,960,4.908,961,2.865,962,1.764,963,2.865,964,1.764,965,2.865,966,1.764,967,1.764,968,2.865,969,2.865,970,2.865,971,1.764,972,1.764,973,1.764,974,1.764,975,1.764,976,1.764,977,1.764,978,1.764,979,1.764,980,1.764,981,1.764,982,1.764,983,1.764,984,1.764,985,1.764,986,3.085,987,1.764,988,2.443,989,1.504,990,1.764,991,1.764,992,1.764,993,1.764,994,1.764,995,1.764,996,1.504,997,1.764,998,1.764,999,1.764,1000,1.504,1001,1.764,1002,1.764,1003,1.764,1004,2.443,1005,1.764,1006,1.764,1007,1.764,1008,1.764,1009,2.865,1010,1.764,1011,1.764,1012,1.764,1013,1.764,1014,1.764]],["title/coverage.html",[1015,4.133]],["body/coverage.html",[0,2.323,1,1.884,5,0.116,6,2.351,14,0.022,36,1.591,38,1.884,41,0.19,52,0.012,53,0.012,70,1.377,128,0.24,155,0.803,157,1.137,176,1.718,178,2.351,197,2.084,198,1.884,199,2.351,210,0.603,212,1.591,249,1.724,266,1.884,269,1.591,271,1.377,272,1.377,273,1.377,276,1.884,279,1.591,290,1.591,310,3.06,311,3.06,332,2.473,333,1.071,334,2.351,354,5.407,372,1.377,373,1.377,376,1.591,382,2.351,486,2.351,487,2.351,506,1.377,507,1.591,508,1.209,509,2.084,518,1.377,534,2.351,557,2.084,608,1.884,609,2.351,610,2.351,614,3.018,615,3.018,617,1.377,621,1.377,627,1.377,632,1.884,633,2.351,634,2.351,635,1.884,646,2.084,656,2.351,683,1.724,684,2.351,694,1.884,695,2.351,709,1.724,710,3.06,711,3.06,713,1.724,726,2.351,733,2.084,741,2.084,744,1.724,745,2.351,751,1.884,752,2.351,765,2.351,776,2.351,796,1.884,797,2.351,835,2.351,870,2.351,871,2.351,884,1.884,885,2.351,942,2.351,1015,2.351,1016,2.758,1017,2.758,1018,2.351,1019,5.816,1020,2.351,1021,6.713,1022,6.867,1023,2.758,1024,5.29,1025,2.758,1026,2.758,1027,2.758,1028,2.758,1029,2.758,1030,6.375,1031,3.453,1032,2.351,1033,4.05,1034,2.758,1035,2.758,1036,3.453,1037,3.453,1038,3.453,1039,4.05,1040,2.351,1041,3.06,1042,2.351,1043,4.258,1044,2.351,1045,2.351,1046,6.089,1047,2.351,1048,2.351,1049,2.351,1050,2.758,1051,2.758,1052,2.758,1053,2.758,1054,2.758,1055,2.758,1056,2.351,1057,2.758,1058,2.758,1059,2.758,1060,2.351]],["title/dependencies.html",[57,1.874,1061,2.53]],["body/dependencies.html",[5,0.162,14,0.023,29,0.896,32,1.335,41,0.145,52,0.015,53,0.015,57,1.695,74,2.416,76,3.296,77,2.92,80,1.807,81,3.296,83,2.416,84,3.599,88,3.296,89,3.296,323,2.07,328,1.807,367,1.695,409,3.296,488,3.296,515,2.92,517,2.64,527,2.416,566,3.296,644,2.64,671,3.296,845,2.92,1062,3.865,1063,6.798,1064,3.865,1065,5.13,1066,3.865,1067,3.865,1068,3.865,1069,3.865,1070,3.865,1071,3.865,1072,3.865,1073,3.865,1074,3.865,1075,5.13,1076,4.374,1077,3.865,1078,3.865,1079,3.865,1080,3.865,1081,3.865,1082,3.865,1083,3.865,1084,3.865,1085,3.865,1086,6.133,1087,3.865,1088,3.865,1089,3.296,1090,3.865,1091,3.865,1092,3.865,1093,3.865,1094,3.865,1095,3.865,1096,3.865,1097,3.865,1098,3.865,1099,3.865,1100,3.865,1101,3.865,1102,3.865,1103,3.865,1104,3.865,1105,3.865,1106,3.865,1107,3.865,1108,3.865,1109,3.865,1110,3.865,1111,3.865,1112,3.865,1113,3.865,1114,3.865,1115,3.865,1116,3.865,1117,3.865,1118,3.865]],["title/miscellaneous/functions.html",[1119,1.712,1120,3.643]],["body/miscellaneous/functions.html",[9,0.442,14,0.019,52,0.019,53,0.019,1043,4.222,1044,5.797,1119,3.224,1120,4.764,1121,4.764]],["title/index.html",[9,0.235,1122,2.968,1123,2.53]],["body/index.html",[5,0.155,7,0.64,8,3.508,14,0.021,35,1.201,47,0.396,48,1.045,52,0.009,53,0.009,54,1.699,57,1.615,68,2.319,83,2.644,84,1.829,99,1.544,101,2.782,103,1.544,105,1.544,107,1.544,109,1.544,111,1.544,113,1.544,115,1.544,117,1.544,122,1.544,126,3.752,128,0.255,134,0.794,136,1.368,138,3.76,145,3.14,148,2.782,157,0.746,179,3.14,185,0.351,186,0.444,194,4.459,197,2.211,215,1.999,329,2.889,335,1.045,349,2.678,367,2.386,543,1.544,544,2.211,545,1.237,547,1.544,548,2.495,549,1.544,553,2.495,573,3.508,586,1.544,597,1.544,666,2.495,667,1.368,722,1.368,734,1.544,811,1.544,877,2.782,905,1.544,928,3.606,986,3.958,988,1.544,989,1.544,996,1.544,1000,1.544,1004,1.544,1019,2.495,1041,3.508,1060,1.544,1089,2.495,1123,1.544,1124,2.926,1125,1.811,1126,2.926,1127,3.683,1128,1.811,1129,1.811,1130,1.811,1131,2.926,1132,1.811,1133,2.926,1134,1.811,1135,1.811,1136,3.683,1137,1.811,1138,2.926,1139,4.643,1140,4.967,1141,4.229,1142,5.227,1143,2.926,1144,3.683,1145,2.926,1146,2.926,1147,3.683,1148,1.811,1149,5.227,1150,1.811,1151,2.926,1152,1.811,1153,1.811,1154,4.967,1155,1.811,1156,1.811,1157,1.811,1158,1.811,1159,4.229,1160,2.926,1161,6.202,1162,4.229,1163,4.229,1164,1.811,1165,2.926,1166,1.811,1167,1.811,1168,1.811,1169,5.227,1170,2.926,1171,2.926,1172,2.926,1173,3.683,1174,2.926,1175,1.811,1176,1.811,1177,1.811,1178,1.811,1179,1.811,1180,5.771,1181,4.229,1182,1.811,1183,1.811,1184,1.811,1185,1.811,1186,2.926,1187,1.811,1188,1.811,1189,1.811,1190,1.811,1191,1.811,1192,1.811,1193,2.926,1194,1.811,1195,1.811,1196,3.683,1197,3.683,1198,5.441,1199,1.811,1200,4.229,1201,1.811,1202,1.811,1203,3.683,1204,1.811,1205,1.811,1206,1.811,1207,1.811,1208,2.926,1209,1.811,1210,5.441,1211,1.811,1212,1.811,1213,1.811,1214,1.811,1215,1.811,1216,2.926,1217,1.811,1218,1.811,1219,1.811,1220,1.811,1221,1.811,1222,1.811,1223,1.811,1224,1.811,1225,4.229,1226,2.926,1227,1.811,1228,1.811,1229,2.926,1230,1.811,1231,1.811,1232,1.811,1233,1.811,1234,1.811,1235,1.811,1236,1.811,1237,1.811,1238,1.811,1239,2.926,1240,1.811,1241,1.811,1242,1.811,1243,1.811,1244,2.926,1245,1.811,1246,1.811,1247,1.811,1248,1.811,1249,4.229,1250,2.926,1251,2.926,1252,1.811,1253,1.811,1254,1.811,1255,1.811,1256,1.544,1257,1.811,1258,1.811,1259,2.926,1260,1.811,1261,1.811,1262,1.811,1263,2.926,1264,1.811,1265,1.811,1266,1.811,1267,3.683,1268,3.683,1269,1.811,1270,1.811,1271,1.811,1272,2.926,1273,2.926,1274,1.811,1275,1.811,1276,1.811,1277,1.811,1278,2.926,1279,1.811,1280,1.811,1281,1.811,1282,1.811,1283,1.811,1284,2.926,1285,1.811,1286,1.811,1287,1.811,1288,1.811,1289,1.811,1290,2.926,1291,1.811,1292,2.926,1293,1.811,1294,1.811,1295,1.811,1296,1.811,1297,1.811,1298,1.811,1299,1.811,1300,2.926,1301,4.229,1302,1.811,1303,1.811,1304,1.811,1305,3.683,1306,3.683,1307,2.926,1308,1.811,1309,1.811,1310,1.811,1311,1.811,1312,1.811,1313,1.811,1314,1.811,1315,1.811,1316,1.811,1317,1.811,1318,1.811,1319,1.811,1320,1.811,1321,1.811,1322,1.811,1323,1.811,1324,3.683,1325,2.926,1326,1.811,1327,3.683,1328,2.926,1329,2.926,1330,2.926,1331,2.926,1332,1.811,1333,2.926,1334,2.926,1335,2.926,1336,2.926,1337,1.811,1338,1.811,1339,1.811,1340,2.495,1341,2.926,1342,1.811,1343,1.811,1344,1.811,1345,1.811,1346,1.811,1347,1.811,1348,1.811,1349,1.811,1350,1.811,1351,1.811,1352,1.811,1353,1.811,1354,1.811,1355,1.811,1356,1.811,1357,1.811,1358,1.811,1359,1.811,1360,1.811,1361,1.811,1362,1.811,1363,1.811,1364,1.811,1365,1.811,1366,1.811,1367,1.811,1368,1.811,1369,1.811,1370,1.544,1371,1.811,1372,1.811,1373,1.811,1374,1.811,1375,1.811,1376,1.811,1377,1.811,1378,1.544,1379,1.544,1380,1.811]],["title/modules.html",[56,2.266]],["body/modules.html",[14,0.019,52,0.019,53,0.019,55,3.542,56,2.424,61,3.241,62,2.991,63,3.241,64,3.241,65,3.241,1076,6.028,1370,6.028,1381,7.07,1382,7.07]],["title/overview.html",[1383,4.133]],["body/overview.html",[2,1.583,14,0.022,36,3.31,52,0.015,53,0.015,55,4.865,56,1.794,57,2.239,58,3.273,59,3.273,60,3.273,61,4.295,62,4.065,63,4.093,64,3.981,65,4.295,66,2.735,67,2.056,68,1.917,140,2.214,177,1.794,279,3.31,309,1.252,370,3.273,371,3.273,372,3.432,373,3.055,416,3.273,480,3.488,503,3.273,504,3.273,505,3.273,506,3.338,507,3.855,508,2.682,601,3.273,603,3.273,621,1.917,635,2.622,1383,3.273,1384,3.839,1385,3.839,1386,3.839,1387,3.839]],["title/properties.html",[312,1.394,1061,2.53]],["body/properties.html",[14,0.021,52,0.019,53,0.019,312,1.804,335,3.191,1378,4.717,1379,4.717,1388,4.717,1389,5.532,1390,5.532,1391,5.532]],["title/miscellaneous/typealiases.html",[1119,1.712,1392,4.273]],["body/miscellaneous/typealiases.html",[9,0.414,14,0.021,52,0.019,53,0.019,128,0.456,557,3.955,561,2.615,565,4.463,571,5.292,578,3.101,614,2.804,615,3.544,617,2.615,623,3.818,624,3.101,741,3.955,1119,3.02,1393,5.234,1394,6.207,1395,6.207]],["title/miscellaneous/variables.html",[1119,1.712,1396,3.643]],["body/miscellaneous/variables.html",[7,0.98,9,0.251,14,0.022,18,1.832,38,3.063,47,1.351,50,0.98,52,0.014,53,0.014,70,2.24,101,3.388,126,2.399,128,0.589,147,2.096,155,1.644,157,1.309,185,0.616,194,4.67,196,2.708,210,0.694,239,2.399,266,3.063,275,2.096,276,3.063,291,1.233,330,1.832,338,2.429,349,4.023,480,3.857,506,1.586,507,1.832,509,2.399,513,2.399,518,2.24,554,1.985,555,1.484,583,2.803,584,3.388,624,1.586,641,2.399,646,3.388,651,2.708,667,3.388,701,5.946,733,3.388,809,2.708,901,2.399,1018,2.708,1020,3.823,1031,2.708,1032,3.823,1036,2.708,1037,2.708,1038,4.431,1040,2.708,1041,4.266,1042,2.708,1043,2.399,1045,3.823,1047,3.823,1048,3.823,1049,3.823,1056,2.708,1119,1.832,1121,4.815,1256,2.708,1340,2.708,1388,2.708,1396,2.708,1397,4.484,1398,3.176,1399,3.176,1400,4.484,1401,3.176,1402,3.176,1403,4.484,1404,3.176,1405,3.176,1406,3.176,1407,3.176,1408,3.176,1409,3.176,1410,3.176,1411,3.176,1412,3.176,1413,3.176,1414,3.176,1415,4.484,1416,3.176,1417,3.176,1418,5.198,1419,3.176,1420,3.176,1421,3.176]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":354,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":417,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":1389,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":480,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.6.5",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1022,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":1387,"title":{},"body":{"overview.html":{}}}],["14.0.0",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":1164,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":214,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["20m",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":1245,"title":{},"body":{"index.html":{}}}],["255",{"_index":849,"title":{},"body":{"entities/UserEntity.html":{}}}],["3.0.0",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1315,"title":{},"body":{"index.html":{}}}],["37",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1385,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1246,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":1384,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":416,"title":{},"body":{"injectables/ArticleService.html":{},"overview.html":{}}}],["6.0.0",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1386,"title":{},"body":{"overview.html":{}}}],["83",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":561,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":628,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["ability.can(useractionsenum.update",{"_index":626,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["abilitybuilder",{"_index":562,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":563,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1354,"title":{},"body":{"index.html":{}}}],["access",{"_index":588,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":1218,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1271,"title":{},"body":{"index.html":{}}}],["account",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1353,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1261,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1269,"title":{},"body":{"index.html":{}}}],["addarticletofavorites",{"_index":383,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addarticletofavorites(slug",{"_index":392,"title":{},"body":{"injectables/ArticleService.html":{}}}],["again",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":1251,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1393,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":1243,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1136,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1391,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1280,"title":{},"body":{"index.html":{}}}],["api",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":322,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isalpha()@isnotempty",{"_index":611,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isalphanumeric()@isnotempty",{"_index":833,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":828,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":315,"title":{},"body":{"classes/ArticleDto.html":{}}}],["apiproperty()@isnotempty()@isalphanumeric",{"_index":749,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":686,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isnotempty()@isfqdn",{"_index":830,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@maxlength(255",{"_index":826,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":689,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@type(undefined)@validatenested",{"_index":714,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["apiproperty({required",{"_index":318,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1346,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":263,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apitags('articles",{"_index":285,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apitags('tags",{"_index":759,"title":{},"body":{"controllers/TagController.html":{}}}],["apitags('user",{"_index":820,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1369,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":935,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":578,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1133,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1372,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1394,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":1121,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1395,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../user.decorator.ts",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":1018,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":178,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":183,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":187,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/article/article.controller.ts",{"_index":199,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["apps/api/src/article/article.controller.ts:123",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:139",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:162",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:42",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:61",{"_index":221,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:83",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:97",{"_index":258,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.entity.ts",{"_index":334,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/article.entity.ts:14",{"_index":357,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:17",{"_index":359,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:20",{"_index":363,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:23",{"_index":353,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:26",{"_index":346,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:29",{"_index":351,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:32",{"_index":364,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:35",{"_index":362,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:38",{"_index":355,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:46",{"_index":343,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.module.ts",{"_index":374,"title":{},"body":{"modules/ArticleModule.html":{}}}],["apps/api/src/article/article.service.ts",{"_index":382,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["apps/api/src/article/article.service.ts:105",{"_index":400,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:109",{"_index":396,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:129",{"_index":405,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:149",{"_index":393,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:174",{"_index":398,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:18",{"_index":390,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:198",{"_index":395,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:27",{"_index":403,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:35",{"_index":401,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/dto/articles",{"_index":486,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/create",{"_index":310,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":509,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.module.ts:43",{"_index":512,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":1031,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:16",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:35",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":684,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:14",{"_index":687,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:22",{"_index":690,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":745,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:19",{"_index":747,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:27",{"_index":750,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:35",{"_index":748,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":633,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":656,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:13",{"_index":660,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":663,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":1036,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":557,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:22",{"_index":560,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":604,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":1037,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":726,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":729,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":731,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":728,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":614,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":1040,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":1042,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":1043,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/tag/dto/create",{"_index":609,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts",{"_index":752,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts:15",{"_index":757,"title":{},"body":{"controllers/TagController.html":{}}}],["apps/api/src/tag/tag.entity.ts",{"_index":765,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.entity.ts:12",{"_index":768,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.entity.ts:9",{"_index":766,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.module.ts",{"_index":772,"title":{},"body":{"modules/TagModule.html":{}}}],["apps/api/src/tag/tag.service.ts",{"_index":776,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.service.ts:11",{"_index":779,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:18",{"_index":783,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:22",{"_index":782,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/users/dto/patch",{"_index":710,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":695,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":703,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":698,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":870,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts",{"_index":797,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts:25",{"_index":807,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.controller.ts:37",{"_index":803,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.decorator.ts",{"_index":1056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":835,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:26",{"_index":842,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:32",{"_index":864,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:38",{"_index":839,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:44",{"_index":838,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:50",{"_index":844,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:56",{"_index":859,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:68",{"_index":853,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:71",{"_index":837,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:75",{"_index":841,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:120",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:51",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:75",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:98",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":934,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":942,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:110",{"_index":957,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:132",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:148",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:42",{"_index":959,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:51",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:61",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:78",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":1172,"title":{},"body":{"index.html":{}}}],["array",{"_index":361,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{}}}],["article.author",{"_index":459,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["article.author.id",{"_index":472,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.controller",{"_index":379,"title":{},"body":{"modules/ArticleModule.html":{}}}],["article.dto",{"_index":284,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["article.dto.ts",{"_index":311,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["article.dto.ts:13",{"_index":321,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:17",{"_index":317,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:21",{"_index":316,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:28",{"_index":320,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:35",{"_index":607,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["article.entity",{"_index":380,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["article.favoritescount",{"_index":482,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":479,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.service",{"_index":280,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["article.slug",{"_index":457,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":456,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist.map((name",{"_index":465,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article/article.entity",{"_index":569,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{}}}],["article/article.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["articlecontroller",{"_index":198,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articledto",{"_index":290,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["articleentity",{"_index":333,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["articleindex",{"_index":484,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":477,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":478,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":61,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":391,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articles",{"_index":216,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["articles.map((article",{"_index":451,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":439,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleservice",{"_index":279,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesqueryparams",{"_index":249,"title":{"classes/ArticlesQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["articleswithfavorited",{"_index":450,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":937,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":634,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":639,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":642,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":522,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":814,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["auth/dto/login.dto",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/dto/register.dto",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":936,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["authenticated",{"_index":810,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticating",{"_index":1250,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authentication/authorization",{"_index":1155,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":645,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":649,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":62,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":335,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"index.html":{},"properties.html":{}}}],["author.favorites.map((el",{"_index":433,"title":{},"body":{"injectables/ArticleService.html":{}}}],["author.id",{"_index":428,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authservice",{"_index":506,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1223,"title":{},"body":{"index.html":{}}}],["await",{"_index":288,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1153,"title":{},"body":{"index.html":{}}}],["bad",{"_index":217,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":665,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":856,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":365,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["behind",{"_index":1234,"title":{},"body":{"index.html":{}}}],["below",{"_index":1190,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1266,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":875,"title":{},"body":{"entities/UserRoles.html":{}}}],["bio",{"_index":719,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["body",{"_index":259,"title":{},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["body('article",{"_index":302,"title":{},"body":{"controllers/ArticleController.html":{}}}],["boilerplate",{"_index":1149,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":622,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["bootstrap",{"_index":1044,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1159,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1272,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1362,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1170,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1382,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1076,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":581,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["buildarticleresponse",{"_index":384,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":394,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":1128,"title":{},"body":{"index.html":{}}}],["built",{"_index":1217,"title":{},"body":{"index.html":{}}}],["can(useractionsenum.delete",{"_index":594,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.manage",{"_index":585,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":590,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":593,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":636,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":640,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1302,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":882,"title":{},"body":{"entities/UserRoles.html":{}}}],["case",{"_index":790,"title":{},"body":{"injectables/TagService.html":{}}}],["casl",{"_index":570,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":605,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":566,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":375,"title":{},"body":{"modules/ArticleModule.html":{},"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":267,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":270,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":274,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["caslfactory",{"_index":372,"title":{"injectables/CaslFactory.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":63,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":789,"title":{},"body":{"injectables/TagService.html":{}}}],["cert.pem",{"_index":1313,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1301,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1304,"title":{},"body":{"index.html":{}}}],["change",{"_index":1281,"title":{},"body":{"index.html":{}}}],["check",{"_index":734,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":733,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":266,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":300,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["checks",{"_index":664,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":1171,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1274,"title":{},"body":{"index.html":{}}}],["choose",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":1141,"title":{},"body":{"index.html":{}}}],["class",{"_index":41,"title":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":309,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["clone",{"_index":1193,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":370,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":371,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":503,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":505,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":504,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":601,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":603,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":602,"title":{},"body":{"modules/CaslModule.html":{}}}],["cluster_tagmodule",{"_index":770,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_tagmodule_providers",{"_index":771,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":931,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":933,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":932,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1339,"title":{},"body":{"index.html":{}}}],["column",{"_index":358,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["column('simple",{"_index":360,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":352,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":847,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":344,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["column({unique",{"_index":767,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["comes",{"_index":1154,"title":{},"body":{"index.html":{}}}],["coming",{"_index":579,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":1203,"title":{},"body":{"index.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["compose",{"_index":1186,"title":{},"body":{"index.html":{}}}],["config",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":1140,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1360,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1213,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1248,"title":{},"body":{"index.html":{}}}],["connections",{"_index":1260,"title":{},"body":{"index.html":{}}}],["const",{"_index":291,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(articlerepository",{"_index":387,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(configservice",{"_index":659,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":181,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{}}}],["constructor(reflector",{"_index":637,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(tagrepository",{"_index":778,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["container",{"_index":1229,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1137,"title":{},"body":{"index.html":{}}}],["context",{"_index":643,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":654,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":653,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":737,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":1177,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('v1/articles",{"_index":286,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('v1/tags",{"_index":760,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('v1/user",{"_index":821,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('v1/users",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":1282,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1015,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1201,"title":{},"body":{"index.html":{}}}],["create",{"_index":215,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["createarticle",{"_index":202,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(user",{"_index":209,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticledto",{"_index":212,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["created",{"_index":877,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createdarticle",{"_index":462,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createdat",{"_index":336,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["createforuser",{"_index":558,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":559,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createparamdecorator",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('articles",{"_index":420,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createquerybuilder('users",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtag",{"_index":777,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(tag",{"_index":781,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto",{"_index":608,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["createtoken",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":460,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{}}}],["crud",{"_index":1156,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":705,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":706,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":809,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":350,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["currently",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuser",{"_index":446,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuser.favorites.map((favorite",{"_index":447,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["d",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":805,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1356,"title":{},"body":{"index.html":{}}}],["date",{"_index":347,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["date%.log",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1314,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1348,"title":{},"body":{"index.html":{}}}],["default",{"_index":349,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":526,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':slug",{"_index":304,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite",{"_index":307,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":234,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(username",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletearticle",{"_index":203,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites",{"_index":204,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":397,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlepolicyhandler",{"_index":271,"title":{"classes/DeleteArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["deletearticlepolicyhandler())@apiresponse({status",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deleted",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":627,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1328,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1233,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1174,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1139,"title":{},"body":{"index.html":{}}}],["desc",{"_index":438,"title":{},"body":{"injectables/ArticleService.html":{}}}],["describe",{"_index":1344,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":1184,"title":{},"body":{"index.html":{}}}],["detached",{"_index":1230,"title":{},"body":{"index.html":{}}}],["details",{"_index":597,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":596,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":598,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":1238,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1377,"title":{},"body":{"index.html":{}}}],["development",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":1259,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1227,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1161,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1327,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1332,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1338,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":1197,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1182,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":1166,"title":{},"body":{"index.html":{}}}],["dto",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["dto/articles",{"_index":281,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/create",{"_index":283,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["dto/patch",{"_index":815,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":791,"title":{},"body":{"injectables/TagService.html":{}}}],["dynamic",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":331,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{}}}],["eager",{"_index":342,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["edit",{"_index":257,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["edit(userid",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser",{"_index":799,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":801,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1129,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":434,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1366,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1318,"title":{},"body":{"index.html":{}}}],["employs",{"_index":854,"title":{},"body":{"entities/UserEntity.html":{}}}],["empty",{"_index":1253,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1294,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":1241,"title":{},"body":{"index.html":{}}}],["end",{"_index":1334,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1256,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":332,"title":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":873,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":1200,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1202,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1041,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagService.html":{}}}],["everything",{"_index":589,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["example",{"_index":722,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["exclude",{"_index":865,"title":{},"body":{"entities/UserEntity.html":{}}}],["exec",{"_index":1323,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":727,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":730,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":1225,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":641,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":470,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1205,"title":{},"body":{"index.html":{}}}],["exists",{"_index":795,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":681,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1258,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":510,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":1211,"title":{},"body":{"index.html":{}}}],["express",{"_index":1268,"title":{},"body":{"index.html":{}}}],["extends",{"_index":648,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1359,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":670,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":674,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":564,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":330,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":852,"title":{},"body":{"entities/UserEntity.html":{}}}],["false})@isoptional()@isint()@min(1",{"_index":495,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isint()@min(1)@max(100",{"_index":493,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring",{"_index":490,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring({each",{"_index":319,"title":{},"body":{"classes/ArticleDto.html":{}}}],["fastify",{"_index":1089,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["favorite.id",{"_index":448,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":452,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{}}}],["favoriteids",{"_index":445,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":453,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":431,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["favoritescount",{"_index":337,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["favourite",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle",{"_index":205,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle(currentuserid",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feat",{"_index":1364,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1299,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1288,"title":{},"body":{"index.html":{}}}],["features",{"_index":1157,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":755,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":960,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":688,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["fields",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1335,"title":{},"body":{"index.html":{}}}],["findbyslug",{"_index":385,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":399,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fine",{"_index":792,"title":{},"body":{"injectables/TagService.html":{}}}],["folder",{"_index":1305,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1187,"title":{},"body":{"index.html":{}}}],["following",{"_index":1226,"title":{},"body":{"index.html":{}}}],["format",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["forroot",{"_index":511,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":1127,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":697,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1333,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1373,"title":{},"body":{"index.html":{}}}],["function",{"_index":741,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1120,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1358,"title":{},"body":{"index.html":{}}}],["generate",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1306,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":295,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug')@apiresponse({status",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apiresponse({status",{"_index":250,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["get(id",{"_index":958,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarticle",{"_index":206,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(@param('slug",{"_index":296,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(slug",{"_index":244,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":207,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticles(userid",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getbyusername",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":961,"title":{},"body":{"injectables/UsersService.html":{}}}],["getone",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["getslug",{"_index":386,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":402,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getstartingmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["gettags",{"_index":754,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getting",{"_index":1122,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":800,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@request",{"_index":822,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(req",{"_index":806,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemailandpass",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemailandpass(email",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1194,"title":{},"body":{"index.html":{}}}],["github",{"_index":1325,"title":{},"body":{"index.html":{}}}],["given",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":699,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":845,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":635,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":725,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1295,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1297,"title":{},"body":{"index.html":{}}}],["handle",{"_index":618,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handle(ability",{"_index":619,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handler",{"_index":732,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":742,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":743,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":275,"title":{},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":615,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:18",{"_index":724,"title":{},"body":{"classes/PatchUserPolicyHandler.html":{}}}],["handlers.ts:24",{"_index":629,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:30",{"_index":708,"title":{},"body":{"classes/PatchArticlePolicyHandler.html":{}}}],["handlers.ts:35",{"_index":620,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{}}}],["handlers.ts:8",{"_index":631,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":700,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{}}}],["hashed",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":1134,"title":{},"body":{"index.html":{}}}],["host",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1336,"title":{},"body":{"index.html":{}}}],["http/2",{"_index":1292,"title":{},"body":{"index.html":{}}}],["http2",{"_index":1143,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":1212,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1219,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":1232,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":406,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('article",{"_index":469,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('you",{"_index":473,"title":{},"body":{"injectables/ArticleService.html":{}}}],["https",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":595,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":1195,"title":{},"body":{"index.html":{}}}],["https://gravatar.com/avatar/123",{"_index":723,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["https://typeorm.io",{"_index":1286,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":407,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.forbidden",{"_index":474,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":471,"title":{},"body":{"injectables/ArticleService.html":{}}}],["iarticleresponsebody",{"_index":264,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iarticlesresponsebody",{"_index":265,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iat",{"_index":680,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":338,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":432,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":435,"title":{},"body":{"injectables/ArticleService.html":{}}}],["igenericmessagebody",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignored",{"_index":793,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":675,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":721,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":616,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":565,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/TagService.html":{}}}],["inject(winston_module_provider",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["injectable",{"_index":176,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":177,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":408,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(articleentity",{"_index":410,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(tagentity",{"_index":785,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":411,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":1135,"title":{},"body":{"index.html":{}}}],["interface",{"_index":621,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":630,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":617,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":646,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":613,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isalphanumeric",{"_index":716,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":691,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isfqdn",{"_index":717,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["isint",{"_index":498,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["isnotempty",{"_index":324,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["isnotfavorited",{"_index":475,"title":{},"body":{"injectables/ArticleService.html":{}}}],["isoptional",{"_index":325,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["ispublic",{"_index":651,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":326,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["it's",{"_index":1244,"title":{},"body":{"index.html":{}}}],["item",{"_index":599,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":600,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["iuser",{"_index":812,"title":{},"body":{"controllers/UserController.html":{}}}],["iuserresponsebody",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["javascript",{"_index":1167,"title":{},"body":{"index.html":{}}}],["joi",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":866,"title":{},"body":{"entities/UserEntity.html":{}}}],["jwt",{"_index":527,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":523,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":632,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":673,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":514,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":677,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":507,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["keepconnectionalive",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1312,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyout",{"_index":1311,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":575,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1355,"title":{},"body":{"index.html":{}}}],["layout",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":1252,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('articles.author",{"_index":421,"title":{},"body":{"injectables/ArticleService.html":{}}}],["length",{"_index":848,"title":{},"body":{"entities/UserEntity.html":{}}}],["level",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":1284,"title":{},"body":{"index.html":{}}}],["license",{"_index":1378,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1380,"title":{},"body":{"index.html":{}}}],["limit",{"_index":488,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"dependencies.html":{}}}],["loads",{"_index":1228,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1181,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1165,"title":{},"body":{"index.html":{}}}],["located",{"_index":1303,"title":{},"body":{"index.html":{}}}],["location",{"_index":1350,"title":{},"body":{"index.html":{}}}],["logger",{"_index":182,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["logging",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":685,"title":{},"body":{"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(payload",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["logindto",{"_index":683,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logs",{"_index":1146,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["lower",{"_index":413,"title":{},"body":{"injectables/ArticleService.html":{}}}],["luckily",{"_index":1293,"title":{},"body":{"index.html":{}}}],["made",{"_index":1150,"title":{},"body":{"index.html":{}}}],["main",{"_index":1363,"title":{},"body":{"index.html":{}}}],["make",{"_index":1162,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1298,"title":{},"body":{"index.html":{}}}],["manage",{"_index":572,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":1191,"title":{},"body":{"index.html":{}}}],["many",{"_index":862,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["manytomany",{"_index":867,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":840,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytoone",{"_index":366,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":340,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1352,"title":{},"body":{"index.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":415,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":414,"title":{},"body":{"injectables/ArticleService.html":{}}}],["max",{"_index":499,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["max(100",{"_index":502,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["maxfiles",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlength",{"_index":718,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxlength(255",{"_index":720,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxsize",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["mediumtext",{"_index":345,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":679,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":500,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["min(1",{"_index":501,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["minlength",{"_index":692,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["minlength(8",{"_index":693,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{}}}],["mins",{"_index":1247,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1119,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1379,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":1208,"title":{},"body":{"index.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":1020,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":1278,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1290,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":1279,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":804,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":1173,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1273,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1254,"title":{},"body":{"index.html":{}}}],["nest",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":644,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":515,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":517,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1309,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":1235,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1126,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1316,"title":{},"body":{"index.html":{}}}],["non",{"_index":1160,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1198,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":1148,"title":{},"body":{"index.html":{}}}],["object",{"_index":667,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(article",{"_index":455,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["object.keys(payload).foreach((key",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":1264,"title":{},"body":{"index.html":{}}}],["offset",{"_index":489,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["ondelete",{"_index":881,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":861,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":868,"title":{},"body":{"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":836,"title":{},"body":{"entities/UserEntity.html":{}}}],["open",{"_index":1340,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":1045,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":1047,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":1048,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":1049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1307,"title":{},"body":{"index.html":{}}}],["operation",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":1185,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1263,"title":{},"body":{"index.html":{}}}],["optional",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":1239,"title":{},"body":{"index.html":{}}}],["os",{"_index":1376,"title":{},"body":{"index.html":{}}}],["out",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":1189,"title":{},"body":{"index.html":{}}}],["over",{"_index":1267,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1383,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1061,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1326,"title":{},"body":{"index.html":{}}}],["panel",{"_index":1178,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('slug",{"_index":301,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":956,"title":{},"body":{"injectables/UsersService.html":{}}}],["particular",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1375,"title":{},"body":{"index.html":{}}}],["passport",{"_index":671,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":516,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":525,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":669,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":672,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":869,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwords",{"_index":855,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwordtransformer",{"_index":694,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["patch",{"_index":712,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["patcharticlepolicyhandler",{"_index":272,"title":{"classes/PatchArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patcharticlepolicyhandler())@apiresponse({status",{"_index":256,"title":{},"body":{"controllers/ArticleController.html":{}}}],["patchuserdto",{"_index":709,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["patchuserpolicyhandler",{"_index":273,"title":{"classes/PatchUserPolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patchuserpolicyhandler())@apiresponse({status",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{}}}],["path",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":211,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.article",{"_index":293,"title":{},"body":{"controllers/ArticleController.html":{}}}],["payload.user",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["payload[key",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":1262,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1265,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":592,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["permit",{"_index":876,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":1158,"title":{},"body":{"index.html":{}}}],["pg",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":1206,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1296,"title":{},"body":{"index.html":{}}}],["plaintoclass(userentity",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":268,"title":{},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":1038,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":269,"title":{"guards/PoliciesGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":625,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":624,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":623,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":735,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":739,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":1216,"title":{},"body":{"index.html":{}}}],["post",{"_index":260,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["post(':slug/favorite",{"_index":305,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post('login",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apiresponse({status",{"_index":213,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":1277,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":200,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":1138,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":356,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":1188,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1331,"title":{},"body":{"index.html":{}}}],["production",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":878,"title":{},"body":{"entities/UserRoles.html":{}}}],["profiles",{"_index":879,"title":{},"body":{"entities/UserRoles.html":{}}}],["progress",{"_index":1361,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1125,"title":{},"body":{"index.html":{}}}],["project",{"_index":1222,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":463,"title":{},"body":{"injectables/ArticleService.html":{}}}],["properties",{"_index":312,"title":{"properties.html":{}},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":1152,"title":{},"body":{"index.html":{}}}],["provide",{"_index":940,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":1347,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":1237,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1371,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get('/')@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@post()@apiresponse({status",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["public.decorator",{"_index":647,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":261,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":298,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":255,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put()@apiresponse({status",{"_index":802,"title":{},"body":{"controllers/UserController.html":{}}}],["queried",{"_index":813,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":248,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":425,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.dto",{"_index":282,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.dto.ts",{"_index":487,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":497,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:17",{"_index":491,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:24",{"_index":492,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:33",{"_index":494,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:41",{"_index":496,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.favorited",{"_index":429,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.limit",{"_index":441,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.offset",{"_index":443,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":422,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":418,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1=0",{"_index":436,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":427,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":423,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":440,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":449,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.limit(query.limit",{"_index":442,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.offset(query.offset",{"_index":444,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.orderby('articles.createdat",{"_index":437,"title":{},"body":{"injectables/ArticleService.html":{}}}],["quickly",{"_index":1151,"title":{},"body":{"index.html":{}}}],["r",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1317,"title":{},"body":{"index.html":{}}}],["random",{"_index":1242,"title":{},"body":{"index.html":{}}}],["react",{"_index":1214,"title":{},"body":{"index.html":{}}}],["read",{"_index":586,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1367,"title":{},"body":{"index.html":{}}}],["received",{"_index":761,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":756,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":662,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["recordkey",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":638,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":746,"title":{},"body":{"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["register(payload",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerdto",{"_index":744,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registered",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpayload",{"_index":823,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["relational",{"_index":1351,"title":{},"body":{"index.html":{}}}],["relations",{"_index":430,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":863,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1374,"title":{},"body":{"index.html":{}}}],["remark",{"_index":573,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":1204,"title":{},"body":{"index.html":{}}}],["repo",{"_index":1147,"title":{},"body":{"index.html":{}}}],["repository",{"_index":388,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":860,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":576,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":811,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":580,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UserController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":218,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[recordkey",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":329,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"index.html":{}}}],["reset",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":1207,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1196,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1345,"title":{},"body":{"index.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":808,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":1236,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1289,"title":{},"body":{"index.html":{}}}],["role",{"_index":583,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":520,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":871,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":872,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":874,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":883,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":858,"title":{},"body":{"entities/UserEntity.html":{}}}],["roles",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["rsa:4096",{"_index":1310,"title":{},"body":{"index.html":{}}}],["run",{"_index":1210,"title":{},"body":{"index.html":{}}}],["running",{"_index":1320,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":1168,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1255,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1390,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":1130,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":591,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["seconds",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":676,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":851,"title":{},"body":{"entities/UserEntity.html":{}}}],["self",{"_index":1300,"title":{},"body":{"index.html":{}}}],["served",{"_index":1224,"title":{},"body":{"index.html":{}}}],["server",{"_index":1131,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('email",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1132,"title":{},"body":{"index.html":{}}}],["signed",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":230,"title":{},"body":{"controllers/ArticleController.html":{}}}],["sits",{"_index":1257,"title":{},"body":{"index.html":{}}}],["slug",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["slugify",{"_index":409,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":412,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1319,"title":{},"body":{"index.html":{}}}],["special",{"_index":574,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1342,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1276,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1285,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1175,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":1183,"title":{},"body":{"index.html":{}}}],["start",{"_index":1180,"title":{},"body":{"index.html":{}}}],["started",{"_index":1123,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":1124,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["startingmessage",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["statements",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1270,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":657,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":577,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":571,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":650,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":655,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1370,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1287,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1275,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1163,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1381,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1341,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":1060,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":424,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tag.controller",{"_index":773,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":784,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.dto.ts",{"_index":610,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:8",{"_index":612,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":774,"title":{},"body":{"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["tag.name",{"_index":764,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tag.service",{"_index":758,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.entity",{"_index":377,"title":{},"body":{"modules/ArticleModule.html":{}}}],["tag/tag.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":378,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["tagcontroller",{"_index":751,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":376,"title":{"entities/TagEntity.html":{}},"body":{"modules/ArticleModule.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":313,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["tagmodule",{"_index":64,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":780,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":461,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":763,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":373,"title":{"injectables/TagService.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1365,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1220,"title":{},"body":{"index.html":{}}}],["test",{"_index":1324,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":1144,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1322,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1291,"title":{},"body":{"index.html":{}}}],["this.appservice.startingmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":419,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":454,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":464,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":294,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":292,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":308,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":297,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticles(userid",{"_index":289,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":303,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.authservice.createtoken(user",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.caslfactory.createforuser(user",{"_index":738,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":740,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyslug(slug",{"_index":467,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.get(userid",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(payload.username",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getslug(payload.title",{"_index":458,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.getuserbyemailandpass(email",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`tag",{"_index":794,"title":{},"body":{"injectables/TagService.html":{}}}],["this.logger.info('calling",{"_index":191,"title":{},"body":{"injectables/AppService.html":{}}}],["this.reflector.get",{"_index":736,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":652,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tagrepository.find",{"_index":786,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(article",{"_index":788,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.createtag",{"_index":466,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagservice.gettags",{"_index":762,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":369,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["this.userrepository",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":993,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":426,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":483,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(username",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(userid",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validateuser(payload",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":468,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":682,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timestamp",{"_index":348,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["title",{"_index":314,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["to(value",{"_index":702,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["token",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tokens",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["transform",{"_index":704,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":323,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["transports",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1179,"title":{},"body":{"index.html":{}}}],["true",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["true})@type(undefined)@validatenested",{"_index":606,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["try",{"_index":787,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1392,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":1145,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1330,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1337,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":513,"title":{},"body":{"modules/AuthModule.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":367,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/PasswordTransformer.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([articleentity",{"_index":381,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":775,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":524,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1329,"title":{},"body":{"index.html":{}}}],["ui",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":668,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":850,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["unfavourite",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{}}}],["unique",{"_index":769,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1321,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/TagController.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1231,"title":{},"body":{"index.html":{}}}],["updatearticle",{"_index":208,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":404,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":254,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatedat",{"_index":339,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["updatetimestamp",{"_index":368,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["url",{"_index":846,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":994,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":1249,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":941,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1343,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":262,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":299,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.articles",{"_index":341,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.bio",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.controller",{"_index":938,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.decorator",{"_index":817,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":816,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":711,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":829,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:28",{"_index":834,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:36",{"_index":827,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:45",{"_index":831,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:53",{"_index":832,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:63",{"_index":715,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.email",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":818,"title":{},"body":{"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.favorites.findindex",{"_index":476,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":481,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":485,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.image",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.roles",{"_index":880,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":582,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["user[key",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":567,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["usercontroller",{"_index":796,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdto",{"_index":713,"title":{"classes/UserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":210,"title":{"entities/UserEntity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":252,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userparam",{"_index":276,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userparam('id",{"_index":287,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["userrepository",{"_index":389,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1032,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":518,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":568,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":584,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":939,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":819,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":519,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.decorator",{"_index":277,"title":{},"body":{"controllers/ArticleController.html":{}}}],["users/user.entity",{"_index":278,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["users/users.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":521,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":884,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":65,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":508,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1209,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1240,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":843,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["v1/articles",{"_index":201,"title":{},"body":{"controllers/ArticleController.html":{}}}],["v1/tags",{"_index":753,"title":{},"body":{"controllers/TagController.html":{}}}],["v1/user",{"_index":798,"title":{},"body":{"controllers/UserController.html":{}}}],["v1/users",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":666,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":658,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(undefined",{"_index":661,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":327,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["validates",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(undefined",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["validation",{"_index":678,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":328,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"dependencies.html":{}}}],["value",{"_index":701,"title":{},"body":{"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":707,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":696,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":1019,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1396,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1388,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":1169,"title":{},"body":{"index.html":{}}}],["view",{"_index":1357,"title":{},"body":{"index.html":{}}}],["vue",{"_index":1215,"title":{},"body":{"index.html":{}}}],["web",{"_index":1142,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["welcomemessage",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["where('users.email",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":1221,"title":{},"body":{"index.html":{}}}],["winston",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":188,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["winstonfilerotator",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":1192,"title":{},"body":{"index.html":{}}}],["work",{"_index":1349,"title":{},"body":{"index.html":{}}}],["world",{"_index":1368,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1283,"title":{},"body":{"index.html":{}}}],["write",{"_index":587,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":857,"title":{},"body":{"entities/UserEntity.html":{}}}],["x509",{"_index":1308,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":1176,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1199,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["zippedarchive",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getStartingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStartingMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStartingMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('/')@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get('/')\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getStartingMessage(): Promise {\n    return this.appService.startingMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArticleModule } from './article/article.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { TagModule } from './tag/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule.forRoot(),\n    UsersModule,\n    CaslModule,\n    TagModule,\n    ArticleModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                startingMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        startingMessage\n                        \n                    \n                \n            \n            \n                \nstartingMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  startingMessage(): IMessage {\n    this.logger.info('Calling welcomeMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                favouriteArticle\n                            \n                            \n                                    Async\n                                getArticle\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: 201, description: 'Create Articles Request Completed'})@ApiResponse({status: 400, description: 'Create Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:61\n                \n            \n\n\n            \n                \n                    Route to create an article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    payload\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteArticlePolicyHandler())@ApiResponse({status: 201, description: 'Delete Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:123\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfavourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Unfavourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        favouriteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    favouriteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Favourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Favourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiResponse({status: 201, description: 'Get Article Request Completed'})@ApiResponse({status: 400, description: 'Get Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:83\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(userId: number, query: ArticlesQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 201, description: 'Get Articles Request Completed'})@ApiResponse({status: 400, description: 'Get Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchArticlePolicyHandler())@ApiResponse({status: 201, description: 'Edit Article Request Completed'})@ApiResponse({status: 400, description: 'Edit Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport {\n  DeleteArticlePolicyHandler,\n  PatchArticlePolicyHandler,\n  PatchUserPolicyHandler,\n} from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleService } from './article.service';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { CreateArticleDto } from './dto/create-article.dto';\n\n@ApiBearerAuth()\n@ApiTags('articles')\n@Controller('v1/articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Get()\n  @ApiResponse({ status: 201, description: 'Get Articles Request Completed' })\n  @ApiResponse({ status: 400, description: 'Get Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticles(\n    @UserParam('id') userId: number,\n    @Query()\n    query: ArticlesQueryParams,\n  ): Promise {\n    return await this.articleService.getArticles(userId, query);\n  }\n\n  /**\n   * Route to create an article\n   * @param {ArticleDto} payload the article dto\n   */\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Create Articles Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Create Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async createArticle(\n    @UserParam() user: UserEntity,\n    @Body() payload: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      user,\n      payload.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Get(':slug')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticle(@Param('slug') slug: string): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Put(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Edit Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Edit Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body('article') updateArticleDto: CreateArticleDto,\n  ) {\n    const article = await this.articleService.updateArticle(\n      slug,\n      updateArticleDto,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Delete(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Delete Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticle(\n    @Param('slug') slug: string,\n  ): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Favourite an Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Favourite an Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async favouriteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfavourite an Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfavourite an Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticleFromFavorites(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                tagList\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty({ required: true })\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                favoritesCount\n                            \n                            \n                                id\n                            \n                            \n                                slug\n                            \n                            \n                                tagList\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'mediumtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Default description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: 'Default description' })\n  description: string;\n\n  @Column({ type: 'mediumtext' })\n  body: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEntity, (user) => user.articles, { eager: true })\n  author: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                        \n                            CaslFactory\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { TagEntity } from '../tag/tag.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleController } from './article.controller';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleService } from './article.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ArticleEntity, UserEntity, TagEntity])],\n  controllers: [ArticleController],\n  providers: [ArticleService, CaslFactory, TagService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/article/article.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IArticleResponseBody\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(userId: number, query: ArticlesQueryParams)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, updateArticleDto: CreateArticleDto, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport slugify from 'slugify';\nimport { Repository } from 'typeorm';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { ArticleDto, CreateArticleDto } from './dto/create-article.dto';\n\n@Injectable()\nexport class ArticleService {\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    private readonly tagService: TagService,\n  ) {}\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n\n  async getArticles(\n    userId: number,\n    query: ArticlesQueryParams,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author');\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      queryBuilder.andWhere('articles.authorId = :id', {\n        id: author.id,\n      });\n    }\n\n    if (query.favorited) {\n      const author = await this.userRepository.findOne({\n        where: {\n          username: query.favorited,\n        },\n        relations: ['favorites'],\n      });\n      const ids = author.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.authorId IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1=0');\n      }\n    }\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    let favoriteIds: number[] = [];\n\n    if (userId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: userId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articles = await queryBuilder.getMany();\n    const articlesWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articlesWithFavorited, articlesCount };\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({ where: { slug } });\n  }\n\n  async createArticle(\n    user: UserEntity,\n    payload: ArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, payload);\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n    article.slug = this.getSlug(payload.title);\n    article.author = user;\n\n    // Creating tags from tagList\n    const [createdArticle] = await Promise.all([\n      this.articleRepository.save(article),\n      ...article.tagList.map((name) => this.tagService.createTag({ name })),\n    ]);\n    return createdArticle;\n  }\n\n  async updateArticle(\n    slug: string,\n    updateArticleDto: CreateArticleDto,\n    currentUserId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, updateArticleDto);\n\n    return await this.articleRepository.save(article);\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex >= 0) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  buildArticleResponse(article: ArticleEntity): IArticleResponseBody {\n    return { article };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesQueryParams.html":{"url":"classes/ArticlesQueryParams.html","title":"class - ArticlesQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/articles-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                favorited\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsOptional, IsString, Max, Min } from 'class-validator';\n\nexport class ArticlesQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  tag: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  author: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  favorited: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsInt()\n  @Min(1)\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { module: typeof AuthModule; providers: {}; }\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\nconst providers = [AuthService, JwtStrategy];\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [...providers, UsersService],\n  controllers: [],\n  exports: providers,\n})\nexport class AuthModule {\n  static forRoot() {\n    return {\n      module: AuthModule,\n      providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserEntity } from '../users/user.entity';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {UserEntity} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  createToken({ id, username, roles, email }: UserEntity): string {\n    return this.jwtService.sign({\n      id,\n      username,\n      roles,\n      email,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: UserEntity) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    // User scoped permissions\n    can(UserActionsEnum.Update, ArticleEntity, { author: user });\n    can(UserActionsEnum.Delete, ArticleEntity, { author: user });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty({ required: true })\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlpha()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/dto/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlpha, IsNotEmpty } from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsAlpha()\n  @IsNotEmpty()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteArticlePolicyHandler.html":{"url":"classes/DeleteArticlePolicyHandler.html","title":"class - DeleteArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {UsersService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate({\n    iat,\n    exp,\n    id,\n  }: Record): Promise {\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:14\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:22\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class LoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchArticlePolicyHandler.html":{"url":"classes/PatchArticlePolicyHandler.html","title":"class - PatchArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPolicyHandler.html":{"url":"classes/PatchUserPolicyHandler.html","title":"class - PatchUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:19\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:35\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsAlphanumeric()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:27\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class RegisterDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 200, description: 'Fetch Tags Request Received'})@ApiResponse({status: 400, description: 'Fetch Tags Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/tag/tag.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { TagService } from './tag.service';\n\n@ApiBearerAuth()\n@ApiTags('tags')\n@Controller('v1/tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Get()\n  @ApiResponse({ status: 200, description: 'Fetch Tags Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Tags Request Failed' })\n  async getTags() {\n    const tags = await this.tagService.getTags();\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Tag Entity Class\n */\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TagController } from './tag.controller';\nimport { TagEntity } from './tag.entity';\nimport { TagService } from './tag.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/tag/tag.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(tag: CreateTagDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                CreateTagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Repository } from 'typeorm';\nimport { Logger } from 'winston';\n\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { TagEntity } from './tag.entity';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  async getTags(): Promise {\n    return await this.tagRepository.find();\n  }\n\n  async createTag(tag: CreateTagDto): Promise {\n    try {\n      const article = new TagEntity();\n      Object.assign(article, tag);\n      return await this.tagRepository.save(article);\n    } catch (error) {\n      // Error case is likely a duplicate tag which is fine to be ignored\n      this.logger.debug(`Tag ${tag.name} exists, so not creating duplicate`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponse({status: 200, description: 'Put User Request Received'})@ApiResponse({status: 400, description: 'Put User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:25\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IUser\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Request } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IUser } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserParam } from './user.decorator';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('v1/user')\nexport class UserController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n  /**\n   * Retrieves current authenticated user\n   * @returns {IUser} queried user data\n   */\n  @Get()\n  getUser(@Request() req): IUser {\n    return req.user as IUser;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Put()\n  @ApiResponse({ status: 200, description: 'Put User Request Received' })\n  @ApiResponse({ status: 400, description: 'Put User Request Failed' })\n  async editUser(\n    @UserParam('id') userId: number,\n    @Body() payload: PatchUserDto,\n  ): Promise {\n    return this.usersService.edit(userId, payload.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bio\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                image\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    Bio field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsFQDN()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    Image field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsAlphanumeric()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsFQDN,\n  IsNotEmpty,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsNotEmpty()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsAlphanumeric()\n  @IsNotEmpty()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MaxLength(255)\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsFQDN()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                bio\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:44\n                        \n                    \n\n            \n                \n                    Bio column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:38\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:26\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:68\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:56\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:32\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Bio column\n   */\n  @Column({ default: '' })\n  bio: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  image: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { UserEntity } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => UserEntity, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                v1/users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:120\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:98\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody, IUserResponseBody } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('v1/users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param usersService\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post()\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(\n    @Body() payload: RegisterDto,\n  ): Promise> {\n    const user = await this.usersService.create(payload);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() payload: LoginDto,\n  ): Promise> {\n    const user = await this.usersService.validateUser(payload);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { UserController } from './user.controller';\nimport { UserEntity } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRoles]), AuthModule],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController, UserController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getUserByEmailAndPass\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:148\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(userId: number, payload: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailAndPass\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailAndPass(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:132\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { UserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { UserEntity } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getUserByEmailAndPass(email: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.email = :email and users.password = :password')\n      .setParameter('email', email)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {RegisterDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: RegisterDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        image: url(payload.email, {\n          protocol: 'https',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {Partial} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(userId: number, payload: Partial): Promise {\n    const user = await this.get(userId);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ email, password }: LoginDto): Promise {\n    const user = await this.getUserByEmailAndPass(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/articles-query.dto.ts\n            \n            class\n            ArticlesQueryParams\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            ArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            UserDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.decorator.ts\n            \n            variable\n            UserParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            slugify : ^1.6.5\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            providers   (apps/.../auth.module.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            UserParam   (apps/.../user.decorator.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthService, JwtStrategy]\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserEntity, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserParam\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (recordKey: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    if (!request.user) {\n      null;\n    }\n\n    if (recordKey) {\n      return request.user[recordKey as keyof typeof request.user];\n    }\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
