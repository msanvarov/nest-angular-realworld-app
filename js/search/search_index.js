var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.488,1,2.61]],["body/controllers/AppController.html",[0,2.621,1,3.887,2,1.694,3,0.208,4,0.208,5,0.138,6,3.653,7,1.686,8,4.759,9,0.282,10,1.374,11,2.471,12,5.654,13,0.955,14,0.019,15,3.262,16,3.11,17,6.573,18,3.453,19,2.97,20,3.328,21,3.582,22,0.361,23,4.247,24,1.625,25,5.654,26,5.049,27,2.599,28,0.334,29,1.001,30,3.328,31,3.71,32,1.208,33,3.653,34,1.611,35,1.461,36,4.085,37,3.653,38,3.328,39,2.97,40,0.208,41,0.166,42,1.88,43,1.986,44,2.543,45,2.377,46,1.208,47,0.747,48,3.11,49,2.737,50,1.001,51,4.247,52,0.013,53,0.013]],["title/modules/AppModule.html",[54,1.347,55,2.61]],["body/modules/AppModule.html",[1,3.462,2,1.656,3,0.242,4,0.137,5,0.135,14,0.019,28,0.354,29,0.66,36,3.669,37,2.407,40,0.137,41,0.109,44,3.279,47,0.492,50,0.979,52,0.01,53,0.01,54,1.499,55,5.094,56,1.308,57,1.838,58,2.407,59,2.407,60,2.407,61,3.949,62,3.502,63,3.949,64,3.949,65,3.949,66,3.949,67,2.181,68,1.47,69,1.385,70,2.798,71,2.055,72,3.502,73,4.71,74,4.655,75,1.803,76,2.798,77,2.407,78,2.149,79,1.675,80,4.151,81,1.239,82,4.258,83,2.798,84,1.803,85,3.529,86,2.798,87,2.798,88,4.151,89,2.407,90,2.407,91,2.798,92,2.798,93,2.407,94,2.798,95,2.798,96,2.798,97,2.798,98,2.798,99,2.798,100,2.798,101,2.407,102,2.798,103,3.189,104,2.798,105,2.407,106,2.798,107,2.407,108,2.798,109,2.407,110,2.798,111,2.407,112,2.798,113,2.407,114,2.798,115,2.407,116,2.798,117,2.407,118,2.798,119,2.407,120,2.798,121,2.798,122,3.462,123,4.258,124,2.407,125,2.798,126,2.798,127,2.798,128,1.957,129,2.798,130,0.203,131,2.798,132,2.798,133,2.798,134,2.798,135,2.798,136,1.116,137,2.798,138,1.239,139,2.798,140,1.803,141,2.798,142,1.47,143,2.798,144,2.798,145,2.798,146,4.151,147,3.571,148,2.798,149,2.424,150,2.149,151,2.798,152,2.798,153,4.949,154,5.476,155,4.151,156,4.151,157,1.026,158,4.151,159,2.184,160,4.151,161,4.151,162,2.798,163,4.151,164,2.798,165,2.407,166,2.798,167,2.798,168,2.798,169,2.798,170,2.798,171,2.798,172,2.798,173,2.798,174,2.798,175,2.798,176,2.798,177,2.798]],["title/injectables/AppService.html",[36,2.234,178,1.062]],["body/injectables/AppService.html",[3,0.211,4,0.211,5,0.14,7,1.389,9,0.287,10,1.389,12,5.899,14,0.019,22,0.478,24,1.635,25,5.899,26,5.268,28,0.324,29,1.018,33,5.372,34,1.637,35,1.485,36,3.364,40,0.211,41,0.168,42,2.928,43,2.018,44,3.961,46,1.228,47,0.759,50,1.018,52,0.013,53,0.013,84,2.782,85,3.621,122,3.019,130,0.313,150,4.315,178,1.598,179,2.018,180,3.713,181,4.832,182,4.317,183,5.576,184,4.317,185,1.228,186,0.839,187,1.118,188,4.317,189,3.713,190,3.713,191,2.137,192,4.317,193,4.317,194,3.019,195,4.317,196,3.713,197,3.316]],["title/classes/ArticleCommentDto.html",[41,0.146,198,2.405]],["body/classes/ArticleCommentDto.html",[3,0.246,4,0.246,5,0.164,9,0.334,13,1.131,14,0.018,22,0.428,28,0.328,32,1.431,40,0.303,41,0.273,47,1.088,52,0.015,53,0.015,130,0.486,198,4.508,199,1.431,200,3.988,201,2.893,202,3.863,203,1.53,204,3.134,205,5.029,206,5.029,207,2.673,208,2.006,209,3.463,210,2.893,211,1.907,212,3.241,213,3.011]],["title/controllers/ArticleController.html",[0,1.488,214,2.61]],["body/controllers/ArticleController.html",[0,0.519,2,0.519,3,0.064,4,0.064,5,0.042,7,1.849,9,0.086,10,0.554,11,2.772,13,1.229,14,0.018,15,1,16,1.962,18,3.652,19,3.824,20,3.898,22,0.465,24,1.352,27,2.019,28,0.287,29,0.307,30,1.342,31,4.179,32,0.37,34,0.494,35,0.448,38,1.342,39,0.911,40,0.064,41,0.051,43,1.639,45,0.729,46,0.37,47,1.179,48,3.89,49,3.524,50,1.289,52,0.005,53,0.005,130,0.396,157,1.067,185,1.556,186,1.063,187,1.417,201,3.431,204,1.639,212,2.979,213,2.366,214,1.567,215,1.12,216,0.839,217,3.571,218,2.95,219,2.538,220,2.538,221,2.538,222,2.538,223,2.95,224,2.241,225,2.538,226,2.241,227,2.538,228,2.538,229,1.302,230,1.09,231,5.339,232,1.302,233,3.015,234,4.797,235,3.505,236,5,237,4.2,238,5,239,5,240,1.302,241,2.732,242,1.12,243,1.842,244,2.979,245,1.302,246,3.019,247,1.302,248,3.714,249,1.254,250,1.302,251,2.219,252,1.302,253,1.302,254,2.857,255,1.302,256,3.505,257,4.311,258,1.302,259,1.302,260,3.505,261,1.302,262,1.302,263,3.015,264,1.302,265,1.302,266,1.302,267,1.302,268,3.505,269,1.302,270,1.302,271,1.302,272,1.302,273,1.12,274,2.259,275,1.302,276,4.392,277,1.302,278,1.302,279,2.259,280,1.302,281,1.12,282,2.259,283,1.302,284,3.505,285,1.302,286,1.302,287,2.95,288,1.302,289,1.302,290,2.693,291,1.302,292,1.722,293,1.12,294,1,295,0.839,296,1.12,297,1.12,298,0.839,299,1,300,0.911,301,0.729,302,0.911,303,1.178,304,1.178,305,1.956,306,1,307,0.609,308,1.902,309,1.12,310,0.47,311,1.767,312,1.12,313,1.12,314,1.12,315,1.12,316,1.12,317,1.722,318,1.12,319,1.12,320,1.302,321,1.302,322,2.707,323,1.302,324,1.302,325,3.316,326,1.302,327,0.78,328,1.637,329,1.302,330,1.302,331,3.951,332,1.302,333,1.302,334,1.302,335,1.302,336,3.316,337,3.316,338,4.317,339,1.302,340,1.302,341,1.302,342,1.302,343,1.302,344,1.302,345,1.302,346,1.302,347,1.302,348,1.302,349,1.302,350,1.302,351,1.302,352,1.302,353,1.302,354,1.302,355,1.302,356,1.302]],["title/classes/ArticleDto.html",[41,0.146,327,2.234]],["body/classes/ArticleDto.html",[3,0.215,4,0.215,5,0.143,7,1.558,9,0.292,13,1.498,14,0.018,22,0.567,28,0.308,32,1.252,40,0.278,41,0.26,47,1.281,52,0.013,53,0.013,130,0.512,149,2.518,187,1.474,199,1.252,200,4.447,201,2.057,203,1.406,204,2.947,207,2.937,208,1.755,210,2.659,211,1.669,244,2.836,327,3.99,357,3.38,358,4.408,359,4.408,360,4.4,361,4.4,362,3.38,363,4.4,364,4.4,365,4.4,366,3.406,367,3.978,368,2.836,369,2.057,370,3.785]],["title/entities/ArticleEntity.html",[371,1.488,372,1.488]],["body/entities/ArticleEntity.html",[3,0.159,4,0.159,5,0.106,7,1.535,9,0.216,13,1.594,14,0.019,22,0.603,28,0.264,40,0.159,41,0.127,47,1.232,52,0.011,53,0.011,130,0.527,142,1.708,149,2.601,157,1.144,159,1.296,186,0.632,203,1.144,204,2.521,213,2.772,217,2.273,230,1.385,231,4.142,251,2.021,279,3.475,310,1.174,358,3.771,359,3.771,369,2.165,371,1.846,372,1.846,373,2.796,374,3.018,375,4.638,376,5.392,377,2.264,378,4.638,379,2.497,380,4.629,381,5.876,382,3.982,383,3.25,384,4.142,385,4.629,386,3.25,387,3.288,388,2.796,389,3.982,390,3.25,391,5.342,392,5.055,393,3.568,394,5.055,395,3.25,396,3.982,397,3.25,398,3.556,399,3.25,400,3.229,401,3.25,402,4.196,403,3.25,404,4.629,405,4.629,406,3.25,407,3.25,408,3.25,409,3.982,410,3.556,411,3.982,412,1.296,413,2.497,414,2.796,415,2.796]],["title/classes/ArticleFeedQueryParams.html",[41,0.146,282,2.405]],["body/classes/ArticleFeedQueryParams.html",[3,0.243,4,0.243,5,0.161,9,0.329,13,1.38,14,0.018,22,0.522,28,0.3,32,1.412,40,0.243,41,0.239,52,0.015,53,0.015,130,0.445,199,1.412,203,1.517,207,2.657,211,1.882,251,2.394,282,3.955,362,4.713,366,3.989,367,4.66,368,3.955,369,2.869,416,5.731,417,4.267,418,5.118,419,5.731,420,5.278,421,4.961,422,4.961]],["title/modules/ArticleModule.html",[54,1.347,61,2.405]],["body/modules/ArticleModule.html",[2,2.258,3,0.214,4,0.214,5,0.142,14,0.019,28,0.366,29,1.03,40,0.214,41,0.17,52,0.013,53,0.013,54,2.044,56,2.043,57,2.506,61,4.781,67,2.974,68,2.295,69,2.162,71,2.802,72,2.616,79,2.616,81,1.934,214,4.393,230,1.335,310,1.577,311,4.223,312,3.758,372,2.258,387,3.168,413,3.356,423,3.758,424,3.758,425,3.491,426,3.706,427,4.368,428,3.356,429,3.168,430,3.758,431,3.39,432,4.368,433,3.758,434,4.368,435,3.356,436,4.368]],["title/injectables/ArticleService.html",[178,1.062,311,2.234]],["body/injectables/ArticleService.html",[3,0.064,4,0.064,5,0.042,9,0.087,10,0.555,11,2.773,14,0.019,22,0.517,24,1.452,27,2.746,28,0.287,29,0.307,34,0.495,35,0.448,40,0.064,41,0.051,42,0.993,46,1.39,47,1.2,50,1.433,52,0.005,53,0.005,81,0.577,130,0.434,136,0.895,149,0.577,157,1.31,159,2.037,178,0.638,179,0.61,183,2.695,185,1.702,186,1.182,187,1.549,191,2.708,198,2.261,201,2.921,203,0.555,213,2.101,217,2.766,219,2.541,220,1.93,221,2.541,222,2.541,225,2.541,227,1.93,228,2.541,230,1.091,231,4.594,241,1.964,242,1.122,243,2.953,251,2.292,254,0.73,257,3.708,263,3.717,273,1.122,274,2.261,276,3.402,279,0.84,281,1.93,282,2.261,296,2.541,297,1.122,310,0.471,311,1.344,313,1.122,314,1.122,315,1.122,316,1.122,317,1.724,318,1.122,319,1.122,322,3.395,327,2.77,328,2.614,358,0.912,359,0.912,372,1.577,374,2.589,377,1.943,387,2.418,389,1.93,393,0.685,398,2.269,412,0.52,413,1.002,426,2.431,429,0.73,430,1.122,433,1.122,435,1.002,437,1.122,438,2.954,439,2.244,440,2.244,441,2.954,442,2.244,443,2.244,444,2.244,445,1.304,446,4.024,447,2.269,448,2.541,449,2.954,450,2.244,451,2.244,452,1.304,453,4.737,454,1.304,455,2.244,456,1.304,457,2.244,458,1.304,459,1.304,460,1.304,461,1.304,462,2.244,463,1.304,464,1.304,465,1.304,466,1.304,467,1.304,468,2.244,469,1.304,470,1.304,471,1.304,472,2.244,473,1.304,474,1.304,475,2.244,476,1.304,477,1.304,478,1.304,479,1.002,480,2.244,481,1.93,482,1.122,483,0.912,484,1.93,485,1.304,486,1.002,487,1.122,488,1.304,489,1.304,490,1.304,491,1.304,492,1.304,493,1.122,494,1.304,495,2.244,496,2.244,497,2.244,498,2.244,499,2.244,500,1.304,501,1.569,502,2.244,503,3.319,504,2.244,505,1.304,506,2.244,507,3.402,508,3.402,509,3.954,510,1.304,511,1.304,512,1.304,513,1.304,514,2.244,515,2.244,516,3.954,517,2.244,518,2.244,519,2.244,520,2.244,521,2.244,522,2.244,523,1.304,524,1.304,525,1.304,526,2.244,527,2.244,528,1.304,529,1.93,530,1.304,531,1.304,532,1.122,533,1.304,534,1.002,535,1.304,536,2.244,537,1.304,538,1.304,539,1.304,540,1.93,541,2.244,542,1.304,543,1.304,544,1.122,545,1.002,546,1.002,547,2.244,548,1.304,549,3.954,550,1.304,551,1.304,552,4.626,553,2.766,554,2.244,555,1.724,556,2.541,557,2.244,558,2.244,559,2.244,560,1.304,561,1.304,562,1.304,563,2.244,564,2.244,565,2.244,566,2.244,567,2.244,568,3.236,569,1.304,570,2.244,571,2.541,572,1.122,573,1.304,574,1.122,575,1.304,576,2.244,577,1.304,578,1.304,579,1.304,580,2.244,581,1.304,582,1.304,583,1.304,584,1.304,585,1.304,586,1.304,587,2.244,588,1.304]],["title/classes/ArticlesQueryParams.html",[41,0.146,274,2.405]],["body/classes/ArticlesQueryParams.html",[3,0.209,4,0.209,5,0.139,9,0.283,13,1.536,14,0.018,22,0.581,28,0.273,32,1.214,40,0.209,41,0.218,47,1.232,52,0.013,53,0.013,130,0.495,199,1.214,203,1.378,207,2.795,211,1.618,251,2.265,274,3.593,362,5.248,366,4.196,367,4.901,368,4.403,369,3.195,374,3.475,418,4.77,419,5.342,420,5.877,501,4.343,529,5.342,589,6.028,590,3.67,591,4.266,592,4.266,593,4.266,594,4.266,595,4.266]],["title/modules/AuthModule.html",[54,1.347,62,2.234]],["body/modules/AuthModule.html",[2,1.481,3,0.182,4,0.182,5,0.121,10,0.918,11,1.481,14,0.019,22,0.316,24,0.918,28,0.352,29,0.875,40,0.182,41,0.145,50,1.198,52,0.012,53,0.012,54,2.248,56,1.736,57,2.249,62,4.445,67,2.669,68,1.95,69,1.837,71,3.412,72,3.042,73,4.981,74,4.355,75,2.393,78,3.902,79,2.223,81,1.643,122,2.596,123,3.193,230,0.875,251,1.277,310,1.34,328,1.408,596,3.193,597,3.193,598,3.193,599,4.069,600,4.353,601,3.148,602,2.852,603,4.369,604,5.79,605,3.712,606,2.852,607,3.712,608,2.852,609,3.712,610,2.596,611,2.669,612,3.712,613,2.596,614,3.193,615,3.712,616,3.712,617,2.852,618,3.712,619,3.712,620,2.393,621,3.712,622,3.712,623,3.193,624,3.712,625,5.079,626,3.712]],["title/injectables/AuthService.html",[178,1.062,599,2.088]],["body/injectables/AuthService.html",[3,0.183,4,0.183,5,0.121,7,1.261,9,0.248,10,1.261,14,0.019,22,0.494,24,1.261,27,1.746,28,0.305,29,0.881,40,0.183,41,0.146,42,2.763,43,2.919,44,3.913,46,1.859,47,0.897,50,0.881,52,0.012,53,0.012,74,4.829,75,2.407,130,0.452,136,2.034,157,1.261,178,1.451,179,1.746,185,1.451,186,0.992,187,1.321,191,3.234,203,1.261,204,2.385,230,1.541,243,2.68,249,2.09,251,1.998,310,1.348,377,2.142,599,2.855,601,2.385,608,2.869,620,4.023,627,3.213,628,3.918,629,5.809,630,5.809,631,3.735,632,7.028,633,5.101,634,3.735,635,3.735,636,4.388,637,3.918,638,4.45,639,4.388,640,4.388,641,4.388,642,4.388,643,2.612,644,3.735,645,3.735,646,3.213,647,3.287,648,2.258,649,3.735]],["title/injectables/CaslFactory.html",[178,1.062,425,1.847]],["body/injectables/CaslFactory.html",[3,0.193,4,0.193,5,0.129,9,0.263,10,1.31,14,0.019,22,0.336,24,0.977,28,0.326,29,0.932,34,1.499,35,1.823,40,0.259,41,0.154,50,0.932,52,0.013,53,0.013,130,0.463,157,1.647,159,1.577,178,1.508,179,1.848,185,1.125,186,0.768,187,1.024,199,1.125,230,1.571,310,1.427,328,1.499,372,2.385,374,2.966,377,1.66,425,2.623,545,3.036,650,3.036,651,5.3,652,5.3,653,3.953,654,3.142,655,5.3,656,5.3,657,5.3,658,4.559,659,3.4,660,2.367,661,3.4,662,2.212,663,5.3,664,4.559,665,3.953,666,4.071,667,3.953,668,3.953,669,3.953,670,5.3,671,2.077,672,3.953,673,3.4,674,5.3,675,3.953,676,3.416,677,3.036,678,3.953,679,5.144,680,3.953,681,4.559,682,4.559,683,3.953,684,3.953,685,3.953,686,5.3,687,3.4,688,3.953,689,3.953,690,3.953,691,3.4,692,3.953,693,3.953,694,3.953]],["title/modules/CaslModule.html",[54,1.347,63,2.405]],["body/modules/CaslModule.html",[3,0.252,4,0.252,5,0.168,14,0.018,28,0.308,29,1.216,40,0.252,41,0.201,52,0.015,53,0.015,54,2.269,56,2.411,57,2.782,63,4.799,67,3.301,68,2.709,69,2.552,71,3.11,425,3.803,603,5.405,695,4.436,696,5.156,697,4.436,698,5.156,699,2.886]],["title/entities/CommentEntity.html",[371,1.488,387,2.088]],["body/entities/CommentEntity.html",[3,0.188,4,0.188,5,0.125,9,0.255,13,1.529,14,0.019,22,0.578,28,0.288,40,0.188,41,0.15,47,0.913,52,0.012,53,0.012,130,0.513,142,2.016,157,1.284,159,1.53,186,0.746,201,3.084,203,1.284,204,2.754,230,1.488,251,1.787,279,2.473,310,1.385,369,2.951,371,2.072,372,2.517,374,3.296,375,5.067,377,2.473,378,5.067,379,3.991,382,5.43,384,3.991,387,2.907,391,5.674,392,5.43,393,3.316,394,5.43,400,3.527,402,3.949,409,4.469,410,4.524,412,1.53,414,3.3,415,3.3,435,2.947,572,4.469,700,3.3,701,3.837,702,5.195,703,3.837,704,3.837,705,3.837,706,3.837,707,3.837]],["title/classes/CreateArticleCommentDto.html",[41,0.146,212,2.405]],["body/classes/CreateArticleCommentDto.html",[3,0.246,4,0.246,5,0.164,9,0.334,13,1.131,14,0.018,22,0.428,28,0.328,32,1.431,40,0.303,41,0.273,47,0.884,52,0.015,53,0.015,130,0.486,198,4.508,199,1.431,200,3.988,201,2.893,202,3.863,203,1.53,204,2.351,207,2.673,208,2.006,209,3.463,210,2.893,211,1.907,212,3.988,213,4.014,708,3.241,709,5.029]],["title/classes/CreateArticleDto.html",[41,0.146,244,2.405]],["body/classes/CreateArticleDto.html",[3,0.236,4,0.236,5,0.157,7,1.194,9,0.321,13,1.086,14,0.018,22,0.411,28,0.322,32,1.374,40,0.295,41,0.269,47,1.212,52,0.014,53,0.014,130,0.477,149,2.138,199,1.374,200,3.889,201,3.078,203,1.492,204,2.258,207,2.887,208,1.926,210,2.822,211,1.832,244,3.889,327,4.129,357,3.71,358,3.378,359,3.378,366,3.614,367,4.221,368,3.113,369,2.258,370,4.155,708,3.113,710,4.83]],["title/classes/CreateTagDto.html",[41,0.146,711,2.61]],["body/classes/CreateTagDto.html",[3,0.257,4,0.257,5,0.171,9,0.349,13,1.183,14,0.018,22,0.448,28,0.311,32,1.497,40,0.257,41,0.248,46,1.945,47,1.118,52,0.015,53,0.015,130,0.381,186,1.329,199,1.497,203,1.572,207,2.537,209,3.559,211,1.995,711,4.448,712,5.471,713,4.525,714,5.26,715,5.26,716,6.36]],["title/classes/DeleteArticlePolicyHandler.html",[41,0.146,303,1.96]],["body/classes/DeleteArticlePolicyHandler.html",[3,0.207,4,0.207,5,0.138,9,0.281,10,1.372,14,0.019,22,0.36,24,1.047,28,0.321,34,1.607,35,1.457,40,0.334,41,0.256,50,1.548,52,0.013,53,0.013,130,0.449,185,1.206,186,0.824,187,1.098,199,1.206,230,1.459,303,2.916,304,2.226,305,2.097,307,1.981,310,1.53,372,2.468,654,2.916,660,2.537,662,2.371,671,3.842,699,2.371,717,3.106,718,2.371,719,3.815,720,3.744,721,3.577,722,4.508,723,4.237,724,2.226,725,3.706,726,3.323,727,2.226,728,2.537,729,3.577,730,2.226,731,3.577]],["title/classes/DeleteUserPolicyHandler.html",[41,0.146,730,1.96]],["body/classes/DeleteUserPolicyHandler.html",[3,0.207,4,0.207,5,0.138,9,0.281,10,1.372,14,0.019,22,0.36,24,1.047,28,0.321,34,1.607,35,1.457,40,0.334,41,0.256,50,1.548,52,0.013,53,0.013,130,0.449,185,1.206,186,0.824,187,1.098,199,1.206,230,1.459,303,2.226,304,2.226,305,2.097,307,1.981,310,1.53,372,2.468,654,2.916,660,2.537,662,2.371,671,3.842,699,2.371,717,3.106,718,2.371,719,3.815,720,3.744,721,3.577,722,4.508,724,2.226,725,3.706,726,3.323,727,2.226,728,2.537,729,3.577,730,2.916,731,3.577,732,4.237]],["title/entities/FollowEntity.html",[371,1.488,429,2.088]],["body/entities/FollowEntity.html",[3,0.245,4,0.245,5,0.163,9,0.332,13,1.503,14,0.018,22,0.569,28,0.245,40,0.245,41,0.195,52,0.015,53,0.015,130,0.485,142,2.628,186,0.972,203,1.524,251,2.511,371,2.46,377,2.808,400,4.004,402,4.293,412,1.995,429,3.451,532,4.302,534,5.136,733,4.302,734,5.752,735,5.001,736,5.001,737,5.001]],["title/interfaces/IPolicyHandler.html",[720,1.96,724,1.96]],["body/interfaces/IPolicyHandler.html",[3,0.208,4,0.208,5,0.138,9,0.282,10,1.374,14,0.019,22,0.361,24,1.05,28,0.322,34,1.611,35,1.461,40,0.334,41,0.256,50,1.55,52,0.013,53,0.013,130,0.449,185,1.208,186,0.826,187,1.1,230,1.461,303,2.231,304,2.231,305,2.102,307,1.986,310,1.533,372,2.471,654,2.92,660,2.543,662,2.377,671,3.843,699,2.377,717,3.11,718,2.377,719,3.678,720,3.747,721,3.582,722,4.511,724,2.231,725,3.936,726,3.328,727,2.231,728,2.543,729,3.582,730,2.231,731,3.582,738,4.247,739,4.247]],["title/injectables/JwtAuthGuard.html",[178,1.062,740,2.61]],["body/injectables/JwtAuthGuard.html",[3,0.221,4,0.221,5,0.147,7,1.117,9,0.3,10,1.43,14,0.019,22,0.492,24,1.117,28,0.329,29,1.066,40,0.221,41,0.176,42,2.001,45,2.529,50,1.364,52,0.014,53,0.014,130,0.419,149,2.001,178,1.647,179,2.113,185,1.647,186,1.125,187,1.499,328,1.714,610,3.161,620,3.729,628,4.445,740,4.047,741,5.491,742,3.888,743,4.047,744,4.978,745,3.888,746,6.122,747,4.519,748,4.978,749,5.17,750,4.519,751,3.888,752,3.161,753,4.519,754,3.472,755,4.519,756,3.888,757,4.519,758,3.888,759,4.978,760,4.519,761,3.888,762,4.519,763,4.519]],["title/injectables/JwtStrategy.html",[178,1.062,600,2.234]],["body/injectables/JwtStrategy.html",[3,0.186,4,0.186,5,0.123,7,1.275,9,0.252,10,1.275,11,2.336,14,0.019,18,3.302,22,0.439,24,1.275,27,1.775,28,0.322,29,0.895,40,0.186,41,0.229,42,2.782,43,2.739,46,1.468,52,0.012,53,0.012,74,4.935,75,2.447,130,0.374,149,1.681,178,1.468,179,1.775,185,1.468,186,1.003,187,1.336,191,2.553,241,2.125,328,1.956,369,1.775,377,1.594,600,3.089,601,3.345,610,2.656,614,3.266,620,4.236,623,3.266,637,3.962,638,4.369,756,3.266,758,3.266,764,3.266,765,5.858,766,4.437,767,3.797,768,3.797,769,5.158,770,6.572,771,6.285,772,3.797,773,5.158,774,5.158,775,4.437,776,5.158,777,5.158,778,3.962,779,3.266,780,3.797,781,3.797,782,3.266,783,3.797,784,3.797,785,3.797,786,3.797,787,3.797,788,3.797,789,5.158,790,5.158,791,5.158]],["title/classes/LoginDto.html",[41,0.146,792,2.234]],["body/classes/LoginDto.html",[3,0.23,4,0.23,5,0.153,9,0.312,13,1.058,14,0.019,22,0.4,28,0.318,32,1.339,40,0.291,41,0.275,46,2.004,47,1.044,52,0.014,53,0.014,130,0.471,138,2.628,157,1.608,199,1.339,203,1.467,207,2.724,208,1.877,209,3.64,210,2.776,211,1.785,249,2.633,648,2.628,708,3.033,792,3.555,793,3.615,794,4.402,795,4.705,796,3.555,797,2.818,798,3.291,799,3.555,800,2.818]],["title/classes/PasswordTransformer.html",[41,0.146,801,2.61]],["body/classes/PasswordTransformer.html",[3,0.218,4,0.218,5,0.145,7,1.567,9,0.296,10,1.417,14,0.018,22,0.488,24,1.417,28,0.281,40,0.218,41,0.247,43,2.68,47,1.342,50,1.352,52,0.014,53,0.014,130,0.416,138,2.538,185,1.631,186,1.114,187,1.485,199,1.267,208,2.286,412,1.776,479,5.539,719,3.208,801,4.009,802,3.831,803,6.339,804,5.732,805,4.453,806,5.732,807,5.758,808,5.732,809,4.453,810,5.732,811,4.931,812,3.831,813,4.453]],["title/classes/PatchArticlePolicyHandler.html",[41,0.146,304,1.96]],["body/classes/PatchArticlePolicyHandler.html",[3,0.207,4,0.207,5,0.138,9,0.281,10,1.372,14,0.019,22,0.36,24,1.047,28,0.321,34,1.607,35,1.457,40,0.334,41,0.256,50,1.548,52,0.013,53,0.013,130,0.449,185,1.206,186,0.824,187,1.098,199,1.206,230,1.459,303,2.226,304,2.916,305,2.097,307,1.981,310,1.53,372,2.468,654,2.916,660,2.537,662,2.371,671,3.842,699,2.371,717,3.106,718,2.371,719,3.815,720,3.744,721,3.577,722,4.508,724,2.226,725,3.706,726,3.323,727,2.226,728,2.537,729,3.577,730,2.226,731,3.577,814,4.237]],["title/classes/PatchUserDto.html",[41,0.146,815,2.405]],["body/classes/PatchUserDto.html",[3,0.204,4,0.204,5,0.136,7,1.031,9,0.277,13,0.937,14,0.019,22,0.355,28,0.301,32,1.186,40,0.269,41,0.272,46,2.05,47,1.192,52,0.013,53,0.013,130,0.445,136,2.19,138,2.431,157,1.676,199,1.186,203,1.357,207,2.831,208,1.663,210,2.568,211,1.581,243,2.885,366,4.17,648,2.431,708,2.687,796,3.288,797,2.496,799,4.061,800,2.496,815,3.539,816,4.218,817,3.203,818,4.724,819,4.206,820,4.169,821,4.724,822,2.916,823,3.586,824,2.916,825,2.916,826,2.916,827,2.916,828,3.841,829,3.586,830,3.539,831,3.203,832,3.586]],["title/classes/PatchUserPolicyHandler.html",[41,0.146,305,1.847]],["body/classes/PatchUserPolicyHandler.html",[3,0.207,4,0.207,5,0.137,9,0.281,10,1.37,14,0.019,22,0.36,24,1.045,28,0.321,34,1.603,35,1.454,40,0.333,41,0.256,50,1.547,52,0.013,53,0.013,130,0.448,185,1.203,186,0.822,187,1.095,199,1.203,230,1.458,303,2.221,304,2.221,305,2.743,307,1.976,310,1.526,372,2.465,654,2.911,660,2.531,662,2.366,671,3.84,699,2.366,717,3.101,718,2.366,719,3.812,720,3.742,721,3.571,722,4.505,724,2.221,725,3.929,726,3.318,727,2.221,728,2.531,729,3.571,730,2.221,731,3.571,833,4.227]],["title/guards/PoliciesGuard.html",[301,2.088,743,2.61]],["body/guards/PoliciesGuard.html",[3,0.195,4,0.195,5,0.13,9,0.265,10,1.318,11,2.395,14,0.019,22,0.511,24,1.318,27,2.493,28,0.327,29,0.94,40,0.195,41,0.156,42,1.765,45,2.232,50,1.416,52,0.013,53,0.013,130,0.435,157,0.986,178,1.517,185,1.709,186,1.168,187,1.556,191,3.174,300,2.789,301,2.984,307,1.864,328,2.278,425,3.475,606,3.063,654,3.511,671,3.369,699,2.232,719,2.232,727,3.369,728,2.388,744,5.515,745,3.43,746,5.915,748,4.586,749,4.925,751,3.43,752,2.789,761,3.43,834,3.987,835,3.43,836,5.331,837,3.987,838,3.987,839,5.331,840,3.987,841,5.331,842,4.095,843,3.43,844,3.987,845,3.987,846,3.987,847,3.987,848,3.987,849,3.987,850,3.063,851,3.987,852,3.987]],["title/controllers/ProfileController.html",[0,1.488,853,2.61]],["body/controllers/ProfileController.html",[0,1.149,2,1.149,3,0.141,4,0.141,5,0.094,7,1.808,9,0.191,10,1.049,11,2.675,13,1.132,14,0.018,16,3.109,18,3.524,19,3.522,20,3.708,22,0.428,24,1.245,28,0.313,29,0.679,30,2.541,31,4.084,32,0.82,40,0.141,41,0.112,43,1.347,45,1.613,46,0.82,47,1.179,48,3.753,49,3.246,50,1.187,52,0.01,53,0.01,130,0.365,136,2.215,185,1.433,186,0.979,187,1.305,216,1.857,233,3.65,234,3.259,236,4.757,237,3.868,238,4.757,239,4.757,241,2.818,251,2.307,254,1.613,257,4.691,292,2.214,294,2.214,295,1.857,298,1.857,299,2.214,300,2.015,301,1.613,302,2.015,305,2.493,306,2.214,307,1.347,308,1.857,309,2.479,322,2.493,325,3.868,328,1.91,336,3.259,337,3.259,853,2.967,854,2.479,855,2.479,856,4.332,857,4.332,858,4.332,859,2.479,860,6.019,861,2.882,862,4.267,863,5.518,864,2.882,865,2.479,866,2.479,867,2.882,868,2.479,869,2.882,870,5.555,871,2.882,872,3.015,873,2.479,874,2.882,875,2.882,876,2.479,877,4.332,878,2.882,879,5.036,880,2.882,881,2.882,882,2.882,883,2.882]],["title/modules/ProfileModule.html",[54,1.347,64,2.405]],["body/modules/ProfileModule.html",[2,2.387,3,0.233,4,0.233,5,0.155,14,0.018,28,0.358,29,1.124,40,0.233,41,0.186,52,0.014,53,0.014,54,2.161,56,2.229,57,2.65,64,4.773,67,3.145,68,2.504,69,2.359,71,2.963,72,2.854,79,2.854,81,2.11,230,1.124,310,1.721,425,3.571,428,3.662,429,3.35,617,3.662,853,4.576,872,4.32,873,4.1,884,4.1,885,4.1,886,4.767,887,4.1,888,4.767]],["title/injectables/ProfileService.html",[178,1.062,872,2.234]],["body/injectables/ProfileService.html",[3,0.138,4,0.138,5,0.092,9,0.187,10,1.031,11,2.659,14,0.019,22,0.499,24,1.358,28,0.287,29,0.664,35,0.968,40,0.138,41,0.11,42,1.846,46,1.187,47,1.172,50,1.295,52,0.01,53,0.01,81,1.246,128,1.969,130,0.425,136,1.981,149,1.246,157,1.648,159,2.449,178,1.187,179,1.316,185,1.669,186,1.14,187,1.519,191,2.064,194,1.969,230,0.983,241,2.78,251,2.293,254,1.575,257,4.743,310,1.016,322,3.146,328,2.329,369,1.316,412,1.123,429,2.334,446,4.445,447,3.203,448,4.273,481,4.273,482,2.422,483,1.969,486,2.162,487,2.422,503,3.816,534,3.816,553,4.101,555,3.816,556,4.273,682,2.422,687,5.467,725,1.686,734,4.273,856,3.587,857,3.587,858,3.587,859,3.587,860,5.99,862,4.219,863,3.816,865,3.587,868,3.587,872,2.497,887,2.422,889,2.422,890,4.17,891,2.422,892,2.815,893,4.17,894,2.815,895,2.815,896,2.815,897,2.815,898,2.815,899,2.815,900,2.422,901,4.967,902,4.17,903,2.815,904,5.283,905,2.815,906,4.17,907,4.17,908,4.17,909,4.17,910,2.815,911,2.815,912,2.815,913,2.815,914,2.815,915,2.815]],["title/classes/RegisterDto.html",[41,0.146,916,2.405]],["body/classes/RegisterDto.html",[3,0.222,4,0.222,5,0.147,9,0.301,13,1.019,14,0.019,22,0.385,28,0.313,32,1.289,40,0.284,41,0.272,46,2.026,47,1.124,52,0.014,53,0.014,130,0.463,136,2.312,138,2.566,157,1.58,199,1.289,203,1.433,207,2.777,208,1.807,209,3.77,210,2.71,211,1.718,249,2.536,648,2.566,708,2.92,796,3.47,797,2.713,799,3.827,800,2.713,822,3.169,824,3.169,825,3.169,826,3.169,827,3.169,916,3.735,917,3.48,918,4.342,919,4.531,920,3.48]],["title/controllers/TagController.html",[0,1.488,921,2.61]],["body/controllers/TagController.html",[0,1.789,2,1.789,3,0.22,4,0.22,5,0.146,7,1.659,9,0.298,10,1.424,11,2.537,13,1.009,14,0.018,15,3.446,16,3.223,18,3.526,20,3.449,21,3.712,22,0.382,24,1.109,28,0.328,29,1.058,30,3.449,31,3.809,32,1.277,38,3.449,39,3.138,40,0.22,41,0.175,45,2.511,46,1.277,48,3.223,50,1.058,52,0.014,53,0.014,216,2.891,241,2.511,295,2.891,322,2.221,328,1.702,426,3.342,546,5.549,921,4.028,922,3.859,923,5.773,924,5.773,925,3.446,926,4.486,927,3.859,928,4.486,929,4.486,930,3.446,931,4.486,932,4.486,933,3.859]],["title/entities/TagEntity.html",[371,1.488,431,2.234]],["body/entities/TagEntity.html",[3,0.244,4,0.244,5,0.162,7,1.233,9,0.331,13,1.384,14,0.018,22,0.524,28,0.244,40,0.244,41,0.261,47,1.083,52,0.015,53,0.015,130,0.446,142,2.621,149,2.726,186,1.356,203,1.522,251,2.117,371,2.781,377,2.804,400,3.999,402,3.687,412,1.989,431,3.687,501,4.306,546,3.831,934,4.291,935,4.988,936,4.291,937,4.988,938,4.291]],["title/modules/TagModule.html",[54,1.347,65,2.405]],["body/modules/TagModule.html",[2,2.464,3,0.245,4,0.245,5,0.163,14,0.018,28,0.351,29,1.182,40,0.245,41,0.196,52,0.015,53,0.015,54,2.23,56,2.345,57,2.735,65,4.709,67,3.246,68,2.635,69,2.482,71,3.058,72,3.003,79,3.003,81,2.22,426,3.839,431,3.003,921,4.682,927,4.314,939,5.015,940,5.015,941,5.015,942,5.015,943,4.314,944,5.015]],["title/injectables/TagService.html",[178,1.062,426,1.96]],["body/injectables/TagService.html",[3,0.197,4,0.197,5,0.131,9,0.267,10,1.325,11,2.749,14,0.019,22,0.513,24,1.325,27,3.009,28,0.344,29,0.948,40,0.197,41,0.157,42,2.374,46,1.526,50,1.264,52,0.013,53,0.013,81,1.781,84,2.592,85,3.456,122,2.813,130,0.389,159,1.604,165,4.613,178,1.526,179,1.881,183,5.405,185,1.526,186,1.042,187,1.389,189,3.46,190,3.46,191,2.654,201,1.881,317,3.09,322,2.654,328,1.526,412,1.604,426,2.817,431,3.211,446,4.5,483,2.813,501,4.219,540,3.46,545,3.09,711,4.5,923,5.535,933,3.46,943,3.46,945,3.46,946,5.362,947,4.022,948,4.022,949,5.362,950,5.362,951,4.022,952,4.022,953,4.022,954,4.022,955,4.022,956,3.46,957,4.022,958,4.022,959,4.022,960,5.362,961,4.022,962,4.022,963,4.022,964,3.46]],["title/controllers/UserController.html",[0,1.488,965,2.61]],["body/controllers/UserController.html",[0,1.415,2,1.415,3,0.174,4,0.174,5,0.115,7,1.509,9,0.236,10,1.217,11,2.255,13,1.107,14,0.019,16,2.755,18,3.371,20,2.947,21,3.172,22,0.419,24,1.509,27,2.643,28,0.333,29,0.836,30,2.947,31,3.385,32,1.009,34,1.345,35,1.22,40,0.174,41,0.138,43,1.658,45,1.985,46,1.009,47,0.994,48,2.755,50,1.161,52,0.012,53,0.012,130,0.257,157,1.823,185,1.401,186,0.957,187,1.275,204,2.302,216,2.286,230,0.836,243,3.208,251,1.944,290,3.781,293,5.711,295,2.286,308,2.286,322,1.755,325,2.724,453,3.781,601,2.643,638,3.936,673,3.051,815,3.936,925,2.724,930,2.724,965,3.443,966,3.051,967,5.653,968,4.922,969,3.547,970,3.547,971,3.547,972,4.234,973,4.691,974,3.547,975,3.547,976,4.234,977,4.234,978,4.922,979,4.234,980,6.415,981,3.781,982,3.051,983,3.051,984,3.547,985,2.286,986,2.724,987,3.547,988,3.547,989,3.547,990,3.051,991,3.547,992,3.547,993,3.547]],["title/classes/UserDto.html",[41,0.146,819,2.405]],["body/classes/UserDto.html",[3,0.179,4,0.179,5,0.119,9,0.244,13,1.46,14,0.019,22,0.552,28,0.282,32,1.044,40,0.247,41,0.253,46,2.129,47,1.263,52,0.012,53,0.012,130,0.498,136,2.589,138,2.874,157,1.245,199,1.044,203,1.245,207,2.74,208,1.463,210,2.355,211,1.391,243,1.927,366,4.017,648,2.874,796,3.016,797,2.196,799,4.302,800,2.196,815,2.364,816,5.153,817,2.817,818,3.155,819,3.992,821,4.333,822,2.565,823,3.155,824,2.565,825,3.523,826,3.523,827,2.565,828,4.541,829,3.155,830,4.185,831,2.817,832,3.155,994,3.667,995,3.667,996,3.667,997,3.667,998,3.667,999,3.667,1000,3.667,1001,3.667,1002,3.667,1003,3.667,1004,3.667]],["title/entities/UserEntity.html",[230,0.88,371,1.488]],["body/entities/UserEntity.html",[3,0.143,4,0.143,5,0.095,7,0.724,9,0.194,13,1.539,14,0.019,22,0.582,28,0.305,40,0.143,41,0.218,47,1.204,52,0.01,53,0.01,130,0.496,136,2.377,138,2.638,140,2.767,142,1.538,149,1.9,157,1.256,159,1.168,186,0.834,201,2.007,203,1.061,208,2.027,213,2.57,217,3.555,230,1.012,251,1.476,279,3.276,369,1.369,371,2.484,372,2.567,377,2.134,387,3.132,388,4.372,393,1.538,396,2.519,400,3.043,402,4.461,411,4.815,412,1.168,508,4.372,544,3.693,574,3.693,611,2.941,613,2.048,643,2.048,647,3.841,648,2.638,662,1.639,676,2.767,801,3.915,807,3.693,828,4.168,830,3.276,936,2.519,938,2.519,1005,2.519,1006,2.928,1007,2.928,1008,2.928,1009,2.928,1010,2.928,1011,2.928,1012,2.928,1013,3.297,1014,2.928,1015,4.3,1016,3.693,1017,2.928,1018,4.293,1019,4.293,1020,2.519,1021,4.293,1022,2.928,1023,2.928,1024,4.293,1025,4.293,1026,4.293,1027,4.293,1028,4.293,1029,2.928,1030,3.693,1031,3.297,1032,3.693,1033,3.693,1034,2.928,1035,4.293,1036,4.293,1037,4.293,1038,2.928,1039,2.928]],["title/classes/UserLoginDto.html",[41,0.146,794,2.405]],["body/classes/UserLoginDto.html",[3,0.219,4,0.219,5,0.146,7,1.106,9,0.297,13,1.293,14,0.018,22,0.489,28,0.311,32,1.273,40,0.281,41,0.277,46,2.054,47,1.179,52,0.014,53,0.014,130,0.486,138,3.07,157,1.106,199,1.273,203,1.421,207,2.674,208,1.785,209,3.556,210,2.689,211,1.697,249,3.218,648,3.07,792,2.68,793,3.438,794,4.322,796,3.443,797,2.68,798,4.022,799,4.015,800,2.68,1040,3.85,1041,4.475,1042,3.85,1043,4.475]],["title/classes/UserRegistrationDto.html",[41,0.146,918,2.405]],["body/classes/UserRegistrationDto.html",[3,0.203,4,0.203,5,0.135,7,1.026,9,0.276,13,1.377,14,0.018,22,0.521,28,0.3,32,1.181,40,0.268,41,0.271,46,2.092,47,1.223,52,0.013,53,0.013,130,0.491,136,2.701,138,2.998,157,1.026,199,1.181,203,1.353,207,2.701,208,1.655,209,3.646,210,2.56,211,1.574,249,3.064,648,2.998,796,3.278,797,2.485,799,4.164,800,2.485,822,2.903,824,2.903,825,3.829,826,3.829,827,3.829,916,2.675,917,3.188,918,4.198,920,4.206,1040,3.57,1042,3.57,1044,4.15,1045,4.15,1046,4.15,1047,4.15]],["title/entities/UserRoles.html",[371,1.488,611,1.96]],["body/entities/UserRoles.html",[3,0.19,4,0.19,5,0.126,7,0.96,8,4.025,9,0.258,13,1.333,14,0.018,22,0.504,28,0.29,34,1.474,35,1.336,40,0.19,41,0.231,52,0.012,53,0.012,130,0.46,142,2.042,157,1.724,203,1.295,230,1.496,251,1.802,254,2.932,371,2.722,377,2.489,379,2.985,384,2.985,393,3.334,400,3.55,402,4.247,410,4.025,412,1.55,611,2.753,639,4.507,647,3.377,661,5.698,676,4.496,677,2.985,681,4.507,855,4.507,863,4.874,985,2.504,1013,4.025,1020,3.343,1030,4.507,1031,4.025,1032,4.507,1033,4.507,1048,5.458,1049,3.343,1050,3.886,1051,6.345,1052,3.886,1053,5.239,1054,5.239,1055,4.025,1056,5.239,1057,5.239,1058,5.239,1059,3.886]],["title/controllers/UsersController.html",[0,1.488,1060,2.61]],["body/controllers/UsersController.html",[0,1.694,2,0.872,3,0.107,4,0.107,5,0.071,7,1.795,9,0.145,10,0.85,11,2.622,13,1.083,14,0.019,16,2.695,18,3.332,19,2.404,20,3.607,21,3.104,22,0.41,24,1.374,27,2.966,28,0.322,29,0.515,30,2.058,31,3.872,32,0.622,34,0.829,35,0.752,38,2.544,39,1.529,40,0.107,41,0.085,42,1.522,43,2.719,44,1.309,46,0.978,47,1.023,48,3.549,49,2.215,50,1.136,52,0.008,53,0.008,130,0.349,136,2.659,140,2.215,157,1.802,159,0.872,185,1.37,186,0.936,187,1.248,191,1.701,204,1.986,216,1.409,230,0.515,234,3.7,236,3.7,237,2.64,238,3.7,239,3.7,243,2.921,246,2.404,248,4.143,249,2.695,254,2.93,292,2.64,294,1.679,295,1.409,298,1.409,299,1.679,300,1.529,301,1.223,302,1.529,306,1.679,307,1.022,322,2.103,328,1.611,336,1.679,337,1.679,553,1.529,599,2.93,601,2.252,628,3.263,638,2.215,643,3.662,648,1.522,730,1.806,766,2.957,792,3.135,798,4.334,828,2.404,830,2.215,866,1.88,876,1.88,877,2.957,916,3.375,920,4.022,924,4.782,925,2.64,930,2.64,973,2.64,976,2.957,981,2.64,985,1.409,986,1.679,1060,2.404,1061,1.88,1062,4.248,1063,4.248,1064,2.186,1065,2.186,1066,2.186,1067,2.186,1068,3.437,1069,3.437,1070,2.957,1071,2.957,1072,2.186,1073,2.186,1074,3.437,1075,2.64,1076,2.186,1077,2.186,1078,2.186,1079,2.957,1080,2.186,1081,2.186,1082,4.816,1083,2.186,1084,2.957,1085,1.88,1086,2.186,1087,2.186,1088,1.88,1089,1.88,1090,2.186,1091,2.186,1092,2.186,1093,3.437,1094,3.437,1095,3.437,1096,3.437,1097,3.437,1098,2.186,1099,2.186,1100,2.186,1101,1.88,1102,2.186,1103,2.186]],["title/modules/UsersModule.html",[54,1.347,66,2.405]],["body/modules/UsersModule.html",[2,2.213,3,0.207,4,0.207,5,0.138,14,0.019,28,0.366,29,0.999,40,0.207,41,0.165,52,0.013,53,0.013,54,2.004,56,1.981,57,2.457,62,4.188,66,4.756,67,2.916,68,2.226,69,2.097,71,2.747,72,3.323,79,2.537,81,1.876,93,3.645,157,1.047,230,0.999,301,3.106,302,2.963,425,3.462,428,3.255,601,3.27,611,2.916,613,2.963,617,3.255,740,3.881,752,2.963,965,4.328,985,2.731,986,3.255,1060,4.328,1104,4.237,1105,4.237,1106,4.237,1107,4.237,1108,5.549,1109,4.237,1110,4.237,1111,4.237,1112,4.237,1113,4.237,1114,4.237]],["title/injectables/UsersService.html",[178,1.062,601,1.745]],["body/injectables/UsersService.html",[3,0.094,4,0.094,5,0.062,7,0.766,9,0.127,10,0.766,11,2.534,14,0.019,16,1.074,21,1.237,22,0.489,24,1.619,26,1.475,27,3.264,28,0.305,29,0.453,34,0.728,35,0.66,40,0.094,41,0.075,42,1.981,43,2.915,44,1.856,46,0.882,47,1.179,49,1.998,50,1.303,52,0.007,53,0.007,81,0.85,130,0.417,136,2.701,138,2.76,140,3.384,157,1.834,159,1.958,178,0.882,179,0.898,185,1.636,186,1.154,187,1.49,191,1.534,230,0.453,243,3.203,246,3.129,251,1.9,254,3.092,290,3.437,322,2.43,328,1.862,377,1.637,393,1.009,412,0.766,446,4.153,447,2.994,453,1.475,483,1.343,486,1.475,503,1.475,507,1.651,553,3.129,555,1.475,568,1.343,571,1.651,601,1.449,611,2.048,613,1.343,643,2.168,647,2.512,648,2.174,666,1.475,676,1.237,779,2.666,792,1.856,794,2.884,798,1.343,811,2.666,812,2.666,819,1.237,830,1.237,891,1.651,918,3.164,956,2.666,964,3.353,972,2.666,973,4.88,981,4.033,982,1.651,983,1.651,985,1.237,990,2.666,1013,2.381,1015,1.475,1016,1.651,1031,1.475,1055,2.381,1070,3.849,1071,2.666,1075,2.381,1084,3.353,1085,1.651,1088,1.651,1089,1.651,1115,1.651,1116,3.099,1117,3.099,1118,3.898,1119,3.898,1120,1.92,1121,3.099,1122,1.92,1123,3.099,1124,3.099,1125,1.92,1126,3.099,1127,3.099,1128,4.474,1129,1.92,1130,3.099,1131,1.92,1132,5.251,1133,3.099,1134,1.92,1135,3.099,1136,1.92,1137,3.099,1138,1.92,1139,1.92,1140,3.099,1141,3.099,1142,3.099,1143,1.92,1144,1.92,1145,1.92,1146,1.92,1147,1.92,1148,1.92,1149,1.92,1150,1.92,1151,1.92,1152,1.92,1153,1.92,1154,1.92,1155,1.92,1156,1.92,1157,1.92,1158,3.353,1159,1.92,1160,2.666,1161,1.651,1162,1.92,1163,1.92,1164,1.92,1165,1.92,1166,1.92,1167,1.92,1168,1.651,1169,1.92,1170,1.92,1171,1.92,1172,1.651,1173,1.92,1174,1.92,1175,1.92,1176,2.666,1177,1.92,1178,1.92,1179,1.92,1180,1.92,1181,3.099,1182,1.92,1183,1.92,1184,1.92,1185,1.92,1186,1.92]],["title/coverage.html",[1187,4.385]],["body/coverage.html",[0,2.418,1,1.902,5,0.088,6,2.339,14,0.018,36,1.628,38,1.628,41,0.283,52,0.01,53,0.01,71,1.346,130,0.197,157,0.672,159,1.084,178,1.879,180,2.339,197,2.089,198,1.752,200,3.48,201,1.9,202,3.122,212,1.752,214,1.902,215,2.339,230,0.641,244,1.752,274,1.752,282,1.752,298,1.752,301,1.522,303,1.428,304,1.428,305,1.346,308,1.752,311,1.628,327,1.628,357,3.122,371,2.418,372,1.084,373,2.339,387,1.522,398,5.858,416,2.339,417,2.339,425,1.346,426,1.428,429,1.522,431,1.628,437,2.339,589,2.339,590,2.339,599,1.522,600,1.628,601,1.271,602,2.089,611,1.428,627,2.339,650,2.089,700,2.339,711,1.902,712,2.339,713,2.339,717,3.234,718,3.234,720,1.428,724,1.428,730,1.428,733,2.339,740,1.902,741,2.339,742,2.339,743,1.902,754,2.089,764,2.339,792,1.628,793,3.122,794,1.752,801,1.902,802,2.339,815,1.752,816,3.122,817,3.122,819,1.752,835,2.339,842,2.089,850,2.089,853,1.902,854,2.339,872,1.628,889,2.339,916,1.752,917,3.122,918,1.752,921,1.902,922,2.339,934,2.339,945,2.339,965,1.902,966,2.339,1005,2.339,1048,2.339,1049,2.339,1060,1.902,1061,2.339,1115,2.339,1187,2.339,1188,2.719,1189,2.719,1190,2.339,1191,6.119,1192,2.339,1193,7.113,1194,7.164,1195,2.719,1196,5.399,1197,2.719,1198,2.719,1199,2.719,1200,2.719,1201,4.064,1202,6.989,1203,2.719,1204,3.496,1205,2.339,1206,4.064,1207,2.719,1208,2.719,1209,3.496,1210,3.496,1211,3.496,1212,4.866,1213,2.339,1214,3.122,1215,2.339,1216,4.439,1217,2.339,1218,2.339,1219,6.284,1220,2.339,1221,2.339,1222,2.339,1223,2.719,1224,2.719,1225,2.719,1226,2.719,1227,2.719,1228,2.719,1229,2.339,1230,2.719,1231,2.719,1232,2.719,1233,2.339]],["title/dependencies.html",[57,1.987,1234,2.678]],["body/dependencies.html",[5,0.135,14,0.019,29,0.976,32,1.178,41,0.213,52,0.013,53,0.013,57,1.833,75,2.669,77,3.562,78,3.181,81,1.833,82,3.562,84,2.669,85,3.944,89,3.562,90,3.562,208,1.651,211,1.571,412,1.651,418,3.181,484,3.562,608,3.181,610,2.896,620,2.669,659,3.562,752,2.896,782,3.562,1015,3.181,1235,4.141,1236,7.194,1237,4.141,1238,5.466,1239,4.141,1240,4.141,1241,4.141,1242,4.141,1243,4.141,1244,4.141,1245,4.141,1246,4.141,1247,4.141,1248,5.466,1249,4.702,1250,4.141,1251,4.141,1252,4.141,1253,4.141,1254,4.141,1255,4.141,1256,4.141,1257,4.141,1258,4.141,1259,6.508,1260,4.141,1261,4.141,1262,3.562,1263,4.141,1264,4.141,1265,4.141,1266,4.141,1267,4.141,1268,4.141,1269,4.141,1270,4.141,1271,4.141,1272,4.141,1273,4.141,1274,4.141,1275,4.141,1276,4.141,1277,4.141,1278,4.141,1279,4.141,1280,4.141,1281,4.141,1282,4.141,1283,4.141,1284,4.141,1285,4.141,1286,4.141,1287,4.141,1288,4.141,1289,4.141,1290,4.141,1291,4.141]],["title/miscellaneous/functions.html",[1292,1.864,1293,3.862]],["body/miscellaneous/functions.html",[9,0.392,14,0.016,52,0.016,53,0.016,1216,4.537,1217,6.173,1292,3.536,1293,5.08,1294,5.08]],["title/index.html",[9,0.207,1295,3.114,1296,2.678]],["body/index.html",[5,0.129,7,0.783,8,3.823,14,0.018,35,1.365,47,0.347,48,1.103,52,0.008,53,0.008,54,1.797,57,1.757,69,2.463,84,2.929,85,2.041,101,1.696,103,3.048,105,1.696,107,1.696,109,1.696,111,1.696,113,1.696,115,1.696,117,1.696,119,1.696,124,1.696,128,3.717,130,0.23,136,0.786,138,1.402,140,4.124,147,3.414,150,3.048,159,0.786,181,3.414,186,0.383,187,0.511,194,4.394,197,2.432,246,2.215,368,2.929,374,1.103,393,2.615,412,2.316,636,1.696,637,2.432,638,1.271,640,1.696,641,2.724,642,1.696,646,2.724,666,3.823,679,1.696,691,1.696,775,2.724,778,1.514,831,1.514,843,1.696,862,1.514,900,3.909,904,2.724,979,1.696,1055,3.048,1079,1.696,1101,3.909,1158,4.281,1160,1.696,1161,1.696,1168,1.696,1172,1.696,1176,1.696,1191,2.724,1214,3.823,1233,1.696,1262,2.724,1296,1.696,1297,3.167,1298,1.971,1299,3.167,1300,3.968,1301,1.971,1302,1.971,1303,1.971,1304,3.167,1305,1.971,1306,3.167,1307,1.971,1308,1.971,1309,3.968,1310,1.971,1311,3.167,1312,4.977,1313,5.314,1314,4.544,1315,5.585,1316,3.167,1317,3.968,1318,3.167,1319,3.167,1320,3.968,1321,1.971,1322,5.585,1323,1.971,1324,3.167,1325,1.971,1326,1.971,1327,5.314,1328,1.971,1329,1.971,1330,1.971,1331,1.971,1332,4.544,1333,3.167,1334,6.591,1335,4.544,1336,4.544,1337,1.971,1338,3.167,1339,1.971,1340,1.971,1341,1.971,1342,5.585,1343,3.167,1344,3.167,1345,3.167,1346,3.968,1347,3.167,1348,1.971,1349,1.971,1350,1.971,1351,1.971,1352,1.971,1353,6.148,1354,4.544,1355,1.971,1356,1.971,1357,1.971,1358,1.971,1359,3.167,1360,1.971,1361,1.971,1362,1.971,1363,1.971,1364,1.971,1365,3.167,1366,1.971,1367,1.971,1368,3.968,1369,3.968,1370,5.806,1371,1.971,1372,4.544,1373,1.971,1374,1.971,1375,3.968,1376,1.971,1377,1.971,1378,1.971,1379,1.971,1380,3.167,1381,1.971,1382,5.806,1383,1.971,1384,1.971,1385,1.971,1386,1.971,1387,1.971,1388,3.167,1389,1.971,1390,1.971,1391,1.971,1392,1.971,1393,1.971,1394,1.971,1395,1.971,1396,1.971,1397,4.544,1398,1.971,1399,1.971,1400,3.167,1401,1.971,1402,1.971,1403,1.971,1404,1.971,1405,1.971,1406,1.971,1407,1.971,1408,1.971,1409,1.971,1410,3.167,1411,1.971,1412,1.971,1413,1.971,1414,1.971,1415,3.167,1416,1.971,1417,1.971,1418,1.971,1419,1.971,1420,3.167,1421,3.167,1422,1.971,1423,1.971,1424,1.971,1425,1.971,1426,1.696,1427,1.971,1428,1.971,1429,3.167,1430,1.971,1431,1.971,1432,1.971,1433,3.167,1434,1.971,1435,1.971,1436,1.971,1437,3.968,1438,3.968,1439,1.971,1440,1.971,1441,1.971,1442,3.167,1443,3.167,1444,1.971,1445,1.971,1446,1.971,1447,1.971,1448,3.167,1449,1.971,1450,1.971,1451,1.971,1452,1.971,1453,1.971,1454,3.167,1455,1.971,1456,1.971,1457,1.971,1458,1.971,1459,1.971,1460,3.167,1461,1.971,1462,3.167,1463,1.971,1464,1.971,1465,1.971,1466,1.971,1467,1.971,1468,1.971,1469,1.971,1470,3.167,1471,4.544,1472,1.971,1473,1.971,1474,1.971,1475,3.968,1476,3.968,1477,3.167,1478,1.971,1479,1.971,1480,1.971,1481,1.971,1482,1.971,1483,1.971,1484,1.971,1485,1.971,1486,1.971,1487,1.971,1488,1.971,1489,1.971,1490,1.971,1491,1.971,1492,1.971,1493,1.971,1494,3.968,1495,3.167,1496,1.971,1497,3.968,1498,3.167,1499,3.167,1500,3.167,1501,3.167,1502,1.971,1503,3.167,1504,3.167,1505,3.167,1506,3.167,1507,1.971,1508,1.971,1509,1.971,1510,2.724,1511,3.167,1512,1.971,1513,1.971,1514,1.971,1515,1.971,1516,1.971,1517,1.971,1518,1.971,1519,1.971,1520,1.971,1521,1.971,1522,1.971,1523,1.971,1524,1.971,1525,1.971,1526,1.971,1527,1.971,1528,1.971,1529,1.971,1530,1.971,1531,1.971,1532,1.971,1533,1.971,1534,1.971,1535,1.971,1536,1.971,1537,1.971,1538,1.971,1539,1.971,1540,1.696,1541,1.971,1542,1.971,1543,1.971,1544,1.971,1545,1.971,1546,1.971,1547,1.971,1548,1.696,1549,1.696,1550,1.971]],["title/modules.html",[56,2.383]],["body/modules.html",[14,0.015,52,0.015,53,0.015,55,3.788,56,2.533,61,3.491,62,3.243,63,3.491,64,3.491,65,3.491,66,3.491,1249,6.469,1540,6.469,1551,7.52,1552,7.52]],["title/overview.html",[1553,4.385]],["body/overview.html",[2,1.577,14,0.018,36,3.581,52,0.013,53,0.013,55,5.283,56,1.848,57,2.346,58,3.4,59,3.4,60,3.4,61,4.648,62,4.433,63,4.421,64,4.515,65,4.294,66,4.648,67,2.785,68,2.077,69,1.957,142,2.077,179,1.848,199,1.125,311,3.581,423,3.4,424,3.4,425,3.607,426,3.357,493,4.559,568,3.707,596,3.4,597,3.4,598,3.4,599,3.921,600,4.195,601,2.988,695,3.4,697,3.4,724,2.077,743,2.765,872,3.581,884,3.4,885,3.4,1553,3.4,1554,3.953,1555,3.953,1556,3.953]],["title/properties.html",[203,1.11,1234,2.678]],["body/properties.html",[14,0.018,52,0.016,53,0.016,203,1.446,374,3.273,1548,5.032,1549,5.032,1557,5.032,1558,5.849,1559,5.849,1560,5.849]],["title/miscellaneous/typealiases.html",[1292,1.864,1561,4.489]],["body/miscellaneous/typealiases.html",[9,0.368,14,0.017,52,0.016,53,0.016,130,0.402,650,4.261,654,2.915,658,4.772,664,5.648,671,3.45,717,3.105,718,3.914,720,2.915,726,4.188,727,3.45,850,4.261,1292,3.322,1562,5.547,1563,6.565,1564,6.565]],["title/miscellaneous/variables.html",[1292,1.864,1565,3.862]],["body/miscellaneous/variables.html",[7,1.186,9,0.227,14,0.019,18,1.797,38,2.874,47,1.154,50,1.132,52,0.011,53,0.011,71,2.376,103,3.687,128,2.392,130,0.519,149,2.125,157,1.486,159,1.364,186,0.665,194,4.591,196,2.942,230,0.806,241,1.914,298,3.093,307,2.244,308,3.093,328,1.297,369,1.599,377,2.328,393,3.876,479,5.667,568,4.204,599,1.914,600,2.048,602,2.628,606,2.628,611,2.522,647,2.205,648,1.514,676,3.093,677,3.687,727,1.797,749,2.628,754,3.687,759,2.942,778,3.687,842,3.687,977,2.942,1075,2.628,1190,2.942,1192,4.129,1204,2.942,1205,4.129,1209,2.942,1210,2.942,1211,4.77,1213,2.942,1214,4.618,1215,2.942,1216,2.628,1218,4.129,1220,4.129,1221,4.129,1222,4.129,1229,2.942,1292,2.048,1294,5.171,1426,2.942,1510,2.942,1557,2.942,1565,2.942,1566,4.799,1567,3.421,1568,3.421,1569,4.799,1570,3.421,1571,3.421,1572,4.799,1573,3.421,1574,3.421,1575,3.421,1576,3.421,1577,3.421,1578,3.421,1579,3.421,1580,3.421,1581,3.421,1582,3.421,1583,3.421,1584,4.799,1585,3.421,1586,3.421,1587,3.421,1588,3.421,1589,3.421,1590,3.421,1591,4.799]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":398,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["0).tostring(36",{"_index":494,"title":{},"body":{"injectables/ArticleService.html":{}}}],["0.0.1",{"_index":1558,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":1291,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":568,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.6.5",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["14.1.1",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["14.2.0",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["14.5.10",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["16",{"_index":1337,"title":{},"body":{"index.html":{}}}],["17.6.0",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1556,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["201",{"_index":234,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["20m",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["2400",{"_index":1416,"title":{},"body":{"index.html":{}}}],["25",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":1019,"title":{},"body":{"entities/UserEntity.html":{}}}],["3.0.0",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["3/12",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":1485,"title":{},"body":{"index.html":{}}}],["4.0.0",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["4.7.1",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1417,"title":{},"body":{"index.html":{}}}],["400",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":238,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["5/5",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":493,"title":{},"body":{"injectables/ArticleService.html":{},"overview.html":{}}}],["6.0.0",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1554,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["7.5.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1555,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["9.1.0",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_",{"_index":827,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)@isoptional",{"_index":1003,"title":{},"body":{"classes/UserDto.html":{}}}],["9/9",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["__dirname",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["ability",{"_index":654,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can(useractionsenum.delete",{"_index":731,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["ability.can(useractionsenum.update",{"_index":729,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["abilitybuilder",{"_index":655,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abilityclass",{"_index":656,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["abstraction",{"_index":1524,"title":{},"body":{"index.html":{}}}],["access",{"_index":681,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["accessed",{"_index":1390,"title":{},"body":{"index.html":{}}}],["accessible",{"_index":1441,"title":{},"body":{"index.html":{}}}],["account",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["acts",{"_index":1523,"title":{},"body":{"index.html":{}}}],["actual",{"_index":1431,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":1439,"title":{},"body":{"index.html":{}}}],["addarticletofavorites",{"_index":438,"title":{},"body":{"injectables/ArticleService.html":{}}}],["addarticletofavorites(slug",{"_index":452,"title":{},"body":{"injectables/ArticleService.html":{}}}],["again",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["against",{"_index":1421,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1562,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphanumeric",{"_index":1414,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1309,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["angular/flex",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["anvarov",{"_index":1560,"title":{},"body":{"properties.html":{}}}],["anything",{"_index":1450,"title":{},"body":{"index.html":{}}}],["api",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/v1/docs",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":207,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isemail()@isoptional",{"_index":996,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isfqdn()@isoptional",{"_index":998,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isnotempty",{"_index":205,"title":{},"body":{"classes/ArticleCommentDto.html":{}}}],["apiproperty()@isnotempty()@isalpha",{"_index":714,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isnotempty()@isemail",{"_index":1040,"title":{},"body":{"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@matches(/^(?=[a",{"_index":1046,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apiproperty()@isnotempty()@minlength(8",{"_index":1042,"title":{},"body":{"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["apiproperty()@matches(/^(?=[a",{"_index":1002,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@maxlength(255)@isoptional",{"_index":994,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@minlength(8)@isoptional",{"_index":1000,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@type(undefined)@validatenested",{"_index":708,"title":{},"body":{"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty({required",{"_index":362,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["apiresponse",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1516,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":295,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["apitags('articles",{"_index":320,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apitags('profiles",{"_index":874,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('tags",{"_index":928,"title":{},"body":{"controllers/TagController.html":{}}}],["apitags('user",{"_index":987,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('users",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"entities/UserRoles.html":{},"index.html":{}}}],["app.controller",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app](https://github.com/gothinkster/realworld",{"_index":1539,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":1108,"title":{},"body":{"modules/UsersModule.html":{}}}],["appability",{"_index":671,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":181,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1306,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1542,"title":{},"body":{"index.html":{}}}],["apps/.../app.controller.test.ts",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.module.ts",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.service.test.ts",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../casl.factory.ts",{"_index":1563,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../check",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../policy",{"_index":1564,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["apps/.../public.decorator.ts",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../user.decorator.ts",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.test.ts",{"_index":1190,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/api/src/app.controller.ts:29",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/api/src/app.module.ts",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/api/src/app.service.ts",{"_index":180,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/api/src/app.service.ts:11",{"_index":184,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/app.service.ts:24",{"_index":188,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/api/src/article/article.controller.ts",{"_index":215,"title":{},"body":{"controllers/ArticleController.html":{},"coverage.html":{}}}],["apps/api/src/article/article.controller.ts:100",{"_index":272,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:114",{"_index":291,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:140",{"_index":255,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:154",{"_index":280,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:170",{"_index":240,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:195",{"_index":265,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:216",{"_index":269,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:239",{"_index":261,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:46",{"_index":275,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:60",{"_index":285,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.controller.ts:78",{"_index":247,"title":{},"body":{"controllers/ArticleController.html":{}}}],["apps/api/src/article/article.entity.ts",{"_index":373,"title":{},"body":{"entities/ArticleEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/article.entity.ts:16",{"_index":401,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:19",{"_index":403,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:22",{"_index":407,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:25",{"_index":397,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:28",{"_index":386,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:31",{"_index":395,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:34",{"_index":408,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:37",{"_index":406,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:40",{"_index":399,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:51",{"_index":383,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.entity.ts:54",{"_index":390,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["apps/api/src/article/article.module.ts",{"_index":427,"title":{},"body":{"modules/ArticleModule.html":{}}}],["apps/api/src/article/article.service.ts",{"_index":437,"title":{},"body":{"injectables/ArticleService.html":{},"coverage.html":{}}}],["apps/api/src/article/article.service.ts:117",{"_index":469,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:121",{"_index":474,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:153",{"_index":459,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:173",{"_index":478,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:193",{"_index":463,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:207",{"_index":454,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:23",{"_index":450,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:234",{"_index":473,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:239",{"_index":461,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:254",{"_index":467,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:285",{"_index":465,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:313",{"_index":458,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:317",{"_index":456,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:37",{"_index":476,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/article.service.ts:45",{"_index":470,"title":{},"body":{"injectables/ArticleService.html":{}}}],["apps/api/src/article/comment.entity.ts",{"_index":700,"title":{},"body":{"entities/CommentEntity.html":{},"coverage.html":{}}}],["apps/api/src/article/comment.entity.ts:15",{"_index":706,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:18",{"_index":704,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:23",{"_index":701,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:26",{"_index":703,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:29",{"_index":705,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/comment.entity.ts:32",{"_index":707,"title":{},"body":{"entities/CommentEntity.html":{}}}],["apps/api/src/article/dto/article",{"_index":416,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/articles",{"_index":589,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["apps/api/src/article/dto/create",{"_index":200,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.module.ts",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.module.ts:43",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/api/src/auth/auth.service.test.ts",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/auth/auth.service.ts",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/api/src/auth/auth.service.ts:16",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/auth.service.ts:35",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/api/src/auth/dto/login.dto.ts",{"_index":793,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:20",{"_index":1041,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:28",{"_index":1043,"title":{},"body":{"classes/UserLoginDto.html":{}}}],["apps/api/src/auth/dto/login.dto.ts:35",{"_index":795,"title":{},"body":{"classes/LoginDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts",{"_index":917,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"coverage.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:21",{"_index":1044,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:29",{"_index":1047,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:37",{"_index":1045,"title":{},"body":{"classes/UserRegistrationDto.html":{}}}],["apps/api/src/auth/dto/register.dto.ts:44",{"_index":919,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apps/api/src/auth/jwt",{"_index":741,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:12",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/jwt.strategy.ts:35",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/api/src/auth/public.decorator.ts",{"_index":1209,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/casl.factory.ts",{"_index":650,"title":{},"body":{"injectables/CaslFactory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/casl/casl.factory.ts:22",{"_index":653,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["apps/api/src/casl/casl.module.ts",{"_index":698,"title":{},"body":{"modules/CaslModule.html":{}}}],["apps/api/src/casl/check",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/casl/policies.guard.ts",{"_index":835,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["apps/api/src/casl/policies.guard.ts:12",{"_index":838,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:27",{"_index":840,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policies.guard.ts:9",{"_index":837,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["apps/api/src/casl/policy",{"_index":717,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["apps/api/src/environments/environment.prod.ts",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/environments/environment.ts",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/main.ts",{"_index":1216,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/profile/follow.entity.ts",{"_index":733,"title":{},"body":{"entities/FollowEntity.html":{},"coverage.html":{}}}],["apps/api/src/profile/follow.entity.ts:12",{"_index":736,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:6",{"_index":737,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/follow.entity.ts:9",{"_index":735,"title":{},"body":{"entities/FollowEntity.html":{}}}],["apps/api/src/profile/profile.controller.ts",{"_index":854,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.controller.ts:33",{"_index":867,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:56",{"_index":864,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.controller.ts:79",{"_index":871,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apps/api/src/profile/profile.module.ts",{"_index":886,"title":{},"body":{"modules/ProfileModule.html":{}}}],["apps/api/src/profile/profile.service.ts",{"_index":889,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["apps/api/src/profile/profile.service.ts:11",{"_index":892,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:19",{"_index":896,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:41",{"_index":895,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:71",{"_index":897,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/profile/profile.service.ts:97",{"_index":894,"title":{},"body":{"injectables/ProfileService.html":{}}}],["apps/api/src/tag/dto/create",{"_index":712,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts",{"_index":922,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.controller.ts:17",{"_index":926,"title":{},"body":{"controllers/TagController.html":{}}}],["apps/api/src/tag/tag.entity.ts",{"_index":934,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.entity.ts:12",{"_index":937,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.entity.ts:9",{"_index":935,"title":{},"body":{"entities/TagEntity.html":{}}}],["apps/api/src/tag/tag.module.ts",{"_index":941,"title":{},"body":{"modules/TagModule.html":{}}}],["apps/api/src/tag/tag.service.ts",{"_index":945,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["apps/api/src/tag/tag.service.ts:11",{"_index":948,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:18",{"_index":952,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/tag/tag.service.ts:22",{"_index":951,"title":{},"body":{"injectables/TagService.html":{}}}],["apps/api/src/users/dto/patch",{"_index":816,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts",{"_index":802,"title":{},"body":{"classes/PasswordTransformer.html":{},"coverage.html":{}}}],["apps/api/src/users/password.transformer.ts:12",{"_index":809,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/password.transformer.ts:20",{"_index":805,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["apps/api/src/users/user",{"_index":1048,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts",{"_index":966,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/api/src/users/user.controller.ts:21",{"_index":975,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.controller.ts:33",{"_index":971,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/api/src/users/user.decorator.ts",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/api/src/users/user.entity.ts",{"_index":1005,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/api/src/users/user.entity.ts:27",{"_index":1012,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:33",{"_index":1034,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:39",{"_index":1009,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:45",{"_index":1007,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:51",{"_index":1014,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:57",{"_index":1029,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:69",{"_index":1023,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:72",{"_index":1006,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:75",{"_index":1008,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/user.entity.ts:79",{"_index":1011,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/api/src/users/users.controller.ts",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["apps/api/src/users/users.controller.ts:120",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:51",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:75",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.controller.ts:98",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["apps/api/src/users/users.module.ts",{"_index":1107,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/api/src/users/users.service.ts",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["apps/api/src/users/users.service.ts:110",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:132",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:148",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:24",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:42",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:51",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:61",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["apps/api/src/users/users.service.ts:78",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["appservice",{"_index":36,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appservice.name",{"_index":193,"title":{},"body":{"injectables/AppService.html":{}}}],["apt",{"_index":1345,"title":{},"body":{"index.html":{}}}],["array",{"_index":405,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["article",{"_index":201,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["article.author",{"_index":544,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["article.author.id",{"_index":557,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.comments",{"_index":572,"title":{},"body":{"injectables/ArticleService.html":{},"entities/CommentEntity.html":{}}}],["article.comments.findindex",{"_index":577,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.comments.splice(articlecommentindex",{"_index":584,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.controller",{"_index":434,"title":{},"body":{"modules/ArticleModule.html":{}}}],["article.dto",{"_index":319,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["article.dto.ts",{"_index":357,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["article.dto.ts:10",{"_index":361,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:13",{"_index":360,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:20",{"_index":364,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.dto.ts:27",{"_index":710,"title":{},"body":{"classes/CreateArticleDto.html":{}}}],["article.dto.ts:7",{"_index":365,"title":{},"body":{"classes/ArticleDto.html":{}}}],["article.entity",{"_index":435,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{}}}],["article.favoritescount",{"_index":570,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.id",{"_index":567,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.service",{"_index":312,"title":{},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{}}}],["article.slug",{"_index":542,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist",{"_index":541,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article.taglist.map((name",{"_index":550,"title":{},"body":{"injectables/ArticleService.html":{}}}],["article/article.entity",{"_index":662,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{}}}],["article/article.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["article/comment.entity",{"_index":1038,"title":{},"body":{"entities/UserEntity.html":{}}}],["articlecomment",{"_index":578,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecomment.id",{"_index":579,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecommentdto",{"_index":198,"title":{"classes/ArticleCommentDto.html":{}},"body":{"classes/ArticleCommentDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["articlecommentindex",{"_index":576,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlecontroller",{"_index":214,"title":{"controllers/ArticleController.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"coverage.html":{}}}],["articledto",{"_index":327,"title":{"classes/ArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["articleentity",{"_index":372,"title":{"entities/ArticleEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["articlefeedqueryparams",{"_index":282,"title":{"classes/ArticleFeedQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"coverage.html":{}}}],["articleindex",{"_index":587,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites",{"_index":565,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleinfavorites.id",{"_index":566,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlemodule",{"_index":61,"title":{"modules/ArticleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules.html":{},"overview.html":{}}}],["articlerepository",{"_index":451,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articles",{"_index":217,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["articles.map((article",{"_index":528,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articlescount",{"_index":516,"title":{},"body":{"injectables/ArticleService.html":{}}}],["articleservice",{"_index":311,"title":{"injectables/ArticleService.html":{}},"body":{"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"coverage.html":{},"overview.html":{}}}],["articlesqueryparams",{"_index":274,"title":{"classes/ArticlesQueryParams.html":{}},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["articleswithfavorited",{"_index":527,"title":{},"body":{"injectables/ArticleService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.guard",{"_index":1110,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth.guard.ts",{"_index":742,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":747,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":615,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/dto/login.dto",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/dto/register.dto",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/jwt",{"_index":1109,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/public.decorator",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["authenticate",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["authenticated",{"_index":978,"title":{},"body":{"controllers/UserController.html":{}}}],["authenticating",{"_index":1420,"title":{},"body":{"index.html":{}}}],["authentication",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["authentication/authorization",{"_index":1328,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":753,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":757,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":62,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":374,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"index.html":{},"properties.html":{}}}],["author.favorites.map((el",{"_index":510,"title":{},"body":{"injectables/ArticleService.html":{}}}],["author.id",{"_index":505,"title":{},"body":{"injectables/ArticleService.html":{}}}],["authservice",{"_index":599,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1395,"title":{},"body":{"index.html":{}}}],["await",{"_index":322,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1326,"title":{},"body":{"index.html":{}}}],["bad",{"_index":236,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserRoles.html":{}}}],["bearer",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":1026,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":409,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["behind",{"_index":1405,"title":{},"body":{"index.html":{}}}],["below",{"_index":1362,"title":{},"body":{"index.html":{}}}],["benefits",{"_index":1436,"title":{},"body":{"index.html":{}}}],["beta.40",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["beware",{"_index":1053,"title":{},"body":{"entities/UserRoles.html":{}}}],["bio",{"_index":828,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{}}}],["body",{"_index":204,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":1322,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":725,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{}}}],["boolean(follow",{"_index":905,"title":{},"body":{"injectables/ProfileService.html":{}}}],["bootstrap",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["box",{"_index":1332,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1442,"title":{},"body":{"index.html":{}}}],["branches",{"_index":1532,"title":{},"body":{"index.html":{}}}],["brew",{"_index":1343,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1552,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1249,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":674,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["buildarticlecommentresponse",{"_index":439,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticlecommentresponse(comment",{"_index":455,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse",{"_index":440,"title":{},"body":{"injectables/ArticleService.html":{}}}],["buildarticleresponse(article",{"_index":457,"title":{},"body":{"injectables/ArticleService.html":{}}}],["building",{"_index":1301,"title":{},"body":{"index.html":{}}}],["buildprofileresponse",{"_index":890,"title":{},"body":{"injectables/ProfileService.html":{}}}],["buildprofileresponse(profile",{"_index":893,"title":{},"body":{"injectables/ProfileService.html":{}}}],["built",{"_index":1389,"title":{},"body":{"index.html":{}}}],["can't",{"_index":907,"title":{},"body":{"injectables/ProfileService.html":{}}}],["can(useractionsenum.delete",{"_index":688,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.manage",{"_index":678,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.read",{"_index":683,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["can(useractionsenum.update",{"_index":686,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["canactivate",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":748,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["capability",{"_index":1472,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":1058,"title":{},"body":{"entities/UserRoles.html":{}}}],["case",{"_index":959,"title":{},"body":{"injectables/TagService.html":{}}}],["casl",{"_index":663,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["casl.factory",{"_index":699,"title":{},"body":{"modules/CaslModule.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":659,"title":{},"body":{"injectables/CaslFactory.html":{},"dependencies.html":{}}}],["casl/casl.factory",{"_index":428,"title":{},"body":{"modules/ArticleModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["casl/casl.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["casl/check",{"_index":299,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["casl/policies.guard",{"_index":302,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["casl/policy",{"_index":306,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["caslfactory",{"_index":425,"title":{"injectables/CaslFactory.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":63,"title":{"modules/CaslModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaslModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":958,"title":{},"body":{"injectables/TagService.html":{}}}],["cert.pem",{"_index":1483,"title":{},"body":{"index.html":{}}}],["certificate",{"_index":1471,"title":{},"body":{"index.html":{}}}],["certs",{"_index":1474,"title":{},"body":{"index.html":{}}}],["change",{"_index":1451,"title":{},"body":{"index.html":{}}}],["check",{"_index":843,"title":{},"body":{"guards/PoliciesGuard.html":{},"index.html":{}}}],["check_policies_key",{"_index":842,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":298,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":337,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["checks",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["choco",{"_index":1344,"title":{},"body":{"index.html":{}}}],["choice",{"_index":1444,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["choosing",{"_index":1314,"title":{},"body":{"index.html":{}}}],["class",{"_index":41,"title":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":199,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"injectables/CaslFactory.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"overview.html":{}}}],["clone",{"_index":1365,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlemodule",{"_index":423,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_articlemodule_providers",{"_index":424,"title":{},"body":{"modules/ArticleModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":597,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":598,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":695,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":697,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_providers",{"_index":696,"title":{},"body":{"modules/CaslModule.html":{}}}],["cluster_profilemodule",{"_index":884,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":885,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":939,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_tagmodule_providers",{"_index":940,"title":{},"body":{"modules/TagModule.html":{}}}],["cluster_usersmodule",{"_index":1104,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1105,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1106,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1509,"title":{},"body":{"index.html":{}}}],["column",{"_index":402,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["column('simple",{"_index":404,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["column({default",{"_index":396,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":1017,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({type",{"_index":384,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["column({unique",{"_index":936,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["comes",{"_index":1327,"title":{},"body":{"index.html":{}}}],["coming",{"_index":672,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["command",{"_index":1375,"title":{},"body":{"index.html":{}}}],["comment",{"_index":213,"title":{},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleCommentDto.html":{},"entities/UserEntity.html":{}}}],["comment.article",{"_index":389,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["comment.author",{"_index":574,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["comment.dto",{"_index":318,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["comment.dto.ts",{"_index":202,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:15",{"_index":709,"title":{},"body":{"classes/CreateArticleCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":206,"title":{},"body":{"classes/ArticleCommentDto.html":{}}}],["comment.entity",{"_index":413,"title":{},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["commententity",{"_index":387,"title":{"entities/CommentEntity.html":{}},"body":{"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["commentid",{"_index":263,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["commenting",{"_index":235,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentonarticle",{"_index":218,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentonarticle(user",{"_index":229,"title":{},"body":{"controllers/ArticleController.html":{}}}],["commentrepository",{"_index":449,"title":{},"body":{"injectables/ArticleService.html":{}}}],["comments",{"_index":279,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{}}}],["completed",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["completed'})@apiresponse({status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["compose",{"_index":1359,"title":{},"body":{"index.html":{}}}],["config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["config.get('app_env",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app_env",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_database",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('webtoken_encryption_key",{"_index":623,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('webtoken_expiration_time",{"_index":625,"title":{},"body":{"modules/AuthModule.html":{}}}],["configuration",{"_index":1313,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1530,"title":{},"body":{"index.html":{}}}],["conflict",{"_index":1385,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1419,"title":{},"body":{"index.html":{}}}],["connections",{"_index":1430,"title":{},"body":{"index.html":{}}}],["console.log('follow",{"_index":903,"title":{},"body":{"injectables/ProfileService.html":{}}}],["const",{"_index":328,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(articlerepository",{"_index":445,"title":{},"body":{"injectables/ArticleService.html":{}}}],["constructor(configservice",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(private",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(tagrepository",{"_index":947,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":891,"title":{},"body":{"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["container",{"_index":1400,"title":{},"body":{"index.html":{}}}],["contents",{"_index":1310,"title":{},"body":{"index.html":{}}}],["context",{"_index":751,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":762,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":761,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":846,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["control",{"_index":1350,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":321,"title":{},"body":{"controllers/ArticleController.html":{}}}],["controller('profiles",{"_index":875,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('tags",{"_index":929,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('user",{"_index":988,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('users",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corresponding",{"_index":1452,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1187,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1373,"title":{},"body":{"index.html":{}}}],["create",{"_index":246,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create(payload",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["createarticle",{"_index":219,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticle(user",{"_index":242,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["createarticlecommentdto",{"_index":212,"title":{"classes/CreateArticleCommentDto.html":{}},"body":{"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/CreateArticleCommentDto.html":{},"coverage.html":{}}}],["createarticlecommentdto.comment",{"_index":348,"title":{},"body":{"controllers/ArticleController.html":{}}}],["createarticledto",{"_index":244,"title":{"classes/CreateArticleDto.html":{}},"body":{"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{},"coverage.html":{}}}],["createcommentonarticle",{"_index":441,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createcommentonarticle(slug",{"_index":460,"title":{},"body":{"injectables/ArticleService.html":{}}}],["created",{"_index":1055,"title":{},"body":{"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createdarticle",{"_index":547,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createdat",{"_index":375,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["createforuser",{"_index":651,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createforuser(user",{"_index":652,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["createparamdecorator",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('articles",{"_index":497,"title":{},"body":{"injectables/ArticleService.html":{}}}],["createquerybuilder('users",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["creates",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["createtag",{"_index":946,"title":{},"body":{"injectables/TagService.html":{}}}],["createtag(tag",{"_index":950,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto",{"_index":711,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["createtoken",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(undefined",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":545,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"injectables/TagService.html":{}}}],["crud",{"_index":1329,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":811,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":812,"title":{},"body":{"classes/PasswordTransformer.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":977,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":394,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["currently",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["currentuser",{"_index":523,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuser.favorites.map((favorite",{"_index":524,"title":{},"body":{"injectables/ArticleService.html":{}}}],["currentuserid",{"_index":257,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["d",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["daily",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["data",{"_index":973,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["databases",{"_index":1526,"title":{},"body":{"index.html":{}}}],["date",{"_index":391,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["date%.log",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["datepattern",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["days",{"_index":1484,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_host",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_password",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_port",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_type",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["db_username",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["dd",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{}}}],["dedicated",{"_index":1518,"title":{},"body":{"index.html":{}}}],["default",{"_index":393,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default('development",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultmeta",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":619,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":254,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':slug",{"_index":341,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":252,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/comments/:id",{"_index":350,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/comments/:id')@useguards(policiesguard)@checkpolicies(new",{"_index":264,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite",{"_index":355,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":259,"title":{},"body":{"controllers/ArticleController.html":{}}}],["delete(':username",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username')@useguards(policiesguard)@checkpolicies(new",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':username/follow",{"_index":882,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":869,"title":{},"body":{"controllers/ProfileController.html":{}}}],["delete(username",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletearticle",{"_index":220,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticle(currentuserid",{"_index":250,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticle(slug",{"_index":462,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites",{"_index":221,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletearticlefromfavorites(currentuserid",{"_index":258,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletearticlefromfavorites(slug",{"_index":464,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deletearticlepolicyhandler",{"_index":303,"title":{"classes/DeleteArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["deletearticlepolicyhandler())@apiresponse({status",{"_index":253,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletecommentfromarticle",{"_index":222,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["deletecommentfromarticle(currentuserid",{"_index":262,"title":{},"body":{"controllers/ArticleController.html":{}}}],["deletecommentfromarticle(slug",{"_index":466,"title":{},"body":{"injectables/ArticleService.html":{}}}],["deleted",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleted.affected",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyusername",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyusername(username",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserpolicyhandler",{"_index":730,"title":{"classes/DeleteUserPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["deleteuserpolicyhandler())@apiresponse({status",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["demand",{"_index":1498,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1404,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1347,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1312,"title":{},"body":{"index.html":{}}}],["desc",{"_index":515,"title":{},"body":{"injectables/ArticleService.html":{}}}],["describe",{"_index":1514,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/AuthService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["desktop",{"_index":1357,"title":{},"body":{"index.html":{}}}],["detached",{"_index":1401,"title":{},"body":{"index.html":{}}}],["details",{"_index":691,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["detection#use",{"_index":690,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["detectsubjecttype",{"_index":692,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["determines",{"_index":1409,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1547,"title":{},"body":{"index.html":{}}}],["development",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["different",{"_index":1429,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1398,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1334,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1497,"title":{},"body":{"index.html":{}}}],["docs/api",{"_index":1502,"title":{},"body":{"index.html":{}}}],["docs/ui",{"_index":1508,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["download",{"_index":1369,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1355,"title":{},"body":{"index.html":{}}}],["downloading",{"_index":1339,"title":{},"body":{"index.html":{}}}],["dto",{"_index":249,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["dto/article",{"_index":313,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/articles",{"_index":315,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["dto/create",{"_index":317,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["dto/patch",{"_index":982,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":960,"title":{},"body":{"injectables/TagService.html":{}}}],["dynamic",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":370,"title":{},"body":{"classes/ArticleDto.html":{},"classes/CreateArticleDto.html":{}}}],["eager",{"_index":381,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["edit",{"_index":290,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["edit(userid",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser",{"_index":967,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":969,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":1302,"title":{},"body":{"index.html":{}}}],["el.id",{"_index":511,"title":{},"body":{"injectables/ArticleService.html":{}}}],["email",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["employed",{"_index":1536,"title":{},"body":{"index.html":{}}}],["employing",{"_index":1488,"title":{},"body":{"index.html":{}}}],["employs",{"_index":1024,"title":{},"body":{"entities/UserEntity.html":{}}}],["empty",{"_index":1423,"title":{},"body":{"index.html":{}}}],["enable",{"_index":1464,"title":{},"body":{"index.html":{}}}],["encrypt/decrypt",{"_index":1412,"title":{},"body":{"index.html":{}}}],["end",{"_index":1504,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1426,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"overview.html":{}}}],["entity",{"_index":371,"title":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":1051,"title":{},"body":{"entities/UserRoles.html":{}}}],["env",{"_index":1372,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":1374,"title":{},"body":{"index.html":{}}}],["environment",{"_index":1214,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":908,"title":{},"body":{"injectables/ProfileService.html":{}}}],["error",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/TagService.html":{}}}],["everything",{"_index":682,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["example",{"_index":831,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"index.html":{}}}],["exclude",{"_index":1035,"title":{},"body":{"entities/UserEntity.html":{}}}],["exec",{"_index":1493,"title":{},"body":{"index.html":{}}}],["execpolicyhandler",{"_index":836,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":839,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execute",{"_index":1397,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":555,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1377,"title":{},"body":{"index.html":{}}}],["exists",{"_index":964,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["exp",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiration",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["expire",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["expiresin",{"_index":626,"title":{},"body":{"modules/AuthModule.html":{}}}],["explicitly",{"_index":1428,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exportable",{"_index":899,"title":{},"body":{"injectables/ProfileService.html":{}}}],["exports",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{},"modules/CaslModule.html":{}}}],["exposed",{"_index":1383,"title":{},"body":{"index.html":{}}}],["express",{"_index":1438,"title":{},"body":{"index.html":{}}}],["extends",{"_index":756,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extensive",{"_index":1529,"title":{},"body":{"index.html":{}}}],["extractjwt",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderwithscheme('bearer",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":657,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["failed",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":369,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@exclude",{"_index":1022,"title":{},"body":{"entities/UserEntity.html":{}}}],["false})@isoptional()@isstring",{"_index":420,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["false})@isoptional()@isstring({each",{"_index":363,"title":{},"body":{"classes/ArticleDto.html":{}}}],["fastify",{"_index":1262,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/helmet",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["fastify/rate",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["fastify/static",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["favorite.id",{"_index":525,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorited",{"_index":529,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{}}}],["favoriteids",{"_index":522,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favoriteids.includes(article.id",{"_index":530,"title":{},"body":{"injectables/ArticleService.html":{}}}],["favorites",{"_index":508,"title":{},"body":{"injectables/ArticleService.html":{},"entities/UserEntity.html":{}}}],["favoritescount",{"_index":376,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["favourite",{"_index":268,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle",{"_index":223,"title":{},"body":{"controllers/ArticleController.html":{}}}],["favouritearticle(currentuserid",{"_index":266,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feat",{"_index":1534,"title":{},"body":{"index.html":{}}}],["feat/http2",{"_index":1469,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1458,"title":{},"body":{"index.html":{}}}],["features",{"_index":1330,"title":{},"body":{"index.html":{}}}],["feed",{"_index":284,"title":{},"body":{"controllers/ArticleController.html":{}}}],["feed.dto",{"_index":314,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["feed.dto.ts",{"_index":417,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"coverage.html":{}}}],["feed.dto.ts:10",{"_index":421,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["feed.dto.ts:17",{"_index":422,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{}}}],["fetch",{"_index":924,"title":{},"body":{"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":799,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["fields",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["filename",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["files",{"_index":1505,"title":{},"body":{"index.html":{}}}],["findbyslug",{"_index":442,"title":{},"body":{"injectables/ArticleService.html":{}}}],["findbyslug(slug",{"_index":468,"title":{},"body":{"injectables/ArticleService.html":{}}}],["fine",{"_index":961,"title":{},"body":{"injectables/TagService.html":{}}}],["folder",{"_index":1475,"title":{},"body":{"index.html":{}}}],["follow",{"_index":862,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["follow.entity",{"_index":887,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["follow.followingid",{"_index":538,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followentity",{"_index":429,"title":{"entities/FollowEntity.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["follower",{"_index":906,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followerid",{"_index":534,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["following",{"_index":904,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["followingid",{"_index":734,"title":{},"body":{"entities/FollowEntity.html":{},"injectables/ProfileService.html":{}}}],["followinguserids",{"_index":536,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followprofile",{"_index":856,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followprofile(currentuserid",{"_index":859,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["followrepository",{"_index":448,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["follows",{"_index":532,"title":{},"body":{"injectables/ArticleService.html":{},"entities/FollowEntity.html":{}}}],["follows.length",{"_index":535,"title":{},"body":{"injectables/ArticleService.html":{}}}],["follows.map((follow",{"_index":537,"title":{},"body":{"injectables/ArticleService.html":{}}}],["followtocreate",{"_index":910,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followerid",{"_index":911,"title":{},"body":{"injectables/ProfileService.html":{}}}],["followtocreate.followingid",{"_index":912,"title":{},"body":{"injectables/ProfileService.html":{}}}],["format",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["forroot",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["framework",{"_index":1300,"title":{},"body":{"index.html":{}}}],["from(value",{"_index":804,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["front",{"_index":1503,"title":{},"body":{"index.html":{}}}],["fully",{"_index":1543,"title":{},"body":{"index.html":{}}}],["function",{"_index":850,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1293,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":1528,"title":{},"body":{"index.html":{}}}],["generate",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["generated",{"_index":1476,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":332,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug')@apiresponse({status",{"_index":271,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug/comments",{"_index":343,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':slug/comments')@apiresponse({status",{"_index":278,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(':username",{"_index":876,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get(':username')@apiresponse({status",{"_index":866,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["get('feed",{"_index":324,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get('feed')@apiresponse({status",{"_index":283,"title":{},"body":{"controllers/ArticleController.html":{}}}],["get(id",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["getarticle",{"_index":224,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(@param('slug",{"_index":333,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticle(slug",{"_index":270,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getarticles",{"_index":225,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getarticles(query",{"_index":273,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getbyusername",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyusername(username",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcommentsforarticle",{"_index":226,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsforarticle(@param('slug",{"_index":344,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsforarticle(slug",{"_index":277,"title":{},"body":{"controllers/ArticleController.html":{}}}],["getcommentsonarticle",{"_index":443,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getcommentsonarticle(slug",{"_index":472,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getfeed",{"_index":227,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getfeed(currentuserid",{"_index":281,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["getone",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["getprofile",{"_index":857,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofile(currentuserid",{"_index":865,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getrootmessage",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getslug",{"_index":444,"title":{},"body":{"injectables/ArticleService.html":{}}}],["getslug(title",{"_index":475,"title":{},"body":{"injectables/ArticleService.html":{}}}],["gettags",{"_index":923,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["getting",{"_index":1295,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":968,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@request",{"_index":989,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(req",{"_index":974,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemailandpass",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemailandpass(email",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["git",{"_index":1366,"title":{},"body":{"index.html":{}}}],["github",{"_index":1495,"title":{},"body":{"index.html":{}}}],["given",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["grabs",{"_index":806,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["gravatar",{"_index":1015,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["guard",{"_index":743,"title":{"guards/PoliciesGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":834,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["h2",{"_index":1465,"title":{},"body":{"index.html":{}}}],["h2c",{"_index":1467,"title":{},"body":{"index.html":{}}}],["handle",{"_index":721,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handle(ability",{"_index":722,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["handler",{"_index":841,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler(ability",{"_index":851,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":852,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":307,"title":{},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handlers.ts",{"_index":718,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["handlers.ts:18",{"_index":833,"title":{},"body":{"classes/PatchUserPolicyHandler.html":{}}}],["handlers.ts:24",{"_index":732,"title":{},"body":{"classes/DeleteUserPolicyHandler.html":{}}}],["handlers.ts:30",{"_index":814,"title":{},"body":{"classes/PatchArticlePolicyHandler.html":{}}}],["handlers.ts:35",{"_index":723,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{}}}],["handlers.ts:8",{"_index":739,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["hash",{"_index":807,"title":{},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{}}}],["hashed",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":1307,"title":{},"body":{"index.html":{}}}],["host",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["hosting",{"_index":1506,"title":{},"body":{"index.html":{}}}],["http/2",{"_index":1462,"title":{},"body":{"index.html":{}}}],["http2",{"_index":1316,"title":{},"body":{"index.html":{}}}],["http://localhost:3333",{"_index":1384,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1391,"title":{},"body":{"index.html":{}}}],["http://localhost:80",{"_index":1403,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":481,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpexception('article",{"_index":554,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpexception('profile",{"_index":901,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpexception('you",{"_index":558,"title":{},"body":{"injectables/ArticleService.html":{}}}],["https",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["https://casl.js.org/v5/en/guide/subject",{"_index":689,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["https://github.com/msanvarov/nest",{"_index":1367,"title":{},"body":{"index.html":{}}}],["https://gravatar.com/avatar/123",{"_index":832,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["https://typeorm.io",{"_index":1456,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":482,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.bad_request",{"_index":909,"title":{},"body":{"injectables/ProfileService.html":{}}}],["httpstatus.forbidden",{"_index":559,"title":{},"body":{"injectables/ArticleService.html":{}}}],["httpstatus.not_found",{"_index":556,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["iarticleresponsebody",{"_index":296,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iarticlesresponsebody",{"_index":297,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["iat",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":377,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"injectables/JwtStrategy.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":509,"title":{},"body":{"injectables/ArticleService.html":{}}}],["ids.length",{"_index":512,"title":{},"body":{"injectables/ArticleService.html":{}}}],["igenericmessagebody",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignored",{"_index":962,"title":{},"body":{"injectables/TagService.html":{}}}],["ignoreexpiration",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":830,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["imessage",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["implements",{"_index":719,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infersubjects",{"_index":658,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/TagService.html":{}}}],["inject(winston_module_provider",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["injectable",{"_index":178,"title":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":483,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(articleentity",{"_index":485,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(commententity",{"_index":488,"title":{},"body":{"injectables/ArticleService.html":{}}}],["injectrepository(followentity",{"_index":487,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(tagentity",{"_index":954,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(userentity",{"_index":486,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userroles",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":1308,"title":{},"body":{"index.html":{}}}],["interface",{"_index":724,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":738,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":720,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":754,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isalpha",{"_index":716,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isemail",{"_index":796,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isfqdn",{"_index":821,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":209,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["isnotfavorited",{"_index":563,"title":{},"body":{"injectables/ArticleService.html":{}}}],["isoptional",{"_index":366,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["ispublic",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":367,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{}}}],["it's",{"_index":1415,"title":{},"body":{"index.html":{}}}],["item",{"_index":693,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["item.constructor",{"_index":694,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["iuser",{"_index":980,"title":{},"body":{"controllers/UserController.html":{}}}],["iuserresponsebody",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["javascript",{"_index":1340,"title":{},"body":{"index.html":{}}}],["joi",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default('3306",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().default(1800",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().allow('').default",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('mariadb",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('nest",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('root",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":1036,"title":{},"body":{"entities/UserEntity.html":{}}}],["json.stringify(article",{"_index":562,"title":{},"body":{"injectables/ArticleService.html":{}}}],["jwt",{"_index":620,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":616,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":740,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":621,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":600,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["keepconnectionalive",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["key",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["key).digest('hex",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["key.pem",{"_index":1482,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyout",{"_index":1481,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":668,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["layer",{"_index":1525,"title":{},"body":{"index.html":{}}}],["layout",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["left",{"_index":1422,"title":{},"body":{"index.html":{}}}],["leftjoinandselect('articles.author",{"_index":498,"title":{},"body":{"injectables/ArticleService.html":{}}}],["length",{"_index":1018,"title":{},"body":{"entities/UserEntity.html":{}}}],["level",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":1454,"title":{},"body":{"index.html":{}}}],["license",{"_index":1548,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1550,"title":{},"body":{"index.html":{}}}],["limit",{"_index":418,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"dependencies.html":{}}}],["loads",{"_index":1399,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1354,"title":{},"body":{"index.html":{}}}],["locally",{"_index":1338,"title":{},"body":{"index.html":{}}}],["located",{"_index":1473,"title":{},"body":{"index.html":{}}}],["location",{"_index":1520,"title":{},"body":{"index.html":{}}}],["logger",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["logger(articleservice.name",{"_index":480,"title":{},"body":{"injectables/ArticleService.html":{}}}],["logging",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["login",{"_index":798,"title":{},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(payload",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["logindto",{"_index":792,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logs",{"_index":1319,"title":{},"body":{"index.html":{}}}],["logs/application",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/error.log",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["lower",{"_index":490,"title":{},"body":{"injectables/ArticleService.html":{}}}],["luckily",{"_index":1463,"title":{},"body":{"index.html":{}}}],["made",{"_index":1323,"title":{},"body":{"index.html":{}}}],["main",{"_index":1533,"title":{},"body":{"index.html":{}}}],["make",{"_index":1335,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1468,"title":{},"body":{"index.html":{}}}],["manage",{"_index":665,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["manual",{"_index":1363,"title":{},"body":{"index.html":{}}}],["many",{"_index":1032,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["manytomany",{"_index":1037,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytomany(undefined)@jointable",{"_index":1010,"title":{},"body":{"entities/UserEntity.html":{}}}],["manytoone",{"_index":410,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["manytoone(undefined",{"_index":379,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/UserRoles.html":{}}}],["mapping",{"_index":1522,"title":{},"body":{"index.html":{}}}],["matches",{"_index":822,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["matches(/^(?=[a",{"_index":824,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.pow(36",{"_index":492,"title":{},"body":{"injectables/ArticleService.html":{}}}],["math.random",{"_index":491,"title":{},"body":{"injectables/ArticleService.html":{}}}],["maxfiles",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlength",{"_index":823,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxlength(255",{"_index":829,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["maxsize",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["mediumtext",{"_index":385,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["message",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":797,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["minlength(8",{"_index":800,"title":{},"body":{"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["mins",{"_index":1418,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1292,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1549,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mm",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["mode",{"_index":1380,"title":{},"body":{"index.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modulemocker",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modulemocker(global",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":1448,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1460,"title":{},"body":{"index.html":{}}}],["mssql",{"_index":1449,"title":{},"body":{"index.html":{}}}],["mutated",{"_index":972,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["mysql",{"_index":1346,"title":{},"body":{"index.html":{}}}],["mysql/mariadb",{"_index":1443,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":186,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navigate",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["needed",{"_index":1424,"title":{},"body":{"index.html":{}}}],["nest",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":752,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newkey",{"_index":1479,"title":{},"body":{"index.html":{}}}],["nginx",{"_index":1406,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":1299,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1486,"title":{},"body":{"index.html":{}}}],["non",{"_index":1333,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1370,"title":{},"body":{"index.html":{}}}],["nrwl/angular",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nullable",{"_index":382,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["number",{"_index":251,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["nx",{"_index":1321,"title":{},"body":{"index.html":{}}}],["object",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(article",{"_index":540,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/TagService.html":{}}}],["object.assign(comment",{"_index":573,"title":{},"body":{"injectables/ArticleService.html":{}}}],["object.keys(payload).foreach((key",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["offers",{"_index":1434,"title":{},"body":{"index.html":{}}}],["offset",{"_index":419,"title":{},"body":{"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{}}}],["ondelete",{"_index":1057,"title":{},"body":{"entities/UserRoles.html":{}}}],["one",{"_index":1031,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":411,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":388,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/UserEntity.html":{}}}],["open",{"_index":1510,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["open_api_current_version",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_description",{"_index":1220,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_name",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["open_api_root",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["openssl",{"_index":1477,"title":{},"body":{"index.html":{}}}],["operation",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["operational",{"_index":1358,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1433,"title":{},"body":{"index.html":{}}}],["optional",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["options",{"_index":1410,"title":{},"body":{"index.html":{}}}],["os",{"_index":1546,"title":{},"body":{"index.html":{}}}],["out",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outlined",{"_index":1361,"title":{},"body":{"index.html":{}}}],["over",{"_index":1437,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1553,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1234,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pages",{"_index":1496,"title":{},"body":{"index.html":{}}}],["panel",{"_index":1351,"title":{},"body":{"index.html":{}}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":351,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('slug",{"_index":338,"title":{},"body":{"controllers/ArticleController.html":{}}}],["param('username",{"_index":877,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":185,"title":{},"body":{"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["particular",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["passion",{"_index":1545,"title":{},"body":{"index.html":{}}}],["passport",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":618,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["password).digest('hex",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["password.transformer",{"_index":1039,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwords",{"_index":1025,"title":{},"body":{"entities/UserEntity.html":{}}}],["passwordtransformer",{"_index":801,"title":{"classes/PasswordTransformer.html":{}},"body":{"classes/PasswordTransformer.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["patch",{"_index":818,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{}}}],["patcharticlepolicyhandler",{"_index":304,"title":{"classes/PatchArticlePolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"coverage.html":{}}}],["patcharticlepolicyhandler())@apiresponse({status",{"_index":289,"title":{},"body":{"controllers/ArticleController.html":{}}}],["patchuserdto",{"_index":815,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["patchuserpolicyhandler",{"_index":305,"title":{"classes/PatchUserPolicyHandler.html":{}},"body":{"controllers/ArticleController.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["patchuserpolicyhandler())@apiresponse({status",{"_index":233,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["path",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":243,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.article",{"_index":330,"title":{},"body":{"controllers/ArticleController.html":{}}}],["payload.user",{"_index":993,"title":{},"body":{"controllers/UserController.html":{}}}],["payload[key",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["perform",{"_index":1432,"title":{},"body":{"index.html":{}}}],["performance",{"_index":1435,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":685,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["permit",{"_index":1054,"title":{},"body":{"entities/UserRoles.html":{}}}],["persistence",{"_index":1331,"title":{},"body":{"index.html":{}}}],["pg",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["placeholders",{"_index":1378,"title":{},"body":{"index.html":{}}}],["plaintext",{"_index":1466,"title":{},"body":{"index.html":{}}}],["plaintoclass(userentity",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass(userroles",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["policies.decorator",{"_index":300,"title":{},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["policies.decorator.ts",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["policiesguard",{"_index":301,"title":{"guards/PoliciesGuard.html":{}},"body":{"controllers/ArticleController.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["policy",{"_index":728,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{}}}],["policyhandler",{"_index":727,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":726,"title":{},"body":{"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":844,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":848,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["port",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["ports",{"_index":1388,"title":{},"body":{"index.html":{}}}],["post",{"_index":292,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["post(':slug/comments",{"_index":346,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/comments')@useguards(policiesguard)@checkpolicies(new",{"_index":232,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite",{"_index":353,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':slug/favorite')@useguards(policiesguard)@checkpolicies(new",{"_index":267,"title":{},"body":{"controllers/ArticleController.html":{}}}],["post(':username/follow",{"_index":880,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post(':username/follow')@useguards(policiesguard)@checkpolicies(new",{"_index":861,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('login",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@apiresponse({status",{"_index":245,"title":{},"body":{"controllers/ArticleController.html":{}}}],["postgres",{"_index":1447,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":216,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["prerequisites",{"_index":1311,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":400,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["private",{"_index":191,"title":{},"body":{"injectables/AppService.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["procedure",{"_index":1360,"title":{},"body":{"index.html":{}}}],["produce",{"_index":1501,"title":{},"body":{"index.html":{}}}],["production",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":863,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/UserRoles.html":{}}}],["profile.controller",{"_index":888,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.email",{"_index":915,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.service",{"_index":873,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/follow.entity",{"_index":430,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["profile/profile.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":853,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":64,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profiles",{"_index":855,"title":{},"body":{"controllers/ProfileController.html":{},"entities/UserRoles.html":{}}}],["profileservice",{"_index":872,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profileusername",{"_index":860,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["progress",{"_index":1531,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1298,"title":{},"body":{"index.html":{}}}],["project",{"_index":1394,"title":{},"body":{"index.html":{}}}],["promise",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":548,"title":{},"body":{"injectables/ArticleService.html":{}}}],["properties",{"_index":203,"title":{"properties.html":{}},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"entities/FollowEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"properties.html":{}}}],["protocol",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["prototype",{"_index":1325,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1113,"title":{},"body":{"modules/UsersModule.html":{}}}],["provided",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":1517,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":1408,"title":{},"body":{"index.html":{}}}],["prs",{"_index":1541,"title":{},"body":{"index.html":{}}}],["public",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get()@apiresponse({status",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/TagController.html":{}}}],["public()@post('login')@apiresponse({status",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@post()@apiresponse({status",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["public.decorator",{"_index":755,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["put",{"_index":293,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UserController.html":{}}}],["put(':slug",{"_index":335,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put(':slug')@useguards(policiesguard)@checkpolicies(new",{"_index":288,"title":{},"body":{"controllers/ArticleController.html":{}}}],["put()@apiresponse({status",{"_index":970,"title":{},"body":{"controllers/UserController.html":{}}}],["queried",{"_index":981,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":276,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.author",{"_index":502,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.dto",{"_index":316,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["query.dto.ts",{"_index":590,"title":{},"body":{"classes/ArticlesQueryParams.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":595,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:17",{"_index":591,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:24",{"_index":592,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:31",{"_index":593,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.dto.ts:38",{"_index":594,"title":{},"body":{"classes/ArticlesQueryParams.html":{}}}],["query.favorited",{"_index":506,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.limit",{"_index":518,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.offset",{"_index":520,"title":{},"body":{"injectables/ArticleService.html":{}}}],["query.tag",{"_index":499,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder",{"_index":495,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('1=0",{"_index":513,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.authorid",{"_index":504,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.andwhere('articles.taglist",{"_index":500,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getcount",{"_index":517,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.getmany",{"_index":526,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.limit(query.limit",{"_index":519,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.offset(query.offset",{"_index":521,"title":{},"body":{"injectables/ArticleService.html":{}}}],["querybuilder.orderby('articles.createdat",{"_index":514,"title":{},"body":{"injectables/ArticleService.html":{}}}],["quickly",{"_index":1324,"title":{},"body":{"index.html":{}}}],["r",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["ran",{"_index":1487,"title":{},"body":{"index.html":{}}}],["random",{"_index":1413,"title":{},"body":{"index.html":{}}}],["react",{"_index":1386,"title":{},"body":{"index.html":{}}}],["read",{"_index":679,"title":{},"body":{"injectables/CaslFactory.html":{},"index.html":{}}}],["readonly",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1537,"title":{},"body":{"index.html":{}}}],["received",{"_index":930,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["received'})@apiresponse({status",{"_index":925,"title":{},"body":{"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["record",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["recordkey",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":746,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["register",{"_index":920,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{}}}],["register(payload",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerdto",{"_index":916,"title":{"classes/RegisterDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["registered",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["registerpayload",{"_index":990,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registration",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["relational",{"_index":1521,"title":{},"body":{"index.html":{}}}],["relations",{"_index":507,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":1033,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["rely",{"_index":1544,"title":{},"body":{"index.html":{}}}],["remark",{"_index":666,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["remove",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["removes",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["replace",{"_index":1376,"title":{},"body":{"index.html":{}}}],["repo",{"_index":1320,"title":{},"body":{"index.html":{}}}],["repository",{"_index":446,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":1030,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["represents",{"_index":669,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["req",{"_index":979,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["req.user",{"_index":673,"title":{},"body":{"injectables/CaslFactory.html":{},"controllers/UserController.html":{}}}],["request",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request'})@apiresponse({status",{"_index":237,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["request.user",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.user[recordkey",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":368,"title":{},"body":{"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleDto.html":{},"index.html":{}}}],["reset",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responses",{"_index":1379,"title":{},"body":{"index.html":{}}}],["rest",{"_index":1368,"title":{},"body":{"index.html":{}}}],["restful",{"_index":1515,"title":{},"body":{"index.html":{}}}],["results",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":976,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reverse",{"_index":1407,"title":{},"body":{"index.html":{}}}],["rich",{"_index":1459,"title":{},"body":{"index.html":{}}}],["role",{"_index":676,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["role.entity",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role.entity.ts",{"_index":1049,"title":{},"body":{"entities/UserRoles.html":{},"coverage.html":{}}}],["role.entity.ts:16",{"_index":1050,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:27",{"_index":1052,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.entity.ts:35",{"_index":1059,"title":{},"body":{"entities/UserRoles.html":{}}}],["role.user",{"_index":1028,"title":{},"body":{"entities/UserEntity.html":{}}}],["roles",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["rolesrepository",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["root",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["rootpath",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["route",{"_index":248,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/UsersController.html":{}}}],["rsa:4096",{"_index":1480,"title":{},"body":{"index.html":{}}}],["run",{"_index":1382,"title":{},"body":{"index.html":{}}}],["running",{"_index":1490,"title":{},"body":{"index.html":{}}}],["runtime",{"_index":1341,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["safe",{"_index":1425,"title":{},"body":{"index.html":{}}}],["sal",{"_index":1559,"title":{},"body":{"properties.html":{}}}],["scalable",{"_index":1303,"title":{},"body":{"index.html":{}}}],["scoped",{"_index":684,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["seconds",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["secret",{"_index":622,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":1021,"title":{},"body":{"entities/UserEntity.html":{}}}],["self",{"_index":1470,"title":{},"body":{"index.html":{}}}],["served",{"_index":1396,"title":{},"body":{"index.html":{}}}],["server",{"_index":1304,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["setmetadata(check_policies_key",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["setparameter('email",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1305,"title":{},"body":{"index.html":{}}}],["signed",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["signoptions",{"_index":624,"title":{},"body":{"modules/AuthModule.html":{}}}],["single",{"_index":256,"title":{},"body":{"controllers/ArticleController.html":{}}}],["sits",{"_index":1427,"title":{},"body":{"index.html":{}}}],["slug",{"_index":231,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{}}}],["slugify",{"_index":484,"title":{},"body":{"injectables/ArticleService.html":{},"dependencies.html":{}}}],["slugify(title",{"_index":489,"title":{},"body":{"injectables/ArticleService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"modules/CaslModule.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["spdy",{"_index":1489,"title":{},"body":{"index.html":{}}}],["special",{"_index":667,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["specification",{"_index":1512,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1446,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":1455,"title":{},"body":{"index.html":{}}}],["stack",{"_index":1348,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":1356,"title":{},"body":{"index.html":{}}}],["start",{"_index":1353,"title":{},"body":{"index.html":{}}}],["started",{"_index":1296,"title":{"index.html":{}},"body":{"index.html":{}}}],["starter",{"_index":1297,"title":{},"body":{"index.html":{}}}],["starter/api",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["statements",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["status",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/TagController.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["still",{"_index":1440,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":670,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["subjects",{"_index":664,"title":{},"body":{"injectables/CaslFactory.html":{},"miscellaneous/typealiases.html":{}}}],["sudo",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":763,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1540,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1457,"title":{},"body":{"index.html":{}}}],["supports",{"_index":1445,"title":{},"body":{"index.html":{}}}],["sure",{"_index":1336,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1551,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1511,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["table",{"_index":1233,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1232,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":501,"title":{},"body":{"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{}}}],["tag.controller",{"_index":942,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":953,"title":{},"body":{"injectables/TagService.html":{}}}],["tag.dto.ts",{"_index":713,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:8",{"_index":715,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":943,"title":{},"body":{"modules/TagModule.html":{},"injectables/TagService.html":{}}}],["tag.name",{"_index":933,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tag.service",{"_index":927,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.entity",{"_index":432,"title":{},"body":{"modules/ArticleModule.html":{}}}],["tag/tag.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["tag/tag.service",{"_index":433,"title":{},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{}}}],["tagcontroller",{"_index":921,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagentity",{"_index":431,"title":{"entities/TagEntity.html":{}},"body":{"modules/ArticleModule.html":{},"entities/TagEntity.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["taglist",{"_index":358,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["tagmodule",{"_index":65,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagrepository",{"_index":949,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":546,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/TagController.html":{},"entities/TagEntity.html":{}}}],["tags.map((tag",{"_index":932,"title":{},"body":{"controllers/TagController.html":{}}}],["tagservice",{"_index":426,"title":{"injectables/TagService.html":{}},"body":{"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":1535,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1392,"title":{},"body":{"index.html":{}}}],["test",{"_index":1494,"title":{},"body":{"index.html":{}}}],["test@user.com",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["testing",{"_index":1317,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1492,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1461,"title":{},"body":{"index.html":{}}}],["this.appservice.getrootmessage",{"_index":51,"title":{},"body":{"controllers/AppController.html":{}}}],["this.articlerepository",{"_index":496,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.delete",{"_index":560,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.findone",{"_index":531,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articlerepository.save(article",{"_index":549,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.articleservice.addarticletofavorites",{"_index":354,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticlecommentresponse(comment",{"_index":349,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.buildarticleresponse(article",{"_index":331,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createarticle",{"_index":329,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.createcommentonarticle",{"_index":347,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticle(slug",{"_index":342,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletearticlefromfavorites",{"_index":356,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.deletecommentfromarticle",{"_index":352,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.findbyslug(slug",{"_index":334,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getarticles(query",{"_index":323,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getcommentsonarticle(slug",{"_index":345,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.getfeed(currentuserid",{"_index":326,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.articleservice.updatearticle",{"_index":339,"title":{},"body":{"controllers/ArticleController.html":{}}}],["this.authservice.createtoken(user",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.caslfactory.createforuser(user.user",{"_index":847,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.commentrepository.delete",{"_index":586,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.commentrepository.save(comment",{"_index":575,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.configservice.get('webtoken_expiration_time",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.execpolicyhandler(handler",{"_index":849,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.expiration",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findbyslug(slug",{"_index":552,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.delete",{"_index":914,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.find",{"_index":533,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.followrepository.findone",{"_index":902,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.followrepository.save(followtocreate",{"_index":913,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.get(userid",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyusername(payload.username",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getslug(payload.title",{"_index":543,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.getuserbyemailandpass(email",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`tag",{"_index":963,"title":{},"body":{"injectables/TagService.html":{}}}],["this.logger.info('calling",{"_index":192,"title":{},"body":{"injectables/AppService.html":{}}}],["this.logger.log('article",{"_index":561,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.profileservice.buildprofileresponse(profile",{"_index":879,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.followprofile",{"_index":881,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofile",{"_index":878,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.unfollowprofile",{"_index":883,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.reflector.get",{"_index":845,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":760,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.tagrepository.find",{"_index":955,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(article",{"_index":957,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.createtag",{"_index":551,"title":{},"body":{"injectables/ArticleService.html":{}}}],["this.tagservice.gettags",{"_index":931,"title":{},"body":{"controllers/TagController.html":{}}}],["this.updatedat",{"_index":415,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["this.userrepository",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.create",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.delete",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":503,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":571,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/UsersService.html":{}}}],["this.userrolesrepository.save(roles",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(payload.user",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(username",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edit(userid",{"_index":992,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getbyusername(username",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validateuser(payload.user",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":553,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["timediff",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["timestamp",{"_index":392,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["title",{"_index":359,"title":{},"body":{"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{}}}],["to(value",{"_index":808,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["todo",{"_index":898,"title":{},"body":{"injectables/ProfileService.html":{}}}],["token",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["tokens",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["transform",{"_index":810,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["transformer",{"_index":208,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["transports",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["trigger",{"_index":1352,"title":{},"body":{"index.html":{}}}],["true",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"classes/CreateArticleDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":956,"title":{},"body":{"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["tslib",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ArticleCommentDto.html":{},"controllers/ArticleController.html":{},"classes/ArticleDto.html":{},"entities/ArticleEntity.html":{},"classes/ArticleFeedQueryParams.html":{},"injectables/ArticleService.html":{},"classes/ArticlesQueryParams.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"entities/FollowEntity.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PasswordTransformer.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1561,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedocs",{"_index":1318,"title":{},"body":{"index.html":{}}}],["typedocs:api:start",{"_index":1500,"title":{},"body":{"index.html":{}}}],["typedocs:ui:start",{"_index":1507,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":412,"title":{},"body":{"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"entities/CommentEntity.html":{},"entities/FollowEntity.html":{},"classes/PasswordTransformer.html":{},"injectables/ProfileService.html":{},"entities/TagEntity.html":{},"injectables/TagService.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":436,"title":{},"body":{"modules/ArticleModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":944,"title":{},"body":{"modules/TagModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":617,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProfileModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typing",{"_index":1499,"title":{},"body":{"index.html":{}}}],["ui",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProfileService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":239,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":1020,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{}}}],["unfavourite",{"_index":260,"title":{},"body":{"controllers/ArticleController.html":{}}}],["unfollow",{"_index":870,"title":{},"body":{"controllers/ProfileController.html":{}}}],["unfollowprofile",{"_index":858,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unfollowprofile(currentuserid",{"_index":868,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["unique",{"_index":938,"title":{},"body":{"entities/TagEntity.html":{},"entities/UserEntity.html":{}}}],["unit",{"_index":1491,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":241,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/TagController.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1402,"title":{},"body":{"index.html":{}}}],["updatearticle",{"_index":228,"title":{},"body":{"controllers/ArticleController.html":{},"injectables/ArticleService.html":{}}}],["updatearticle(currentuserid",{"_index":286,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticle(slug",{"_index":477,"title":{},"body":{"injectables/ArticleService.html":{}}}],["updatearticledto",{"_index":287,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatearticledto.article",{"_index":340,"title":{},"body":{"controllers/ArticleController.html":{}}}],["updatedat",{"_index":378,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["updatetimestamp",{"_index":414,"title":{},"body":{"entities/ArticleEntity.html":{},"entities/CommentEntity.html":{}}}],["url",{"_index":1016,"title":{},"body":{"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["url(payload.email",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":900,"title":{},"body":{"injectables/ProfileService.html":{},"index.html":{}}}],["useclass",{"_index":1114,"title":{},"body":{"modules/UsersModule.html":{}}}],["used",{"_index":1513,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":294,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["useguards(policiesguard",{"_index":336,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"guards/PoliciesGuard.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.articles",{"_index":380,"title":{},"body":{"entities/ArticleEntity.html":{}}}],["user.bio",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.comments",{"_index":702,"title":{},"body":{"entities/CommentEntity.html":{}}}],["user.comments.findindex",{"_index":581,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.comments.splice(usercommentindex",{"_index":585,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.controller",{"_index":1111,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.decorator",{"_index":984,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":983,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":817,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["user.dto.ts:20",{"_index":997,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:28",{"_index":1004,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:36",{"_index":995,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:45",{"_index":999,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:53",{"_index":1001,"title":{},"body":{"classes/UserDto.html":{}}}],["user.dto.ts:63",{"_index":820,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user.email",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.entity",{"_index":985,"title":{},"body":{"controllers/UserController.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.favorites.findindex",{"_index":564,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.push(article",{"_index":569,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.favorites.splice(articleindex",{"_index":588,"title":{},"body":{"injectables/ArticleService.html":{}}}],["user.id",{"_index":687,"title":{},"body":{"injectables/CaslFactory.html":{},"injectables/ProfileService.html":{}}}],["user.image",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.roles",{"_index":1056,"title":{},"body":{"entities/UserRoles.html":{}}}],["user.roles.some",{"_index":675,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["user.username",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["user[key",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["useractionsenum",{"_index":660,"title":{},"body":{"injectables/CaslFactory.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{}}}],["usercomment",{"_index":582,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercomment.id",{"_index":583,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercommentindex",{"_index":580,"title":{},"body":{"injectables/ArticleService.html":{}}}],["usercontroller",{"_index":965,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userdto",{"_index":819,"title":{"classes/UserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":230,"title":{"entities/UserEntity.html":{}},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":453,"title":{},"body":{"injectables/ArticleService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["userlogindto",{"_index":794,"title":{"classes/UserLoginDto.html":{}},"body":{"classes/LoginDto.html":{},"classes/UserLoginDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleService.html":{},"injectables/AuthService.html":{},"classes/PatchUserDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"entities/UserEntity.html":{},"classes/UserRegistrationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["userparam",{"_index":308,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userparam('id",{"_index":325,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["userparam('token",{"_index":991,"title":{},"body":{"controllers/UserController.html":{}}}],["userregistrationdto",{"_index":918,"title":{"classes/UserRegistrationDto.html":{}},"body":{"classes/RegisterDto.html":{},"classes/UserRegistrationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":447,"title":{},"body":{"injectables/ArticleService.html":{},"injectables/ProfileService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":611,"title":{"entities/UserRoles.html":{}},"body":{"modules/AuthModule.html":{},"entities/UserEntity.html":{},"entities/UserRoles.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrolesenum",{"_index":661,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{}}}],["userrolesenum.sudo",{"_index":677,"title":{},"body":{"injectables/CaslFactory.html":{},"entities/UserRoles.html":{},"miscellaneous/variables.html":{}}}],["userrolesrepository",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1112,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.password",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":986,"title":{},"body":{"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/user.decorator",{"_index":309,"title":{},"body":{"controllers/ArticleController.html":{},"controllers/ProfileController.html":{}}}],["users/user.entity",{"_index":310,"title":{},"body":{"controllers/ArticleController.html":{},"entities/ArticleEntity.html":{},"modules/ArticleModule.html":{},"injectables/ArticleService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslFactory.html":{},"entities/CommentEntity.html":{},"classes/DeleteArticlePolicyHandler.html":{},"classes/DeleteUserPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/PatchArticlePolicyHandler.html":{},"classes/PatchUserPolicyHandler.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["users/users.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":614,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":1060,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":66,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":601,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1381,"title":{},"body":{"index.html":{}}}],["utilize",{"_index":1411,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":1013,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRoles.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["valid('development",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["validate(request",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":210,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{}}}],["validates",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(undefined",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["validation",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":211,"title":{},"body":{"classes/ArticleCommentDto.html":{},"classes/ArticleDto.html":{},"classes/ArticleFeedQueryParams.html":{},"classes/ArticlesQueryParams.html":{},"classes/CreateArticleCommentDto.html":{},"classes/CreateArticleDto.html":{},"classes/CreateTagDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserLoginDto.html":{},"classes/UserRegistrationDto.html":{},"dependencies.html":{}}}],["value",{"_index":479,"title":{},"body":{"injectables/ArticleService.html":{},"classes/PasswordTransformer.html":{},"miscellaneous/variables.html":{}}}],["value).digest('hex",{"_index":813,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["valuetransformer",{"_index":803,"title":{},"body":{"classes/PasswordTransformer.html":{}}}],["variable",{"_index":1191,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1565,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1557,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":1342,"title":{},"body":{"index.html":{}}}],["view",{"_index":1527,"title":{},"body":{"index.html":{}}}],["vue",{"_index":1387,"title":{},"body":{"index.html":{}}}],["web",{"_index":1315,"title":{},"body":{"index.html":{}}}],["webtoken_encryption_key",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["webtoken_expiration_time",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["welcome",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["where('articles.authorid",{"_index":539,"title":{},"body":{"injectables/ArticleService.html":{}}}],["where('users.email",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["whether",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["window",{"_index":1393,"title":{},"body":{"index.html":{}}}],["winston",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/TagService.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.json",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.format.simple",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.console",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["winston.transports.file",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["winston_module_provider",{"_index":189,"title":{},"body":{"injectables/AppService.html":{},"injectables/TagService.html":{}}}],["winstonfilerotator",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["winstonmodule.forrootasync",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["without",{"_index":1364,"title":{},"body":{"index.html":{}}}],["work",{"_index":1519,"title":{},"body":{"index.html":{}}}],["world",{"_index":1538,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":1453,"title":{},"body":{"index.html":{}}}],["write",{"_index":680,"title":{},"body":{"injectables/CaslFactory.html":{}}}],["writing",{"_index":1027,"title":{},"body":{"entities/UserEntity.html":{}}}],["x509",{"_index":1478,"title":{},"body":{"index.html":{}}}],["xampp",{"_index":1349,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":1371,"title":{},"body":{"index.html":{}}}],["yes",{"_index":471,"title":{},"body":{"injectables/ArticleService.html":{}}}],["yyyy",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["z0",{"_index":826,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["za",{"_index":825,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/RegisterDto.html":{},"classes/UserDto.html":{},"classes/UserRegistrationDto.html":{}}}],["zippedarchive",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["zone.js",{"_index":1290,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticleModule.html":{},"modules/AuthModule.html":{},"modules/CaslModule.html":{},"modules/ProfileModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Root Request Completed'})@ApiResponse({status: 400, description: 'Root Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/app.controller.ts:29\n                \n            \n\n\n            \n                \n                    Returns a welcome message\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        a welcome message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\n\nimport { IMessage } from '@starter/api-types';\n\nimport { AppService } from './app.service';\nimport { Public } from './auth/public.decorator';\n\n/**\n * App Controller\n */\n@ApiBearerAuth()\n@Controller()\nexport class AppController {\n  /**\n   * Constructor\n   * @param {AppService} appService app service\n   */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n   * Returns a welcome message\n   * @returns {string} a welcome message\n   */\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Root Request Completed' })\n  @ApiResponse({ status: 400, description: 'Root Request Failed' })\n  async getRootMessage(): Promise {\n    return this.appService.getRootMessage();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport * as joi from 'joi';\nimport { WinstonModule } from 'nest-winston';\nimport { join } from 'path';\nimport * as winston from 'winston';\nimport * as winstonFileRotator from 'winston-daily-rotate-file';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ArticleModule } from './article/article.module';\nimport { AuthModule } from './auth/auth.module';\nimport { CaslModule } from './casl/casl.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { TagModule } from './tag/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: joi.object({\n        APP_ENV: joi\n          .string()\n          .valid('development', 'production')\n          .default('development'),\n        WEBTOKEN_ENCRYPTION_KEY: joi.string().required(),\n        WEBTOKEN_EXPIRATION_TIME: joi.number().default(1800),\n        DB_TYPE: joi.string().default('mariadb'),\n        DB_USERNAME: joi.string().default('root'),\n        DB_PASSWORD: joi.string().allow('').default(''),\n        DB_HOST: joi.string().default('localhost'),\n        DB_PORT: joi.number().default('3306'),\n        DB_DATABASE: joi.string().default('nest'),\n      }),\n    }),\n    ServeStaticModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) =>\n        config.get('APP_ENV') === 'production'\n          ? [\n              {\n                rootPath: join(__dirname, '..', 'ui'),\n              },\n            ]\n          : [],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE'),\n          entities: [__dirname + '/**/**.entity{.ts,.js}'],\n          synchronize: configService.get('APP_ENV') === 'development',\n          autoLoadEntities: true,\n          logging: true,\n          keepConnectionAlive: true,\n        } as TypeOrmModuleAsyncOptions;\n      },\n    }),\n    WinstonModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return configService.get('APP_ENV') === 'development'\n          ? {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n              ],\n            }\n          : {\n              level: 'info',\n              format: winston.format.json(),\n              defaultMeta: { service: 'user-service' },\n              transports: [\n                new winston.transports.File({\n                  filename: 'logs/error.log',\n                  level: 'error',\n                }),\n                new winston.transports.Console({\n                  format: winston.format.simple(),\n                }),\n                new winstonFileRotator({\n                  filename: 'logs/application-%DATE%.log',\n                  datePattern: 'YYYY-MM-DD',\n                  zippedArchive: true,\n                  maxSize: '20m',\n                  maxFiles: '14d',\n                }),\n              ],\n            };\n      },\n    }),\n    AuthModule.forRoot(),\n    UsersModule,\n    CaslModule,\n    TagModule,\n    ArticleModule,\n    ProfileModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Application Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRootMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                logging service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRootMessage\n                        \n                    \n                \n            \n            \n                \ngetRootMessage()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/app.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns a welcome message.\n\n\n                    \n                    \n                    \n                        Returns :     IMessage\n\n                    \n                    \n                        welcome message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Logger } from 'winston';\n\nimport { IMessage } from '@starter/api-types';\n\n/**\n * Application Service\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Constructor\n   * @param {Logger} logger logging service\n   */\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Returns a welcome message.\n   * @returns {string} welcome message\n   */\n  getRootMessage(): IMessage {\n    this.logger.info('Calling getRootMessage -> ', AppService.name);\n\n    return {\n      message: 'Welcome to api! Navigate to api/v1/docs for documentation.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleCommentDto.html":{"url":"classes/ArticleCommentDto.html","title":"class - ArticleCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, ValidateNested } from 'class-validator';\n\nexport class ArticleCommentDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n}\n\nexport class CreateArticleCommentDto {\n  @ApiProperty()\n  @Type(() => ArticleCommentDto)\n  @ValidateNested()\n  comment: ArticleCommentDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticleController.html":{"url":"controllers/ArticleController.html","title":"controller - ArticleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentOnArticle\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                deleteCommentFromArticle\n                            \n                            \n                                    Async\n                                favouriteArticle\n                            \n                            \n                                    Async\n                                getArticle\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getCommentsForArticle\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        commentOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    commentOnArticle(user: UserEntity, slug: string, createArticleCommentDto: CreateArticleCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/comments')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Commenting on Article Request Completed'})@ApiResponse({status: 400, description: 'Commenting on Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createArticleCommentDto\n                                    \n                                                CreateArticleCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponse({status: 201, description: 'Create Articles Request Completed'})@ApiResponse({status: 400, description: 'Create Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:78\n                \n            \n\n\n            \n                \n                    Route to create an article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    payload\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteArticlePolicyHandler())@ApiResponse({status: 201, description: 'Delete Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:140\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Unfavourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Unfavourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCommentFromArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentFromArticle(currentUserId: number, commentId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':slug/comments/:id')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Delete Comment from Article Request Completed'})@ApiResponse({status: 400, description: 'Delete Comment from Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        favouriteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    favouriteArticle(currentUserId: number, slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':slug/favorite')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 201, description: 'Favourite an Article Request Completed'})@ApiResponse({status: 400, description: 'Favourite an Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug')@ApiResponse({status: 200, description: 'Get Article Request Completed'})@ApiResponse({status: 400, description: 'Get Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:100\n                \n            \n\n\n            \n                \n                    Route to get a single article\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the article slug\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 201, description: 'Get Articles Request Completed'})@ApiResponse({status: 400, description: 'Get Articles Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommentsForArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsForArticle(slug: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':slug/comments')@ApiResponse({status: 200, description: 'Get Article Comments Request Completed'})@ApiResponse({status: 400, description: 'Get Article Comments Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('feed')@ApiResponse({status: 201, description: 'Get Article Feed Request Completed'})@ApiResponse({status: 400, description: 'Get Article Feed Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(currentUserId: number, slug: string, updateArticleDto: CreateArticleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':slug')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchArticlePolicyHandler())@ApiResponse({status: 201, description: 'Edit Article Request Completed'})@ApiResponse({status: 400, description: 'Edit Article Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/article/article.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateArticleDto\n                                    \n                                                CreateArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport {\n  DeleteArticlePolicyHandler,\n  PatchArticlePolicyHandler,\n  PatchUserPolicyHandler,\n} from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleService } from './article.service';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { CreateArticleCommentDto } from './dto/create-article-comment.dto';\nimport { CreateArticleDto } from './dto/create-article.dto';\n\n@ApiBearerAuth()\n@ApiTags('articles')\n@Controller('articles')\nexport class ArticleController {\n  constructor(private readonly articleService: ArticleService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 201, description: 'Get Articles Request Completed' })\n  @ApiResponse({ status: 400, description: 'Get Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticles(\n    @Query()\n    query: ArticlesQueryParams,\n  ): Promise {\n    return await this.articleService.getArticles(query);\n  }\n\n  @Get('feed')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Article Feed Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Feed Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getFeed(\n    @UserParam('id') currentUserId: number,\n    @Query() query: ArticleFeedQueryParams,\n  ) {\n    return await this.articleService.getFeed(currentUserId, query);\n  }\n\n  /**\n   * Route to create an article\n   * @param {ArticleDto} payload the article dto\n   */\n  @Post()\n  @ApiResponse({\n    status: 201,\n    description: 'Create Articles Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Create Articles Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async createArticle(\n    @UserParam() user: UserEntity,\n    @Body() payload: CreateArticleDto,\n  ): Promise {\n    const article = await this.articleService.createArticle(\n      user,\n      payload.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Get(':slug')\n  @ApiResponse({\n    status: 200,\n    description: 'Get Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getArticle(@Param('slug') slug: string): Promise {\n    const article = await this.articleService.findBySlug(slug);\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Put(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Edit Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Edit Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n    @Body() updateArticleDto: CreateArticleDto,\n  ) {\n    const article = await this.articleService.updateArticle(\n      slug,\n      currentUserId,\n      updateArticleDto.article,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  /**\n   * Route to get a single article\n   * @param {string} slug the article slug\n   */\n  @Delete(':slug')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteArticlePolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Delete Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteArticle(slug, currentUserId);\n  }\n\n  @Get(':slug/comments')\n  @ApiResponse({\n    status: 200,\n    description: 'Get Article Comments Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Get Article Comments Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getCommentsForArticle(@Param('slug') slug: string) {\n    return await this.articleService.getCommentsOnArticle(slug);\n  }\n\n  @Post(':slug/comments')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Commenting on Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Commenting on Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async commentOnArticle(\n    @UserParam() user: UserEntity,\n    @Param('slug') slug: string,\n    @Body() createArticleCommentDto: CreateArticleCommentDto,\n  ) {\n    const comment = await this.articleService.createCommentOnArticle(\n      slug,\n      user,\n      createArticleCommentDto.comment,\n    );\n    return this.articleService.buildArticleCommentResponse(comment);\n  }\n\n  @Delete(':slug/comments/:id')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Delete Comment from Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Delete Comment from Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteCommentFromArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('id') commentId: number,\n    @Param('slug') slug: string,\n  ) {\n    return await this.articleService.deleteCommentFromArticle(\n      slug,\n      commentId,\n      currentUserId,\n    );\n  }\n\n  @Post(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Favourite an Article Request Completed',\n  })\n  @ApiResponse({ status: 400, description: 'Favourite an Article Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async favouriteArticle(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.addArticleToFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n\n  @Delete(':slug/favorite')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 201,\n    description: 'Unfavourite an Article Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfavourite an Article Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async deleteArticleFromFavorites(\n    @UserParam('id') currentUserId: number,\n    @Param('slug') slug: string,\n  ) {\n    const article = await this.articleService.deleteArticleFromFavorites(\n      slug,\n      currentUserId,\n    );\n    return this.articleService.buildArticleResponse(article);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleDto.html":{"url":"classes/ArticleDto.html","title":"class - ArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                description\n                            \n                            \n                                    Optional\n                                tagList\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsString, ValidateNested } from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  description: string;\n\n  @ApiProperty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty()\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ArticleEntity.html":{"url":"entities/ArticleEntity.html","title":"entity - ArticleEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ArticleEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                comments\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                favoritesCount\n                            \n                            \n                                id\n                            \n                            \n                                slug\n                            \n                            \n                                tagList\n                            \n                            \n                                title\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.articles, {eager: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'mediumtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.article, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Default description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favoritesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tagList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-array')\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { CommentEntity } from './comment.entity';\n\n@Entity({ name: 'articles' })\nexport class ArticleEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  title: string;\n\n  @Column({ default: 'Default description' })\n  description: string;\n\n  @Column({ type: 'mediumtext' })\n  body: string;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @Column('simple-array')\n  tagList: string[];\n\n  @Column({ default: 0 })\n  favoritesCount: number;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n\n  @ManyToOne(() => UserEntity, (user) => user.articles, {\n    eager: true,\n    nullable: false,\n  })\n  author: UserEntity;\n\n  @OneToMany(() => CommentEntity, (comment) => comment.article, { eager: true })\n  comments: CommentEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticleFeedQueryParams.html":{"url":"classes/ArticleFeedQueryParams.html","title":"class - ArticleFeedQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticleFeedQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/article-feed.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/article-feed.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticleFeedQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticleModule.html":{"url":"modules/ArticleModule.html","title":"module - ArticleModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/article/article.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                        \n                            CaslFactory\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagEntity } from '../tag/tag.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleController } from './article.controller';\nimport { ArticleEntity } from './article.entity';\nimport { ArticleService } from './article.service';\nimport { CommentEntity } from './comment.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      ArticleEntity,\n      UserEntity,\n      TagEntity,\n      FollowEntity,\n      CommentEntity,\n    ]),\n  ],\n  controllers: [ArticleController],\n  providers: [ArticleService, CaslFactory, TagService],\n})\nexport class ArticleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleService.html":{"url":"injectables/ArticleService.html","title":"injectable - ArticleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/article.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addArticleToFavorites\n                            \n                            \n                                buildArticleCommentResponse\n                            \n                            \n                                buildArticleResponse\n                            \n                            \n                                    Async\n                                createArticle\n                            \n                            \n                                    Async\n                                createCommentOnArticle\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                deleteArticleFromFavorites\n                            \n                            \n                                    Async\n                                deleteCommentFromArticle\n                            \n                            \n                                    Async\n                                findBySlug\n                            \n                            \n                                    Async\n                                getArticles\n                            \n                            \n                                    Async\n                                getCommentsOnArticle\n                            \n                            \n                                    Async\n                                getFeed\n                            \n                            \n                                    Private\n                                getSlug\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(articleRepository: Repository, userRepository: Repository, followRepository: Repository, commentRepository: Repository, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/article/article.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        articleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addArticleToFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArticleToFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleCommentResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleCommentResponse(comment: CommentEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:317\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CommentEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { comment: CommentEntity; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildArticleResponse\n                        \n                    \n                \n            \n            \n                \nbuildArticleResponse(article: ArticleEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n                                    \n                                                ArticleEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IArticleResponseBody\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createArticle(user: UserEntity, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCommentOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCommentOnArticle(slug: string, user: UserEntity, payload: ArticleCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(slug: string, currentUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteArticleFromFavorites\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticleFromFavorites(slug: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCommentFromArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentFromArticle(slug: string, commentId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:254\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBySlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySlug(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getArticles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticles(query: ArticlesQueryParams, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                ArticlesQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCommentsOnArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCommentsOnArticle(slug: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(currentUserId: number, query: ArticleFeedQueryParams)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                ArticleFeedQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getSlug\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSlug(title: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateArticle\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(slug: string, currentUserId: number, payload: ArticleDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/article/article.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    slug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                ArticleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ArticleService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/article.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport slugify from 'slugify';\nimport { Repository } from 'typeorm';\n\nimport {\n  IArticleResponseBody,\n  IArticlesResponseBody,\n} from '@starter/api-types';\n\nimport { FollowEntity } from '../profile/follow.entity';\nimport { TagService } from '../tag/tag.service';\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\nimport { CommentEntity } from './comment.entity';\nimport { ArticleFeedQueryParams } from './dto/article-feed.dto';\nimport { ArticlesQueryParams } from './dto/articles-query.dto';\nimport { ArticleCommentDto } from './dto/create-article-comment.dto';\nimport { ArticleDto } from './dto/create-article.dto';\n\n@Injectable()\nexport class ArticleService {\n  private readonly logger = new Logger(ArticleService.name);\n\n  constructor(\n    @InjectRepository(ArticleEntity)\n    private readonly articleRepository: Repository,\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n    @InjectRepository(CommentEntity)\n    private readonly commentRepository: Repository,\n    private readonly tagService: TagService,\n  ) {}\n\n  private getSlug(title: string): string {\n    return (\n      slugify(title, { lower: true }) +\n      '-' +\n      ((Math.random() * Math.pow(36, 6)) | 0).toString(36)\n    );\n  }\n\n  async getArticles(\n    query: ArticlesQueryParams,\n    userId?: number,\n  ): Promise {\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author');\n\n    if (query.tag) {\n      queryBuilder.andWhere('articles.tagList LIKE :tag', {\n        tag: `%${query.tag}`,\n      });\n    }\n\n    if (query.author) {\n      const author = await this.userRepository.findOne({\n        where: { username: query.author },\n      });\n      if (author) {\n        queryBuilder.andWhere('articles.authorId = :id', {\n          id: author.id,\n        });\n      }\n    }\n\n    if (query.favorited) {\n      const author = await this.userRepository.findOne({\n        where: {\n          username: query.favorited,\n        },\n        relations: ['favorites'],\n      });\n      const ids = author.favorites.map((el) => el.id);\n\n      if (ids.length > 0) {\n        queryBuilder.andWhere('articles.authorId IN (:...ids)', { ids });\n      } else {\n        queryBuilder.andWhere('1=0');\n      }\n    }\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    let favoriteIds: number[] = [];\n\n    if (userId) {\n      const currentUser = await this.userRepository.findOne({\n        where: { id: userId },\n        relations: ['favorites'],\n      });\n      favoriteIds = currentUser.favorites.map((favorite) => favorite.id);\n    }\n\n    const articles = await queryBuilder.getMany();\n    const articlesWithFavorited = articles.map((article) => {\n      const favorited = favoriteIds.includes(article.id);\n      return { ...article, favorited };\n    });\n\n    return { articles: articlesWithFavorited, articlesCount };\n  }\n\n  async findBySlug(slug: string): Promise {\n    return await this.articleRepository.findOne({ where: { slug } });\n  }\n\n  async getFeed(currentUserId: number, query: ArticleFeedQueryParams) {\n    const follows = await this.followRepository.find({\n      where: { followerId: currentUserId },\n    });\n\n    if (follows.length === 0) {\n      return { articles: [], articlesCount: 0 };\n    }\n\n    const followingUserIds = follows.map((follow) => follow.followingId);\n    const queryBuilder = this.articleRepository\n      .createQueryBuilder('articles')\n      .leftJoinAndSelect('articles.author', 'author')\n      .where('articles.authorId IN (:...ids)', { ids: followingUserIds });\n\n    queryBuilder.orderBy('articles.createdAt', 'DESC');\n\n    const articlesCount = await queryBuilder.getCount();\n\n    if (query.limit) {\n      queryBuilder.limit(query.limit);\n    }\n\n    if (query.offset) {\n      queryBuilder.offset(query.offset);\n    }\n\n    const articles = await queryBuilder.getMany();\n\n    return { articles, articlesCount };\n  }\n\n  async createArticle(\n    user: UserEntity,\n    payload: ArticleDto,\n  ): Promise {\n    const article = new ArticleEntity();\n    Object.assign(article, payload);\n    if (!article.tagList) {\n      article.tagList = [];\n    }\n    article.slug = this.getSlug(payload.title);\n    article.author = user;\n\n    // Creating tags from tagList\n    const [createdArticle] = await Promise.all([\n      this.articleRepository.save(article),\n      ...article.tagList.map((name) => this.tagService.createTag({ name })),\n    ]);\n    return createdArticle;\n  }\n\n  async updateArticle(\n    slug: string,\n    currentUserId: number,\n    payload: ArticleDto,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    Object.assign(article, payload);\n\n    return await this.articleRepository.save(article);\n  }\n\n  async deleteArticle(slug: string, currentUserId: number) {\n    const article = await this.findBySlug(slug);\n\n    if (!article) {\n      throw new HttpException('Article does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (article.author.id !== currentUserId) {\n      throw new HttpException('You are not an author', HttpStatus.FORBIDDEN);\n    }\n\n    return await this.articleRepository.delete({ slug });\n  }\n\n  async addArticleToFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    this.logger.log('ARTICLE ' + JSON.stringify(article));\n\n    const isNotFavorited =\n      user.favorites.findIndex(\n        (articleInFavorites) => articleInFavorites.id === article.id,\n      ) === -1;\n\n    if (isNotFavorited) {\n      user.favorites.push(article);\n      article.favoritesCount++;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    }\n\n    return article;\n  }\n\n  async getCommentsOnArticle(slug: string): Promise {\n    const article = await this.findBySlug(slug);\n    return article.comments;\n  }\n\n  async createCommentOnArticle(\n    slug: string,\n    user: UserEntity,\n    payload: ArticleCommentDto,\n  ) {\n    const article = await this.findBySlug(slug);\n\n    const comment = new CommentEntity();\n    Object.assign(comment, payload);\n    comment.author = user;\n    comment.article = article;\n\n    return await this.commentRepository.save(comment);\n  }\n\n  async deleteCommentFromArticle(\n    slug: string,\n    commentId: number,\n    userId: number,\n  ) {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['comments'],\n    });\n\n    const articleCommentIndex = article.comments.findIndex(\n      (articleComment) => articleComment.id === commentId,\n    );\n    const userCommentIndex = user.comments.findIndex(\n      (userComment) => userComment.id === commentId,\n    );\n\n    if (articleCommentIndex > -1) {\n      article.comments.splice(articleCommentIndex, 1);\n      await this.articleRepository.save(article);\n    }\n\n    if (userCommentIndex > -1) {\n      user.comments.splice(userCommentIndex, 1);\n      await this.userRepository.save(user);\n    }\n\n    return await this.commentRepository.delete({ id: commentId });\n  }\n\n  async deleteArticleFromFavorites(\n    slug: string,\n    userId: number,\n  ): Promise {\n    const article = await this.findBySlug(slug);\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      relations: ['favorites'],\n    });\n\n    const articleIndex = user.favorites.findIndex(\n      (articleInFavorites) => articleInFavorites.id === article.id,\n    );\n\n    if (articleIndex > -1) {\n      user.favorites.splice(articleIndex, 1);\n      article.favoritesCount--;\n      await this.userRepository.save(user);\n      await this.articleRepository.save(article);\n    } else {\n      throw new HttpException(\n        'Article is not in favorites',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return article;\n  }\n\n  buildArticleResponse(article: ArticleEntity): IArticleResponseBody {\n    return { article };\n  }\n\n  buildArticleCommentResponse(comment: CommentEntity) {\n    delete comment.article;\n    return { comment };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesQueryParams.html":{"url":"classes/ArticlesQueryParams.html","title":"class - ArticlesQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/articles-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                favorited\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                            \n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/articles-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ArticlesQueryParams {\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  tag: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  author: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  favorited: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  limit: number;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.module.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { module: typeof AuthModule; providers: {}; }\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserRoles } from '../users/user-role.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\n\nconst providers = [AuthService, JwtStrategy];\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity, UserRoles]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n          signOptions: {\n            ...(configService.get('WEBTOKEN_EXPIRATION_TIME')\n              ? {\n                  expiresIn: Number(\n                    configService.get('WEBTOKEN_EXPIRATION_TIME'),\n                  ),\n                }\n              : {}),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [...providers, UsersService],\n  controllers: [],\n  exports: providers,\n})\nexport class AuthModule {\n  static forRoot() {\n    return {\n      module: AuthModule,\n      providers,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiration\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwt service\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a signed jwt token based on User payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        token body\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/auth.service.ts:16\n                        \n                    \n\n            \n                \n                    Time in seconds when the token is to expire\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserEntity } from '../users/user.entity';\n\n/**\n * Authentication Service\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Time in seconds when the token is to expire\n   * @type {number}\n   */\n  private readonly expiration: number;\n\n  /**\n   * Constructor\n   * @param {JwtService} jwtService jwt service\n   * @param {UsersService} usersService users service\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    this.expiration = this.configService.get('WEBTOKEN_EXPIRATION_TIME');\n  }\n\n  /**\n   * Creates a signed jwt token based on User payload\n   * @param {UserEntity} param dto to generate token from\n   * @returns {Promise} token body\n   */\n  createToken({ id, username, roles, email }: UserEntity): string {\n    return this.jwtService.sign({\n      id,\n      username,\n      roles,\n      email,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslFactory.html":{"url":"injectables/CaslFactory.html","title":"injectable - CaslFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/casl.factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/casl.factory.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n  InferSubjects,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\n\nimport { UserActionsEnum, UserRolesEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\n\n// Creating CASL subjects to manage. Remark: all is a special keyword in CASL that represents \"any subject\".\ntype Subjects = InferSubjects | 'all';\n\nexport type AppAbility = Ability;\n\n@Injectable()\nexport class CaslFactory {\n  createForUser(user: UserEntity) {\n    // Remark: the user is coming from the req.user.\n    const { can, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.roles.some(({ role }) => role === UserRolesEnum.SUDO)) {\n      can(UserActionsEnum.Manage, 'all'); // read-write access to everything\n    } else {\n      can(UserActionsEnum.Read, 'all'); // read-only access to everything\n    }\n\n    // User scoped permissions\n    can(UserActionsEnum.Update, UserEntity, { id: user.id });\n    can(UserActionsEnum.Update, ArticleEntity, { author: user });\n    can(UserActionsEnum.Delete, ArticleEntity, { author: user });\n\n    return build({\n      // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_providers\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslFactory \n\nCaslFactory \n\n\n\nCaslModule\n\nCaslModule\n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { CaslFactory } from './casl.factory';\n\n@Module({\n  providers: [CaslFactory],\n  exports: [CaslFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CommentEntity.html":{"url":"entities/CommentEntity.html","title":"entity - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                            \n                                author\n                            \n                            \n                                body\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, article => article.comments, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeUpdate,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { ArticleEntity } from './article.entity';\n\n@Entity({ name: 'comments' })\nexport class CommentEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  body: string;\n\n  @ManyToOne(() => ArticleEntity, (article) => article.comments, {\n    nullable: false,\n  })\n  article: ArticleEntity;\n\n  @ManyToOne(() => UserEntity, (user) => user.comments, { nullable: false })\n  author: UserEntity;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  updatedAt: Date;\n\n  @BeforeUpdate()\n  updateTimestamp() {\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleCommentDto.html":{"url":"classes/CreateArticleCommentDto.html","title":"class - CreateArticleCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleCommentDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article-comment.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsNotEmpty, ValidateNested } from 'class-validator';\n\nexport class ArticleCommentDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  body: string;\n}\n\nexport class CreateArticleCommentDto {\n  @ApiProperty()\n  @Type(() => ArticleCommentDto)\n  @ValidateNested()\n  comment: ArticleCommentDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateArticleDto.html":{"url":"classes/CreateArticleDto.html","title":"class - CreateArticleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateArticleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/article/dto/create-article.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                article\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        article\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/article/dto/create-article.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsOptional, IsString, ValidateNested } from 'class-validator';\n\nexport class ArticleDto {\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  description: string;\n\n  @ApiProperty()\n  body: string;\n\n  @ApiProperty({\n    required: false,\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  tagList?: string[];\n}\n\nexport class CreateArticleDto {\n  @ApiProperty()\n  @Type(() => ArticleDto)\n  @ValidateNested()\n  article: ArticleDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsAlpha()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/dto/create-tag.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsAlpha, IsNotEmpty } from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsAlpha()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteArticlePolicyHandler.html":{"url":"classes/DeleteArticlePolicyHandler.html","title":"class - DeleteArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteUserPolicyHandler.html":{"url":"classes/DeleteUserPolicyHandler.html","title":"class - DeleteUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowEntity.html":{"url":"entities/FollowEntity.html","title":"entity - FollowEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followerId\n                            \n                            \n                                followingId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/profile/follow.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'follows' })\nexport class FollowEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  followerId: number;\n\n  @Column()\n  followingId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Authentication Guard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { IS_PUBLIC_KEY } from './public.decorator';\n\n/**\n * JWT Authentication Guard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Jwt Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/auth/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, jwtPayload: Record)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/auth/jwt.strategy.ts:35\n                \n            \n\n\n            \n                \n                    Checks if the bearer token is a valid token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    jwtPayload\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        validation method for jwt token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        a object to be signed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { UsersService } from '../users/users.service';\n\n/**\n * Jwt Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor\n   * @param {ConfigService} configService\n   * @param {UsersService} usersService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('Bearer'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('WEBTOKEN_ENCRYPTION_KEY'),\n      passReqToCallback: true,\n    });\n  }\n\n  /**\n   * Checks if the bearer token is a valid token\n   * @param {Record} jwtPayload validation method for jwt token\n   * @returns {Promise>} a object to be signed\n   */\n  async validate(request: Request, jwtPayload: Record) {\n    const { iat, exp, id } = jwtPayload;\n    const timeDiff = exp - iat;\n    if (timeDiff \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserLoginDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordTransformer.html":{"url":"classes/PasswordTransformer.html","title":"class - PasswordTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/password.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                Password Transformer Class\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:20\n                \n            \n\n\n            \n                \n                    Grabs the string to hash from\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/password.transformer.ts:12\n                \n            \n\n\n            \n                \n                    Value to transform to\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string to hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as crypto from 'crypto';\nimport { ValueTransformer } from 'typeorm';\n\n/**\n * Password Transformer Class\n */\nexport class PasswordTransformer implements ValueTransformer {\n  /**\n   * Value to transform to\n   * @param {string} value string to hash\n   */\n  to(value: string) {\n    return crypto.createHmac('sha256', value).digest('hex');\n  }\n\n  /**\n   * Grabs the string to hash from\n   * @param {string} value from string\n   */\n  from(value: string) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchArticlePolicyHandler.html":{"url":"classes/PatchArticlePolicyHandler.html","title":"class - PatchArticlePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchArticlePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Patch User Payload Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsFQDN,\n  IsOptional,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsOptional()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  @IsOptional()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @MaxLength(255)\n  @IsOptional()\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsFQDN()\n  @IsOptional()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @MinLength(8)\n  @IsOptional()\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPolicyHandler.html":{"url":"classes/PatchUserPolicyHandler.html","title":"class - PatchUserPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/casl/policy-handlers.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policy-handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UserActionsEnum } from '@starter/api-types';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { UserEntity } from '../users/user.entity';\nimport { AppAbility } from './casl.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n// Policy Handlers\n\nexport class PatchUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility): boolean {\n    return ability.can(UserActionsEnum.Update, UserEntity);\n  }\n}\n\nexport class DeleteUserPolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, UserEntity);\n  }\n}\n\nexport class PatchArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Update, ArticleEntity);\n  }\n}\nexport class DeleteArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(UserActionsEnum.Delete, ArticleEntity);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/api/src/casl/policies.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, CaslFactory: CaslFactory)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/casl/policies.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CaslFactory\n                                                  \n                                                        \n                                                                        CaslFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/casl/policies.guard.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { AppAbility, CaslFactory } from './casl.factory';\nimport { CHECK_POLICIES_KEY } from './check-policies.decorator';\nimport { PolicyHandler } from './policy-handlers';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(private reflector: Reflector, private CaslFactory: CaslFactory) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.CaslFactory.createForUser(user.user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 200, description: 'Follow Profile Request Completed'})@ApiResponse({status: 400, description: 'Follow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 201, description: 'Get Profile by Username Request Completed'})@ApiResponse({status: 400, description: 'Get Profile by Username Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username/follow')@UseGuards(PoliciesGuard)@CheckPolicies(new PatchUserPolicyHandler())@ApiResponse({status: 200, description: 'Unfollow Profile Request Completed'})@ApiResponse({status: 400, description: 'Unfollow Profile Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/profile/profile.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { PatchUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserParam } from '../users/user.decorator';\nimport { ProfileService } from './profile.service';\n\n@ApiBearerAuth()\n@ApiTags('profiles')\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Get(':username')\n  @ApiResponse({\n    status: 201,\n    description: 'Get Profile by Username Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Get Profile by Username Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async getProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.getProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Post(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 200,\n    description: 'Follow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Follow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async followProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.followProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n\n  @Delete(':username/follow')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new PatchUserPolicyHandler())\n  @ApiResponse({\n    status: 200,\n    description: 'Unfollow Profile Request Completed',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Unfollow Profile Bad Request',\n  })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async unfollowProfile(\n    @UserParam('id') currentUserId: number,\n    @Param('username') profileUsername: string,\n  ) {\n    const profile = await this.profileService.unfollowProfile(\n      currentUserId,\n      profileUsername,\n    );\n    return this.profileService.buildProfileResponse(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nCaslFactory\n\nCaslFactory\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { CaslFactory } from '../casl/casl.factory';\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, FollowEntity])],\n  controllers: [ProfileController],\n  providers: [ProfileService, CaslFactory],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildProfileResponse\n                            \n                            \n                                    Async\n                                followProfile\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                unfollowProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, followRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildProfileResponse\n                        \n                    \n                \n            \n            \n                \nbuildProfileResponse(profile)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { profile: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    followProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowProfile(currentUserId: number, profileUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/profile/profile.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profileUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { UserEntity } from '../users/user.entity';\nimport { FollowEntity } from './follow.entity';\n\n// TODO: type everything (exportable in api-types for UI to use)\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(FollowEntity)\n    private readonly followRepository: Repository,\n  ) {}\n\n  async getProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: {\n        followerId: currentUserId,\n        followingId: user.id,\n      },\n    });\n    console.log('follow', follow, currentUserId, user.id);\n\n    return { ...user, following: Boolean(follow) };\n  }\n\n  async followProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: { username: profileUsername },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const follow = await this.followRepository.findOne({\n      where: { followerId: currentUserId, followingId: user.id },\n    });\n\n    if (!follow) {\n      const followToCreate = new FollowEntity();\n      followToCreate.followerId = currentUserId;\n      followToCreate.followingId = user.id;\n      await this.followRepository.save(followToCreate);\n    }\n\n    return { ...user, following: true };\n  }\n\n  async unfollowProfile(currentUserId: number, profileUsername: string) {\n    const user = await this.userRepository.findOne({\n      where: {\n        username: profileUsername,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    if (currentUserId === user.id) {\n      throw new HttpException(\n        \"Follower and Following can't be equal\",\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    await this.followRepository.delete({\n      followerId: currentUserId,\n      followingId: user.id,\n    });\n\n    return { ...user, following: false };\n  }\n\n  buildProfileResponse(profile: UserEntity & { following: boolean }) {\n    delete profile.email;\n    return { profile };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRegistrationDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Type(undefined)@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@ApiResponse({status: 200, description: 'Fetch Tags Request Received'})@ApiResponse({status: 400, description: 'Fetch Tags Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/tag/tag.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { Public } from '../auth/public.decorator';\nimport { TagService } from './tag.service';\n\n@ApiBearerAuth()\n@ApiTags('tags')\n@Controller('tags')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Public()\n  @Get()\n  @ApiResponse({ status: 200, description: 'Fetch Tags Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch Tags Request Failed' })\n  async getTags() {\n    const tags = await this.tagService.getTags();\n    return {\n      tags: tags.map((tag) => tag.name),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Tag Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/tag/tag.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Tag Entity Class\n */\n@Entity({ name: 'tags' })\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TagController } from './tag.controller';\nimport { TagEntity } from './tag.entity';\nimport { TagService } from './tag.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TagEntity])],\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTag\n                            \n                            \n                                    Async\n                                getTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/tag/tag.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTag(tag: CreateTagDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n                                    \n                                                CreateTagDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTags()\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/tag/tag.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\nimport { Repository } from 'typeorm';\nimport { Logger } from 'winston';\n\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { TagEntity } from './tag.entity';\n\n@Injectable()\nexport class TagService {\n  constructor(\n    @InjectRepository(TagEntity)\n    private readonly tagRepository: Repository,\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  async getTags(): Promise {\n    return await this.tagRepository.find();\n  }\n\n  async createTag(tag: CreateTagDto): Promise {\n    try {\n      const article = new TagEntity();\n      Object.assign(article, tag);\n      return await this.tagRepository.save(article);\n    } catch (error) {\n      // Error case is likely a duplicate tag which is fine to be ignored\n      this.logger.debug(`Tag ${tag.name} exists, so not creating duplicate`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, token: string, payload: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponse({status: 200, description: 'Put User Request Received'})@ApiResponse({status: 400, description: 'Put User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:33\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                PatchUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/user.controller.ts:21\n                \n            \n\n\n            \n                \n                    Retrieves current authenticated user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IUser\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Request } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IUser } from '@starter/api-types';\n\nimport { PatchUserDto } from './dto/patch-user.dto';\nimport { UserParam } from './user.decorator';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n@ApiBearerAuth()\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly usersService: UsersService) {}\n  /**\n   * Retrieves current authenticated user\n   * @returns {IUser} queried user data\n   */\n  @Get()\n  getUser(@Request() req): IUser {\n    return req.user as IUser;\n  }\n\n  /**\n   * Edit a user\n   * @param {RegisterPayload} payload\n   * @returns {Promise} mutated user data\n   */\n  @Put()\n  @ApiResponse({ status: 200, description: 'Put User Request Received' })\n  @ApiResponse({ status: 400, description: 'Put User Request Failed' })\n  async editUser(\n    @UserParam('id') userId: number,\n    @UserParam('token') token: string,\n    @Body() payload: PatchUserDto,\n  ): Promise {\n    return {\n      user: { ...(await this.usersService.edit(userId, payload.user)), token },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/dto/patch-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                bio\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                image\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MaxLength(255)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    Bio field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsFQDN()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:45\n                        \n                    \n\n            \n                \n                    Image field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@MinLength(8)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:53\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/dto/patch-user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsFQDN,\n  IsOptional,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport class UserDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsEmail()\n  @IsOptional()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  @IsOptional()\n  readonly username: string;\n\n  /**\n   * Bio field\n   */\n  @ApiProperty()\n  @MaxLength(255)\n  @IsOptional()\n  readonly bio: string;\n\n  /**\n   * Image field\n   * @example https://gravatar.com/avatar/123\n   */\n  @ApiProperty()\n  @IsFQDN()\n  @IsOptional()\n  readonly image: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @MinLength(8)\n  @IsOptional()\n  readonly password: string;\n}\n\n/**\n * Patch User Payload Class\n */\nexport class PatchUserDto {\n  @ApiProperty()\n  @Type(() => UserDto)\n  @ValidateNested()\n  readonly user: UserDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                articles\n                            \n                            \n                                bio\n                            \n                            \n                                comments\n                            \n                            \n                                email\n                            \n                            \n                                favorites\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, article => article.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:45\n                        \n                    \n\n            \n                \n                    Bio column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:39\n                        \n                    \n\n            \n                \n                    Email column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favorites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArticleEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:27\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:51\n                        \n                    \n\n            \n                \n                    Gravatar column (gravatar url)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', length: 255, transformer: undefined, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    Column that employs the PasswordTransformer to hash passwords before writing to database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, role => role.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:57\n                        \n                    \n\n            \n                \n                    Column to represent a one to many relationship with the roles entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    Username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { ArticleEntity } from '../article/article.entity';\nimport { CommentEntity } from '../article/comment.entity';\nimport { PasswordTransformer } from './password.transformer';\nimport { UserRoles } from './user-role.entity';\n\n/**\n * User Entity Class\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Username column\n   */\n  @Column({ unique: true })\n  username: string;\n\n  /**\n   * Email column\n   */\n  @Column()\n  email: string;\n\n  /**\n   * Bio column\n   */\n  @Column({ default: '' })\n  bio: string;\n\n  /**\n   * Gravatar column (gravatar url)\n   */\n  @Column()\n  image: string;\n\n  /**\n   * Column to represent a one to many relationship with the roles entity\n   */\n  @OneToMany(() => UserRoles, (role) => role.user)\n  roles: UserRoles[];\n\n  /**\n   * Column that employs the PasswordTransformer to hash passwords before writing to database\n   */\n  @Column({\n    name: 'password',\n    length: 255,\n    transformer: new PasswordTransformer(),\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @OneToMany(() => ArticleEntity, (article) => article.author)\n  articles: ArticleEntity[];\n\n  @OneToMany(() => CommentEntity, (comment) => comment.author)\n  comments: CommentEntity[];\n\n  @ManyToMany(() => ArticleEntity)\n  @JoinTable()\n  favorites: ArticleEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDto.html":{"url":"classes/UserLoginDto.html","title":"class - UserLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Login Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:20\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/login.dto.ts:28\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Login Dto Class\n */\nexport class UserLoginDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class LoginDto {\n  @ApiProperty()\n  @Type(() => UserLoginDto)\n  @ValidateNested()\n  readonly user: UserLoginDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRegistrationDto.html":{"url":"classes/UserRegistrationDto.html","title":"class - UserRegistrationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRegistrationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Register Dto Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:21\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:37\n                        \n                    \n\n            \n                \n                    Password field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/auth/dto/register.dto.ts:29\n                        \n                    \n\n            \n                \n                    Username field\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\n/**\n * Register Dto Class\n */\nexport class UserRegistrationDto {\n  /**\n   * Email field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Username field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @Matches(/^(?=[a-zA-Z0-9._]{8,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/)\n  readonly username: string;\n\n  /**\n   * Password field\n   */\n  @ApiProperty()\n  @IsNotEmpty()\n  @MinLength(8)\n  readonly password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty()\n  @Type(() => UserRegistrationDto)\n  @ValidateNested()\n  readonly user: UserRegistrationDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRoles.html":{"url":"entities/UserRoles.html","title":"entity - UserRoles","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRoles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/user-role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Roles Entity Class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:16\n                        \n                    \n\n            \n                \n                    UUID column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRolesEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRolesEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:27\n                        \n                    \n\n            \n                \n                    Column for role based access\nBeware this default app role will permit every created profile to delete other profiles\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.roles, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/api/src/users/user-role.entity.ts:35\n                        \n                    \n\n            \n                \n                    Column to represent a many to one relationship with the profile entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { UserRolesEnum } from '@starter/api-types';\n\nimport { UserEntity } from './user.entity';\n\n/**\n * User Roles Entity Class\n */\n@Entity()\nexport class UserRoles {\n  /**\n   * UUID column\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Column for role based access\n   * Beware this default app role will permit every created profile to delete other profiles\n   */\n  @Column({\n    type: 'enum',\n    enum: UserRolesEnum,\n    default: UserRolesEnum.SUDO,\n  })\n  role: UserRolesEnum;\n\n  /**\n   * Column to represent a many to one relationship with the profile entity\n   */\n  @ManyToOne(() => UserEntity, (user) => user.roles, {\n    onDelete: 'CASCADE',\n  })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByUsername\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':username')@UseGuards(PoliciesGuard)@CheckPolicies(new DeleteUserPolicyHandler())@ApiResponse({status: 200, description: 'Delete User Request Received'})@ApiResponse({status: 400, description: 'Delete User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:120\n                \n            \n\n\n            \n                \n                    Removes a user from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the username to remove\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the user has been deleted\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':username')@ApiResponse({status: 200, description: 'Fetch User Request Received'})@ApiResponse({status: 400, description: 'Fetch User Request Failed'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:98\n                \n            \n\n\n            \n                \n                    Retrieves a particular user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user given username to fetch\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        queried user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiResponse({status: 201, description: 'Login Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Login route to validate and create tokens for users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the login dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(payload: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@ApiResponse({status: 201, description: 'Registration Completed'})@ApiResponse({status: 400, description: 'Bad Request'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in apps/api/src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n                    Authentication route to register\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the registration dto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport { IGenericMessageBody, IUserResponseBody } from '@starter/api-types';\n\nimport { AuthService } from '../auth/auth.service';\nimport { LoginDto } from '../auth/dto/login.dto';\nimport { RegisterDto } from '../auth/dto/register.dto';\nimport { Public } from '../auth/public.decorator';\nimport { CheckPolicies } from '../casl/check-policies.decorator';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { DeleteUserPolicyHandler } from '../casl/policy-handlers';\nimport { UserEntity } from './user.entity';\nimport { UsersService } from './users.service';\n\n/**\n * Users Controller\n */\n@ApiBearerAuth()\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  /**\n   * Constructor\n   * @param {AuthService} authService authentication service\n   * @param usersService\n   */\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Authentication route to register\n   * @param {RegisterDto} payload the registration dto\n   */\n  @Public()\n  @Post()\n  @ApiResponse({ status: 201, description: 'Registration Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(\n    @Body() payload: RegisterDto,\n  ): Promise> {\n    const user = await this.usersService.create(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Login route to validate and create tokens for users\n   * @param {LoginDto} payload the login dto\n   */\n  @Public()\n  @Post('login')\n  @ApiResponse({ status: 201, description: 'Login Completed' })\n  @ApiResponse({ status: 400, description: 'Bad Request' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async login(\n    @Body() payload: LoginDto,\n  ): Promise> {\n    const user = await this.usersService.validateUser(payload.user);\n    return {\n      user: {\n        email: user.email,\n        token: this.authService.createToken(user),\n        username: user.username,\n        bio: user.bio,\n        image: user.image,\n      },\n    };\n  }\n\n  /**\n   * Retrieves a particular user\n   * @param username the user given username to fetch\n   * @returns {Promise} queried user data\n   */\n  @Get(':username')\n  @ApiResponse({ status: 200, description: 'Fetch User Request Received' })\n  @ApiResponse({ status: 400, description: 'Fetch User Request Failed' })\n  async getUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    const user = await this.usersService.getByUsername(username);\n    if (!user) {\n      throw new BadRequestException(\n        'The user with that username could not be found.',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Removes a user from the database\n   * @param {string} username the username to remove\n   * @returns {Promise} whether or not the user has been deleted\n   */\n  @Delete(':username')\n  @UseGuards(PoliciesGuard)\n  @CheckPolicies(new DeleteUserPolicyHandler())\n  @ApiResponse({ status: 200, description: 'Delete User Request Received' })\n  @ApiResponse({ status: 400, description: 'Delete User Request Failed' })\n  async deleteUserByUsername(\n    @Param('username') username: string,\n  ): Promise {\n    return this.usersService.delete(username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/api/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslFactory\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { CaslFactory } from '../casl/casl.factory';\nimport { PoliciesGuard } from '../casl/policies.guard';\nimport { UserRoles } from './user-role.entity';\nimport { UserController } from './user.controller';\nimport { UserEntity } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRoles]), AuthModule],\n  providers: [\n    UsersService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n    CaslFactory,\n  ],\n  controllers: [UsersController, UserController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/api/src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                edit\n                            \n                            \n                                get\n                            \n                            \n                                getByUsername\n                            \n                            \n                                getUserByEmailAndPass\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userRolesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/api/src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(payload: UserRegistrationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Create a user with RegisterPayload fields\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                UserRegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user payload\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from the created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:148\n                \n            \n\n\n            \n                \n                    Delete user given a username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        whether or not the delete operation was completed\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        edit\n                        \n                    \n                \n            \n            \n                \n                    \n                    edit(userId: number, payload: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        mutated user data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetches user from database by UUID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByUsername\n                        \n                    \n                \n            \n            \n                \ngetByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n                    Fetches user from database by username\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmailAndPass\n                        \n                    \n                \n            \n            \n                \ngetUserByEmailAndPass(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Fetches user by username and hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        data from queried user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: UserLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/api/src/users/users.service.ts:132\n                \n            \n\n\n            \n                \n                    Validates whether or not the user exists in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        registered user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotAcceptableException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as crypto from 'crypto';\nimport { url } from 'gravatar';\nimport { Repository } from 'typeorm';\n\nimport { IGenericMessageBody } from '@starter/api-types';\n\nimport { LoginDto, UserLoginDto } from '../auth/dto/login.dto';\nimport { UserRegistrationDto } from '../auth/dto/register.dto';\nimport { UserDto } from './dto/patch-user.dto';\nimport { UserRoles } from './user-role.entity';\nimport { UserEntity } from './user.entity';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor\n   * @param {Repository} userRepository\n   * @param {Repository} rolesRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(UserRoles)\n    private readonly userRolesRepository: Repository,\n  ) {}\n\n  /**\n   * Fetches user from database by UUID\n   * @param {number} id\n   * @returns {Promise} data from queried user\n   */\n  get(id: number): Promise {\n    return this.userRepository.findOne({ where: { id }, relations: ['roles'] });\n  }\n\n  /**\n   * Fetches user from database by username\n   * @param {string} username\n   * @returns {Promise} data from queried user\n   */\n  getByUsername(username: string): Promise {\n    return this.userRepository.findOneBy({ username });\n  }\n\n  /**\n   * Fetches user by username and hashed password\n   * @param {string} email\n   * @param {string} password\n   * @returns {Promise} data from queried user\n   */\n  getUserByEmailAndPass(email: string, password: string): Promise {\n    return this.userRepository\n      .createQueryBuilder('users')\n      .where('users.email = :email and users.password = :password')\n      .setParameter('email', email)\n      .setParameter(\n        'password',\n        crypto.createHmac('sha256', password).digest('hex'),\n      )\n      .getOne();\n  }\n\n  /**\n   * Create a user with RegisterPayload fields\n   * @param {UserRegistrationDto} payload user payload\n   * @returns {Promise} data from the created user\n   */\n  async create(payload: UserRegistrationDto): Promise {\n    const user = await this.getByUsername(payload.username);\n\n    if (user) {\n      throw new NotAcceptableException(\n        'The account with the provided username currently exists. Please choose another one.',\n      );\n    }\n\n    // Remark: Default role is set to sudo\n    const roles: UserRoles[] = [new UserRoles()];\n    await this.userRolesRepository.save(roles);\n\n    return this.userRepository.save(\n      this.userRepository.create({\n        ...payload,\n        roles,\n        image: url(payload.email, {\n          protocol: 'https',\n          s: '200',\n          r: 'pg',\n          d: '404',\n        }),\n      }),\n    );\n  }\n\n  /**\n   * Edit user data\n   * @param {Partial} payload\n   * @returns {Promise} mutated user data\n   */\n  async edit(userId: number, payload: Partial): Promise {\n    const user = await this.get(userId);\n    if (user) {\n      Object.keys(payload).forEach((key) => {\n        if (key === 'password') {\n          key = crypto.createHmac('sha256', key).digest('hex');\n        }\n        user[key] = payload[key];\n      });\n      return this.userRepository.save(user);\n    } else {\n      throw new BadRequestException(\n        'The user with that username does not exist in the system. Please try another username.',\n      );\n    }\n  }\n\n  /**\n   * Validates whether or not the user exists in the database\n   * @param {LoginDto} param login payload to authenticate with\n   * @returns {Promise} registered user\n   */\n  async validateUser({ email, password }: UserLoginDto): Promise {\n    const user = await this.getUserByEmailAndPass(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Could not authenticate. Please try again',\n      );\n    }\n    return user;\n  }\n\n  /**\n   * Delete user given a username\n   * @param {string} username\n   * @returns {Promise} whether or not the delete operation was completed\n   */\n  async delete(username: string): Promise {\n    const deleted = await this.userRepository.delete({ username });\n    if (deleted.affected === 1) {\n      return { message: `Deleted ${username} from records` };\n    } else {\n      throw new BadRequestException(\n        `Failed to delete a user by the name of ${username}.`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/api/src/app.controller.test.ts\n            \n            variable\n            moduleMocker\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/api/src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                25 %\n                (3/12)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.entity.ts\n            \n            entity\n            ArticleEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                apps/api/src/article/comment.entity.ts\n            \n            entity\n            CommentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/article-feed.dto.ts\n            \n            class\n            ArticleFeedQueryParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/articles-query.dto.ts\n            \n            class\n            ArticlesQueryParams\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article-comment.dto.ts\n            \n            class\n            ArticleCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article-comment.dto.ts\n            \n            class\n            CreateArticleCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            ArticleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/api/src/article/dto/create-article.dto.ts\n            \n            class\n            CreateArticleDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            user\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.test.ts\n            \n            variable\n            userRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/login.dto.ts\n            \n            class\n            UserLoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/auth/dto/register.dto.ts\n            \n            class\n            UserRegistrationDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/casl.factory.ts\n            \n            injectable\n            CaslFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/check-policies.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            DeleteUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchArticlePolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            class\n            PatchUserPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/casl/policy-handlers.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_CURRENT_VERSION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_DESCRIPTION\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_NAME\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/main.ts\n            \n            variable\n            OPEN_API_ROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/follow.entity.ts\n            \n            entity\n            FollowEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/api/src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.entity.ts\n            \n            entity\n            TagEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/api/src/users/dto/patch-user.dto.ts\n            \n            class\n            UserDto\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                apps/api/src/users/password.transformer.ts\n            \n            class\n            PasswordTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user-role.entity.ts\n            \n            entity\n            UserRoles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.decorator.ts\n            \n            variable\n            UserParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                apps/api/src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~14.1.1\n        \n            @angular/cdk : ^14.2.0\n        \n            @angular/common : ~14.1.1\n        \n            @angular/compiler : ~14.1.1\n        \n            @angular/core : ~14.1.1\n        \n            @angular/flex-layout : ^14.0.0-beta.40\n        \n            @angular/forms : ~14.1.1\n        \n            @angular/material : ^14.2.0\n        \n            @angular/platform-browser : ~14.1.1\n        \n            @angular/platform-browser-dynamic : ~14.1.1\n        \n            @angular/router : ~14.1.1\n        \n            @casl/ability : ^6.0.0\n        \n            @fastify/helmet : ^9.1.0\n        \n            @fastify/rate-limit : ^7.3.0\n        \n            @fastify/static : ^6.5.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.5\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nrwl/angular : 14.5.10\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            gravatar : ^1.8.2\n        \n            joi : ^17.6.0\n        \n            moment : ^2.29.4\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.5.0\n        \n            slugify : ^1.6.5\n        \n            tslib : ^2.3.0\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n        \n            winston-daily-rotate-file : ^4.7.1\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAPI Starter\n\n\n  \n\n\nA progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n\n\n    \n    \n    \n    \n    \n\n\nTable of Contents:\n\nDescription\nPrerequisites\nDeployment\nEnvironment Configuration\nChoosing a Web Framework\nHTTP2\nChoosing a Database\nTesting\nTypeDocs\nLogs\n\n🔎 This repo was created with Nx.\n📚 Description\nThis boilerplate is made to quickly prototype backend applications. It comes with authentication/authorization, logging, crud features and database persistence out of the box.\n\n🛠️ Prerequisites\nNon Docker\n\nPlease make sure to have Node.js (16+) locally by downloading the Javascript runtime via brew, choco, or apt-get.\n\nPlease make sure to have MYSQL locally by deploying a web server stack like XAMPP. The control panel can then trigger MYSQL to start on localhost. MYSQL can be downloaded standalone via brew, choco, or apt-get.\n\n\nDocker 🐳\n\nPlease make sure to have Docker Desktop operational to quickly compose the required dependencies. Then follow the docker procedure outlined below.\n\n\n🚀 Deployment\nManual Deployment without Docker\n\nClone the repo via git clone https://github.com/msanvarov/nest-rest-typeorm-boilerplate.\n\nDownload dependencies via npm i or yarn.\n\nCreate a .env file via the cp .env.example .env command and replace the existing environment variable placeholders with valid responses.\n\nStart the api in development mode by using npm run start (the app will be exposed on http://localhost:3333; not to conflict with React, Angular, or Vue ports).\n\n\n\nOptional deployment of the UI\n\n\n\nThis repo comes with a UI built with Angular - that can be accessed via http://localhost:4200.\n\nTo start the UI, start a new terminal window and run npm run start --project ui.\n\n\n\nRemark: In the docker deployment, the UI is automatically started and served by the API.\n\n\n\n\nDeploying with Docker 🐳\n\nExecute the following command in-app directory:\n\n# creates and loads the docker container in detached mode with the required configuration\n$ docker-compose up -d\nThe following command will download dependencies and execute the web application on http://localhost:80 (deployed behind a Nginx reverse proxy).\n\n\n🔒 Environment Configuration\nBy default, the application comes with a config module that can read in every environment variable from the .env file.\nAPP_ENV - the application environment to execute as, either in development or production. Determines the type of logging options to utilize. Options: development or production.\nWEBTOKEN_ENCRYPTION_KEY - the key to encrypt/decrypt web tokens with. Make sure to generate a random alphanumeric string for this.\nWEBTOKEN_EXPIRATION_TIME - the time in seconds when the web token will expire; by default, it's 2400 seconds which is 40 mins.\nDB_TYPE - the type of database connection to use.\nDB_USERNAME - username for authenticating against the database.\nDB_PASSWORD - password for authenticating against the database, can be left empty if a password is not needed (not safe).\nDB_HOST - the endpoint where this database sits (default is localhost but can be set explicitly).\nDB_PORT - default ports for different types of database connections.\nDB_DATABASE - the actual database name to perform operations on.\n\n🏗 Choosing a Web Framework\nThis boilerplate comes with Fastify out of the box as it offers performance benefits over Express. But the Express adapter is still accessible on a different branch.\n\n💾 Choosing a Database\nBy default MYSQL/MariaDB are the database of choice but TypeORM supports other database types like SQLite, Postgres, MongoDB, and MSSQL. To use anything other than MYSQL/MariaDB, change the configuration in the .env file, and download the corresponding wrapper library, like SQLite3.\n\nCheck https://typeorm.io/ for supported database types.\n\nRemark: For MongoDB, TypeORM is not as feature-rich as Mongoose. Therefore I created another boilerplate for Nest and Mongoose.\n\n🦾 HTTP/2\nLuckily, Fastify can enable HTTP2 over either HTTPS (h2) or plaintext (h2c) out of the box. This boilerplate makes use of this on the feat/http2 branch where a self-signed certificate was created for testing this capability. The certificate is located in the certs folder. For production, please use a valid certificate.\nThe self signed certificate can be generated via OpenSSL:\n$ openssl req -x509 -newkey rsa:4096 -keyout api-key.pem -out api-cert.pem -days 365 -nodes\n\nRemark: Express can be ran with HTTP/2 by employing the spdy library.\n\n\n✅ Testing\nDocker 🐳\n# Start the docker container if it's not running\n$ docker start nest-rest-typeorm-api\n\n# unit tests\n$ docker exec -it nest-rest-typeorm-api npm run test\nNon-Docker\n# execute test\n$ npm run test\n💡 TypeDocs\nThe documentation for this boilerplate can be found on Github pages.\nThe docs can be generated on-demand, by typing npm run typedocs:api:start. This will produce a docs/api folder with the required front-end files and start hosting on localhost.\n\nRemark: The docs for the ui are generated on-demand, by typing npm run typedocs:ui:start. This will produce a docs/ui folder with the required front-end files and start hosting on localhost.\n\n# generate docs for api code\n$ npm run typedocs:api:start\n📝 Open API\nOut of the box, the web app comes with Swagger; an open api specification, that is used to describe RESTful APIs. Nest provides a dedicated module to work with it.\nThe configuration for Swagger can be found at this location.\n\n✨ TypeORM\nTypeORM is an object-relational mapping that acts as an abstraction layer over operations on databases. Please view the documentation for further details.\nThe configuration for TypeORM can be found in the app module.\n\n🔊 Logs\nThis boilerplate comes with a Winston module for extensive logging, the configurations for Winston can be found in the app module.\n\n🏗️ Progress\n\n\n\nBranches\nStatus\n\n\n\n\nmain\n✅\n\n\nfeat/*\n🚧\n\n\n\n Remark: This template was employed to create a [Real World example app](https://github.com/gothinkster/realworld) on [Github](). -->\n\n\n👥 Support\nPRs are appreciated, I fully rely on the passion ❤️ of the OS developers.\n\nLicense\nThis starter API is MIT licensed.\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCaslModule\n\nCaslModule\n\nAppModule -->\n\nCaslModule->AppModule\n\n\n\n\n\nCaslFactory \n\nCaslFactory \n\nCaslFactory  -->\n\nCaslModule->CaslFactory \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nCaslFactory\n\nCaslFactory\n\nArticleModule -->\n\nCaslFactory->ArticleModule\n\n\n\nCaslModule -->\n\nCaslFactory->CaslModule\n\n\n\nProfileModule -->\n\nCaslFactory->ProfileModule\n\n\n\nUsersModule -->\n\nCaslFactory->UsersModule\n\n\n\n\n\nTagService\n\nTagService\n\nArticleModule -->\n\nTagService->ArticleModule\n\n\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            License : MIT\n        \n            Author : Sal Anvarov\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (apps/.../casl.factory.ts)\n                        \n                        \n                            PolicyHandler   (apps/.../policy-handlers.ts)\n                        \n                        \n                            PolicyHandlerCallback   (apps/.../policy-handlers.ts)\n                        \n                        \n                            Subjects   (apps/.../casl.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/casl.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    apps/api/src/casl/policy-handlers.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            CheckPolicies   (apps/.../check-policies.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (apps/.../public.decorator.ts)\n                        \n                        \n                            moduleMocker   (apps/.../app.controller.test.ts)\n                        \n                        \n                            OPEN_API_CURRENT_VERSION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_DESCRIPTION   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_NAME   (apps/.../main.ts)\n                        \n                        \n                            OPEN_API_ROOT   (apps/.../main.ts)\n                        \n                        \n                            providers   (apps/.../auth.module.ts)\n                        \n                        \n                            Public   (apps/.../public.decorator.ts)\n                        \n                        \n                            user   (apps/.../auth.service.test.ts)\n                        \n                        \n                            UserParam   (apps/.../user.decorator.ts)\n                        \n                        \n                            userRole   (apps/.../auth.service.test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/api/src/casl/check-policies.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n}\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/app.controller.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        moduleMocker\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ModuleMocker(global)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OPEN_API_CURRENT_VERSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n\n            \n                \n                    Current version of the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_DESCRIPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API Description'\n                    \n                \n\n            \n                \n                    A short description for api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'API'\n                    \n                \n\n            \n                \n                    The name given to the api\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPEN_API_ROOT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api/v1/docs'\n                    \n                \n\n            \n                \n                    The endpoint for open api ui\n\n                \n            \n\n        \n    \n\n    apps/api/src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthService, JwtStrategy]\n                    \n                \n\n\n        \n    \n\n    apps/api/src/auth/auth.service.test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserEntity, {\n  id: 1,\n  email: 'test@user.com',\n  roles: [\n    {\n      id: 1,\n      role: UserRolesEnum.SUDO,\n      user: 1,\n    },\n  ],\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRoles\n\n                    \n                \n                \n                    \n                        Default value : plainToClass(UserRoles, {\n  id: 1,\n  role: UserRolesEnum.SUDO,\n  user,\n} as UserRoles)\n                    \n                \n\n\n        \n    \n\n    apps/api/src/users/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserParam\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (recordKey: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    if (!request.user) {\n      null;\n    }\n\n    if (recordKey) {\n      return request.user.user[recordKey as keyof typeof request.user.user];\n    }\n\n    return request.user.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
